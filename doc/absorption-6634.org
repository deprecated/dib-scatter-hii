#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+language: en
#+select_tags: export
#+exclude_tags: noexport


* New things to check out in 2021


** The surface brightness problem
+ One reason I see nothing much in the other H II regions from MUSE is that the surface brightness is too low
+ So we need to find regions with comparable surface brightness to Orion, so that we get a good enough signal for the Raman scattering
+ The MUSE units are 1e-20 erg/s/cm^2/AA (possibly per pixel)
+ In these units, typical brightnesses are
  | Region         | Wav       | Bright | t_exp | B x t |
  |----------------+-----------+--------+-------+-------|
  | Orion S        | cont 5000 |   7000 |   100 |     1 |
  | Orion Bar      | cont 5000 |   3000 |   100 | 0.429 |
  | Tr 14 field 21 | cont 6200 |     60 |  2200 | 0.189 |
  | 30 Dor         | cont 6200 |    250 |  2200 | 0.786 |
  | M17            | cont 6200 |    100 |  1100 | 0.157 |
  #+TBLFM: $5=$3 $4 / @2$3 @2$4 ; f3
+ So, 30 Dor isn't particularly bright really
  + but it does have a long exposure to make up for that
  + It has a R_wing ratio of order 0.1, same as in Orion (R058 band)
+ The other regions have much smaller R_wing


** H beta Raman scattering
+ This is clearly seen in the Orion and Tarantula spectra
+ There is an absorption line at 4849 and 4841, also possibly 4854 and on the other side 4870
  + Look at the Manu spectra for these
  + The difficulty here is a pair of [Fe II] emission lines at 4843 and 4873, which might be partially confusing things
  + However, I think that at least the 4849 and 4841 absorptions are real
  + Also the Manu green band has worryingly broad wings on the [O III] lines, so there may be some instrumental thing going on there
  + Maybe look at the Adal blue spectra
    + These do show it, but they are noisy and there is a weird set of ghosts that are periodically spaced around the bright lines
    + It should be possible to correct for those however
** UVES spectra from the Eduardo project
+ I have been looking at the HH 204 spectra and I think I do see the Raman wings
+ These spectra are very high spectral resolution, but the s/n is not so good
+ I can't see any evidence of the 6633 and 6664 absorption lines
  + There is a ghost that gets in the way
+ But I can see the excess emission in the closest-in Raman bands for Ha
  + R040 around 6600 \AA for instance
+ Also, it is possible to see the inner part of the wings between H\alpha 6563 and [N II] 6583, which are impossible to see in the MUSE spectra
+ It is easy to avoid the C II line, since it is so well resolved


** Tarantula (30 Dor) observations

+ These show the Ha line wings and the 6633 absorption at 6638 -> 230 km/s, which is about right for LMC
+ They also show an absorption at 6620 that looks like a DIB 6614 maybe
  

** Other LMC regions

*** N44 and N180 in LMC
+ MUSE observations in McLeod:2019a
  + [ ] I should grab these data
+ Most seem to big and floppy to have much hope for Raman
+ The best bet is probably N44C,
  + which has an O5 III star in it
  + with a total Q of nearly 1e50
  + but it is 7pc across, which means FUV flux on H0 will be low


** SMC N60
** SMC N88A
+ This is one of the Dopita objects
+ It has the deepest absorption lines of any of them
+ [X] Are there any MUSE observations?
  + It seems not
+ Testor:2010a have good IR observations
+ Also Ward:2017a
  + Note especially their Figure B4, which shows the 6633 and 6664 absorption lines!
  + It also shows am emission line at 6631 (taking into account +200 km/s velocity)

** New M17 MUSE observations
+ [2020-12-30 Wed] I have downloaded a sample cube
+ First look - Tile 08
  + Turns out that this is in the fully ionized bit - hence no Raman!
  + A bit disappointing - no sign of Raman wings
  + And no sign of 6633 absorption, except for a star
    + This is probably Fe I absorption, as seen in 159-350 in Orion
  + The O I 8446 line looks good though
    + Although it is weak and blended with another line
    + The [N I] lines are not seen at all

+ Second look - Tile 03
  + Still no clear detection of Raman wings or the 6633 absorption line
    + /However/ I think we can see the wing around 6400 angstrom
    + Also possibly in Red wing at 6595
      + Although there is a line at 6590
  + There is a beautiful clumpy PDR there, that can be seen in
    + [C I] 8727
    + O I 8446
    + [O I] 6300
    + [O II] 7318
    + [O III] 5007
  + The thickness of the PDR, from [O I] to [C I] is about 1.6 arcsec at its broadest, and even less in some places
  + RGB images
    + [[file:M17-Tile03-rgb-oi-oii-oiii.png]] Shows the ionized gas: [O I], [O II], [O III]
    + [[file:M17-Tile03-rgb-ci-oi_f-oi.png]] Shows the PDR: [C I], O I fluorescent, [O I]
  + Distance to M17 supposedly is 5000 ly = 1500 pc
    + So 1 arcsec = 1500 au = 7.27 mpc
    + That puts the separation between [C I] and O I as 12 mpc, which is about half the distance in the Orion Bar
    + So either the column density to DF is smaller, or the density is larger


** More Carina MUSE data from ridge near Tr 14
+ This looked like the most promising spot in Carina, but I still don't see anything
+ I have two fields, 21 and 22, that go from ionized to molecular
+ But I think the main problem is just that the surface brightness of everything is too low
+ We don't have a high enough G_0 is probably what it is
+ Another thing is that there might be a pair of emission lines that flank the 6633 absorption feature, just to confuse things
  + Observed wavelengths: 6628.9 and 6636.4
  + But in Carina:
    + C II 6461.9 is at 6461.41
    + Si II 6371.36 is at 6371.41
    + Si II 6347.11 is at 6347.01
    + So, very small velocity correction there
  + *Conclusion*: lines are at 6629.0 and 6636.4 +/- 1 A
  + There is a [Cr IV] line at 6641, but that doesn't look likely
  + Also sky lines around there ...
    + Could well be it, given the strength relative to the 6500 sky line
+ Another strange thing is that we never see much [Ni II]
  + [Ni II] 6667 / [Ni III] 6400 is about 0.5, as opposed to 1.5 to 2 in Orion

** Learn to use MPDAF
+ https://mpdaf.readthedocs.io/en/latest/index.html
+ Presumably, this will make various things about MUSE easier


** How Raman wing luminosity varies with nebula parameters
+ If optically thick:
  + Surface spectral brightness scales with illuminating FUV flux
    + I_\lambda_2 \propto L_\lambda_1 / 4 \pi R^2
  + Spectral luminosity just scales with star luminosity
    + L_\lambda_2 \propto L_\lambda_1
    + Flux has an extra factor of 1/D^2
  + When comparing to local continuum
* Absorption at 6634 \AA in Orion Nebula
+ [[https://www.evernote.com/l/ACSenDsvfD1AsZwl6SJxcieZcyrDhIYlOVw][Public link to Evernote note]]
** Little things for the revised version of paper
*** Graph of spectra showing the DIB at 5780 (and lack at 5797)
+ We do masks based on the equivalent widths, or not
+ Base it on the Raman wings graph from here
  + [[id:000D3CF5-4C2F-429C-A2CE-013C1AA0D40D][Plot the spectrum of different regions]]
+ Use 5800 to 5850 to get an average continuum since there are hardly any lines there
+ Plot from 5650 to 5950

#+name: extract-1d-spectra-DIB
#+header: :var WAVSEC="wavsec23"
#+begin_src python :return jsonfile :results file
  import json
  import numpy as np
  import astropy.coordinates as coord
  from astropy.wcs import WCS
  from astropy.io import fits
  import regions as rg

  regions = rg.read_ds9("../data/raman-extract-boxes.reg")
  regions += rg.read_ds9("../data/raman-faint2-boxes.reg")

  hdu = fits.open(f"../../OrionMuse/muse-hr-fullcube-rebin05x05.fits")["DATA"]

  spec = {}
  nz, ny, nx = hdu.data.shape
  w = WCS(hdu.header)
  _, _, waves = w.pixel_to_world_values([0], [0], np.arange(nz))
  for region in regions:
      mask = region.to_pixel(w.celestial).to_mask().to_image((ny, nx))
      label = region.meta["label"]
      spec[label] = {
          "wavelength": (1e10*waves).tolist(),
          "flux": np.sum(hdu.data*mask[None, :, :], axis=(1, 2)).tolist(),
          }

  jsonfile = f"raw-orion-muse-1d-spectra-full.json"

  with open(jsonfile, "w") as f:
      json.dump(spec, f, indent=3)
#+end_src

#+RESULTS: extract-1d-spectra-DIB
[[file:raw-orion-muse-1d-spectra-full.json]]

Now make a graph.

#+begin_src python :return figfile :results file
  import numpy as np
  import json
  from matplotlib import pyplot as plt
  import seaborn as sns
  from astropy.table import Table
  from astropy.convolution import Gaussian1DKernel, convolve_fft

  jsonfile = "raw-orion-muse-1d-spectra-full.json"
  data = json.load(open(jsonfile))
  figfile = "dib-orion-muse-1d-spectra.pdf"

  sky = Table.read("../data/skycalc/skytable.fits")

  # Heliocentric correction
  V_HEL = -16.217273731
  # Heliocentric velocity of molecular cloud
  V_OMC = +9.0 + 18.1

  region_order = [
      "SW minibar",
      "Orion S",
      "E-W Bar",
      "Trap W",
      "Trap SW",
      "Big Arc",
      "Bar",
      "Dark Bay",
  ]

  strong_lines = {
      5755.08: "[N II]",
      5875.62: "He I",
  }
  medium_lines = {
      # 5957.56: "Si II",
      # 5978.93: "Si II",
  }
  weak_lines = {
      # 5666.629: "N II", 
      # 5676.02: "N II", 
      # 5679.558: "N II", 
      # 5686.21: "N II", 
      # 5711.06: "N II",
      5739.73: "Si III",
      5747: "?",
      5820.09: "[Ni IV] ?",
      5867.99: "Ni II",
      5889.78: "C II ?",
      5905.4: "[Ni IV] ?",
      # 5927.82: "N II",  
      # 5931.78: "N II", 
      # 5941.65: "N II", 
      # 5952.39: "N II", 
      # 6000.2: "[Ni III]",
  }
  #sky_lines = [6235.5, 6287.5, 6306.5, 6329, 6465, 6471, 6478, 6498.15, 6507, 6603]
  absorption_lines = {
      5781: "σ DIB\n5781",
      5797: "ζ DIB\n5797",
      5801.35: "C IV\n5801",
      5812.0: "C IV\n5812",
      5896.1: "N III\n5896",
      # 5901.2: "",
      # 5918.5: "N III",
  }

  fig, ax = plt.subplots(figsize=(8, 5.5))

  #wavmin, wavmax = 5650, 6020
  wavmin, wavmax = 5731, 5919
  wavnorm = 5840
  offset = 0.35
  fc = 0.7
  for region in region_order:
      spec = data[region]
      waves = np.array(spec["wavelength"]) 
      # Put in OMC frame
      waves *= (1.0 - (V_OMC + V_HEL)/3e5)
      imin = np.sum(waves < wavmin)
      imax = np.sum(waves < wavmax)
      i0 = np.sum(waves < wavnorm)
      flux = np.array(spec["flux"])
      avcont = np.median(flux[i0-10:i0+10])
      total = flux / avcont
      waves = waves[imin:imax]
      total = total[imin:imax]
      # ax.fill_between(waves, cont + offset, total + offset, color=(fc, fc, fc))
      # ax.plot(waves, cont + offset, color="k", lw=0.5, zorder=-100)
      ax.plot(waves, total + offset, color="k", lw=0.7)
      ax.annotate(f"{np.round(np.abs(offset), 2):.2f} + {region}",
                  (wavmax, 1.0 + offset),
                  xytext=(5, 0), textcoords="offset points", ha="left", va="center")
      offset -= 0.05
      fc += 0.04

  sns.set_color_codes("dark")
  for wave, label in strong_lines.items():
      ax.axvline(wave, 0.33, 1.0, color="k", lw=2, zorder=-5)
      ax.text(wave, 0.9, label, ha="center", va="top", rotation="vertical")
  for wave, label in medium_lines.items():
      ax.axvline(wave, 0.25, 0.8, color="k", lw=1, zorder=-5)
      ax.text(wave, 0.82, label, ha="center", va="top", rotation="vertical", fontsize="xx-small")
  for wave, label in weak_lines.items():
      ax.axvline(wave, 0.35, 0.88, color="k", lw=0.5, zorder=-5)
      ax.text(wave, 1.45, label, ha="center", va="bottom", rotation="vertical", fontsize="small")
  for wave, label in absorption_lines.items():
      lw = 0.5 if "DIB" in label else 1.0
      miny = 0.28 
      ytext = 1.38 if "DIB" in label else 0.81
      if "5801" in label:
          dwav = -1.0
      elif "5812" in label:
          dwav = 1.0
      else:
          dwav = 0.0
      ax.axvline(wave, miny, 0.8, color="r", ls="--", lw=lw, zorder=-5)
      ax.text(wave + dwav, ytext, label, ha="center", rotation="horizontal", fontsize="small", color="r", fontweight="bold")

  # for wave in sky_lines:
  #     # Sky line wavelengths need correcting from topocentric to OMC farme
  #     wave *= (1.0 - (V_OMC + V_HEL)/3e5)
  #     ax.axvline(wave, 0.08, 0.82, color="g", lw=1, ls=":", zorder=-5)
  #     #ax.text(wave, 0.7, "sky", ha="center", rotation="vertical", fontsize="xx-small")


  # Add in sky transmission "trans_ma" and skyglow lines "flux_ael" from skycalc
  skywavs =  10*sky["lam"]*(1.0 - (V_OMC + V_HEL)/3e5)
  smask = (wavmin <= skywavs) & (skywavs <= wavmax) 

  if np.any(smask):
  #if False:
      # Only plot sky if we have the data
      skywavs = skywavs[smask]

      # pixels are 0.1 AA - convolve to give R = 2500 at 6500 AA
      fwhm_pix = 6500.0/(0.1*2500.0)
      gauss = Gaussian1DKernel(stddev=fwhm_pix/2.3)
      skytrans = convolve_fft(sky["trans_ma"].quantity, gauss)[smask]
      skyemis = convolve_fft(sky["flux_ael"].quantity, gauss)[smask]

      sns.set_color_codes("dark")

      offset = -0.35
      ax.plot(skywavs, (1.2*skytrans - 0.2) + offset, lw=0.8, color="r")
      ax.annotate(f"${np.round(offset, 2):.2f}$ + Telluric\n         absorption",
                  (wavmax, 1 + offset), color="r",
                  xytext=(5, 0), textcoords="offset points", ha="left", va="center")
      offset = 0.7
      ax.plot(skywavs, offset + 0.1*skyemis/skyemis.max(), lw=0.8, color="g") 
      ax.annotate(f"{np.round(np.abs(offset), 2):.2f} + Airglow",
                  (wavmax, offset), color="g",
                  xytext=(5, 0), textcoords="offset points", ha="left", va="center")

  ax.set(
      xlabel="STP Wavelength, Å (OMC frame)",
      ylabel="Relative Flux, $F_{\lambda} / F_{5840}$ + offset",
      # xlim=[wavmin, wavmax],
      ylim=[0.61, 1.55],
  )
  ax.minorticks_on()
  sns.despine(fig)
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:dib-orion-muse-1d-spectra.pdf]]
**** The [Ni IV] lines
+ We see lines at 5820.09 and 5905.4
+ Eduardo has a line at 5906.37 in HH229, which might be [Ni IV]
  + He has it as unidentified
+ Look at other datasets
  + [ ] Look in Manu spectra
  + [ ] Look in Keck spectra
  + [ ] Look in 30 Doradus
+ Look at diagnostic potential using pyneb
  + Should be density sensitive
+ Look for other lines
  + 5517.66
    + Swamped by the [Cl III] 5517.71 line, which is 100 times stronger
  + 5910.0
    + Marginally detected in wing of 5905.4
    + 3 to 4 times weaker than 5905.4
  + 6119.3
    + Absolutely no sign of this
  + 6124.1
    + There is a line at 6125 that is about 0.5 times 5905
    + Same upper level (J=3/2) as 5820.09
      + Ratio of A values is (2.00E-02 + 1.80E-03) / 3.50E-02 = 0.62
      + Roughly consistent with observed ratio, given that 5820 is a bit weaker than 5905
  + 6218.7
    + There is a line at 6221 at 0.3 times 5905
    + Same upper level (J=5/2) as 5905.4
      + Ratio of A values: (2.70E-03 + 2.00E-03) / (1.50E-02 + 5.30E-03) = 0.23
      + So that is again roughly consistent with the observed ratio
  + 6349.2
    + Swamped by Si II 6347.11, which is 100 times stronger
  + 6450.9
    + In the Raman blue wing (between B133 and B080)
    + Coincides with a possible absorption feature
+ Lines in other multiplets
  + 4628.26 (wav), so around 4626 air maybe is seen in wing of N II 4631
    + We should check in Adal spectra
    + But there is also a [Ni II] line at 4628.05
    + In fact, it is almost certainly [Ni II] because of the spatial variation in the Adal spectra
  + 5364.84 (wav), so around 5363 air
    + This is seen!
    + 
    + Stronger component from same upper level at 5042.97 (vac) but that is swamped by Si II 5041.03
    + 5622.05 (vac) from same upper level is not seen though
***** Full [Ni IV] multiplet info from Atomic Line List
#+begin_example
  Atomic Line List version: 2.05b21   Constructed: 2017-11-07 13:41 GMT
  Wavelength range: 0 - inf   Unit: Angstrom   Type: Air
  Radial velocity: 0 km/s
  Element/Spectrum: Ni IV

  -LAB-WAVL-ANG-AIR-|--SPC--|TT|-CONF--|TERM-|-J_i-J_k-|--A_ki--|-TPF-|----LVL-EN--K-----|-REF---|
     5517.66         [Ni IV] E2 3d7-3d7 4F-4P 9/2 - 5/2 6.80E-02   ASD    0.00 - 26068.60 ASD
     5820.09         [Ni IV] E2 3d7-3d7 4F-4P 7/2 - 3/2 3.50E-02   ASD 1711.70 - 26425.70 ASD
     5905.4          [Ni IV] E2 3d7-3d7 4F-4P 7/2 - 5/2 1.50E-02   ASD 1711.70 - 26068.60 ASD
     5905.4          [Ni IV] M1 3d7-3d7 4F-4P 7/2 - 5/2 5.30E-03   ASD 1711.70 - 26068.60 ASD
     5910.0          [Ni IV] E2 3d7-3d7 4F-4P 5/2 - 1/2 2.60E-02   ASD 2938.70 - 27276.90 ASD
     6119.3          [Ni IV] E2 3d7-3d7 4F-4P 3/2 - 1/2 3.30E-02   ASD 3771.20 - 27276.90 ASD
     6124.1          [Ni IV] E2 3d7-3d7 4F-4P 5/2 - 3/2 2.00E-02   ASD 2938.70 - 26425.70 ASD
     6124.1          [Ni IV] M1 3d7-3d7 4F-4P 5/2 - 3/2 1.80E-03   ASD 2938.70 - 26425.70 ASD
     6218.7          [Ni IV] E2 3d7-3d7 4F-4P 5/2 - 5/2 2.70E-03   ASD 2938.70 - 26068.60 ASD
     6218.7          [Ni IV] M1 3d7-3d7 4F-4P 5/2 - 5/2 2.00E-03   ASD 2938.70 - 26068.60 ASD
     6349.2          [Ni IV] E2 3d7-3d7 4F-4P 3/2 - 3/2 5.40E-03   ASD 3771.20 - 26425.70 ASD
     6349.2          [Ni IV] M1 3d7-3d7 4F-4P 3/2 - 3/2 3.30E-04   ASD 3771.20 - 26425.70 ASD
     6450.9          [Ni IV] M1 3d7-3d7 4F-4P 3/2 - 5/2 6.90E-04   ASD 3771.20 - 26068.60 ASD
     6450.9          [Ni IV] E2 3d7-3d7 4F-4P 3/2 - 5/2 2.50E-04   ASD 3771.20 - 26068.60 ASD

  gk*Aki weighted average wavelength:    5782.4         
#+end_example
**** Strange line at 5170 
+ Group of 5170 (strongest), 5186, 5235, 5317
+ Seen in proplyds 170-337 and 159-350
  + 170-337 also shows the Ca II 8495, 8538, 8658 lines
  + 159-350 does not show 5170 with any strength
    + But it does show 5317 strongly
+ These seem to be mainly [Fe II] lines, maybe with Ca I too
+ See Fig 1 of Hessman:1997a that shows a similar spectrum for DG Tau
  
*** Something about normalizing to Ha recombination line

** Return to this project - 2020 August

*** What remains to do on the paper?

**** TODO Abstract
+ [ ] Needs expanding
**** DONE Sec 2 - Spectral mapping of Raman wings
CLOSED: [2020-12-14 Mon 12:51]
+ Looks done
+ [X] Except for 2.5.3 - Other PDR tracers of the neutral and molecular Bar
**** DONE Sec 3 - Keck spectra
CLOSED: [2020-12-14 Mon 12:42]
+ [X] We have the spectrum, but it needs a better description
**** TODO [0/5] Discussion
+ [ ] Very fragmentary - needs some bits cutting and writing the rest
+ [ ] Alternative explanations for the absorption lines
  + [ ] Add a figure that compares the EW of the 6634 line with the extinction map, to show that they are unrelated.
  + [ ] Now planning lots of maps of absorption lines, see 
+ [ ] Talk about the Cloudy models
+ [ ] Remove discussion of Bar models and H I line
  + Keep this for another paper
  + [ ] Remove mention of talk about the inhomogeneities in the Bar since this is going to go in the next paper
+ [-] Could add discussion of other H II regions, such as Carina and Tarantula
**** TODO Conclusions
**** DONE Acknowledgements
CLOSED: [2020-12-14 Mon 13:39]
+ Whole lot of software needs to be cited.  See turtle.
**** TODO [1/2] Data availability
+ [X] Publicly available data
  + MUSE spectra
  + Keck spectra
  + Many other observatories and instruments, as referenced in the main text.
+ [-] Data analysis and modelling
  + [X] All described in github repo
  + [ ] But we need to rename the repo 

**** DONE Appendix A - Raman scattering theory
CLOSED: [2020-08-09 Sun 00:44]
+ Looks done

**** TODO Appendix B - 21 cm line
+ Nearly done - needs a figure and that's it
+ Or, alternatively we could move it to another paper.

** Things still to do for paper
1. [ ] Finish theory of radiative transfer
   - Calculate expected brightness
   - Why is it so much higher in Orion S
   - Also, compare O^0 absorption with H^0 Raman absorption 
2. [X] Analysis of absorption line profile
   - How much can be done from MUSE data
   - Sort out the Keck lines
     - Find best spectra and co-add them
     - Determine width, shift, etc
3. [X] Use tetrablok algorithm on images
   - Make some nice figures
4. [ ] Make a figure of the O I fluorescence transitions (and maybe one showing Raman scattering too)
5. [ ] Extract a small region around 244-440
   - At full resolution on linux server
   - Do an analysis of this proplyd
   - Again, maybe for another paper where we can include the Keck spectra
6. [X] Make image of different extinction measurements
   - Scattered in green
   - Optically thick in red
   - Put screenshot in [[https://www.evernote.com/l/ACRuDljr2ktEsohBH1p0pHiM81GSFWLeIso][Evernote]]  
   - Or maybe punt to another paper
7. [ ] Remove continuum from [C I] line
8. [X] Look at Bally STIS spectra
   - See [[id:2E94DD95-D60A-4C3E-A5C8-5356F63901B9][Bally GO8324 - mainly UV but also optical of LV knots and HST10]]
   - Should have Ha spectra that include the wings
   - Maybe 50 km/s velocity resolution
   - No, these are none of them any good

** Relation to Raman-scattered wings of H\alpha
+ See Dopita:2016a
  + These are pumped by continuum or O I 1025.76, which is very close to Ly \beta 1025.72
    + Wavelength in H\alpha frame: 6562.79 + (1025.76 - 1025.72) 40.96 = 6564.4284
    + Redshifted by 3e5 (6564.4284 - 6562.79)/6562.79 = 75 km/s
  + Also, secondary component pumped by Si II 1023.70, which gives a peak at 6480.1
    + Test my understanding of scale factor
    + (1023.70 - 1025.72) 40.96 = -82.7392
    + 6562.79 - 82.7392 = 6480.05 QED
+ *This gives another possibility for the 6634 origin*
  + Could be a stellar absorption line just redward of Ly \beta
  + Raman scattering causes wavelength differences \Delta\lambda/\lambda from Ly \beta center (1025.72 \AA) to be mapped to differences 6.4 \Delta\lambda/\lambda from H\alpha line center
    - This is (1 - 1/9) / (1/4 - 1/9) = 6.4
    - This is factor for velocity shifts (\propto \Delta\lambda/\lambda), so for \Delta\lambda itself, the factor is squared: 40.96
    - So 6634 - 6563 = 70 \AA, so 70/40.96 = 1.709 \AA at Ly \beta => 1027.43 \AA (vacuum)
    - *I have solved the mystery!!!*
      - It is the 1027.43051 and 1027.43125 components of the O I resonance line
        - These are transitions from the J=1 level, which is 0.019622 eV above the ground (J=2) level, but it should be populated according to statistical weight so long as T > 0.019622 eV/k = 228 K
        - There is also a 1028.15710 component from the J=0 level, which should give a line at 6562.79 + (1028.15710 - 1025.72) 40.96 = 6662.613616
        - /Which is what I thought was Si III 6662.90 !!!/
        - Velocities in Ly\beta domain are +500 and +712 km/s 
          - And the J_1=2 triplet is [+12.2, +12.4, +12.7] km/s
          - Or around +80 km/s
        - All lines of multiplet
          #+begin_example
            -LAB-WAVL-ANG-VAC-|-DLAM--|SPC-|TT|----------CONFIGURATION----------|-TERM--|J_i-J_k|--A_ki--|-TPF-|--LEVEL-ENERGY--EV--|-REF---|
               1025.76161      9.4E-05  O I E1          2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  2 - 3  7.40E+07    15 0.000000 - 12.087037 ASD
               1025.76256      9.4E-05  O I E1          2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  2 - 2  1.84E+07    15 0.000000 - 12.087026 ASD
               1025.76330      9.4E-05  O I E1          2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  2 - 1  2.05E+06    15 0.000000 - 12.087017 ASD
               1027.43051      9.4E-05  O I E1          2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  1 - 2  5.52E+07    15 0.019622 - 12.087026 ASD
               1027.43125      9.4E-05  O I E1          2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  1 - 1  3.06E+07    15 0.019622 - 12.087017 ASD
               1028.15710      9.4E-05  O I E1          2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  0 - 1  4.08E+07    15 0.028142 - 12.087017 ASD
          #+end_example
      - What is the observed width of the O I lines, and what do they correspond to in the FUV domain?
        - FWHM is about 4.5 pix or 3.8 \AA, as opposed to 3 pix = 2.5 \AA for the emission lines
          - FWZI is 9.5 as opposed to 6 pixels
        - This is 174 km/s as opposed to 114 km/s, so this gives a instrument-corrected width of 130 km/s \to 20 km/s in FUV
        - This is very broad and can't be thermal or even non-thermal kinematic
        - Must be due to line-center \tau \gg 1, so could use a curve of growth on the EW
        - Also, this means that residual emission at line center is giving us the line-center source function!
  + Possible lines in blue wing:
    + /I don't actually believe any of these/
      + More plausible that they are gaps between emission lines
    + 6494.75 \to 1025.72 + (6494.75 - 6562.79)/40.96 = 1024.06
      + There is S I at 1023.91, which should give 6562.79 + (1023.91 - 1025.72) 40.96 = 6488.65
        + But that is not close enough
      + Si II at 1020.6989 and 1023.7001
        + 6357.13, 6480.05
        + The 6480.05 line /might/ be detected, but the absorption looks to be centered on 6481.15, which would be 0.01 \AA redder in FUV, whereas claimed wavelength accuracy is 0.0007 \AA
      + Fe II] intercombination line at 1024.14514 (no A-value given) \to 6498.3 \AA
        + Does correspond to a weak but consistent dip
        + Although we can't rule out weak optical emission lines
    + If the dips are just gaps between emission lines, then the lines are
      + 6533 - [Ni III] 6533.76 
      + 6527.9 - [N II] 6527.24
      + 6521.1 weak/broad
      + 6516 very weak
      + 6510.9 mainly ionized (maybe O II)
      + 6505.8 also mainly ionized
      + 6501.55 (maybe O II)
      + 6498.15 SKY definitely - this is what makes it look like 
      + 6470.1 SKY
      + 6465 SKY - not to be confused with strong 6462 C II
  + One more in the red wing
    + 6708.5 \to 1025.72 + (6708.5 - 6562.79)/40.96 = 1029.28 \AA
    + Strong in Orion S on side near Trapezium
    + Weak in Bar region
    + Could be Cl I 1029.34325
    + But this should also give 1028.17391 \to 6663.3 \AA, which is almost on top of the red component of the O I multiplet so would be hidden
    + Variation with position might be due to Cl II being dominant in Bar (density effect on Cl^+/Cl^0 ratio)
  + The near wings - are they real?
    + I am not sure
    + There is a flat bit in the spectrum from 6569 \to 6574
      + \Delta\lambda = +6 \to +11 \AA or V = +275 \to +500 km/s
    + And again from 6554 \to 6557
      + \Delta\lambda = -9 \to -6 or V = -275 \to -410 km/s
    + There seems to be a slight change with position, at the Bar at least
      + Smaller \Delta\lambda comes from more ionized regions
      + This is what we expect because the larger cross section closer to line center implies \tau = 1 comes from a smaller column
      + \Delta\lambda = 10 \AA @ H\alpha means 
  + There is O VI doublet at 1037.62, 1031.93 but this is a very strong P Cygni profile that absorbs everything up to and past the Ly \beta line
    + See Fig 23 of Leitherer:2010a, which shows population synthesis spectra
    + There is a lot of H_2 (and C II, O I) absorption between 1035 \to 1040, which makes this hard to see on the observed FUSE spectra, see Fig 20 of Pellerin:2002a
    + Inside the nebula, things will be very different since some of these lines could be in emission instead of absorption
      + [ ] *run Cloudy model* to see if we can get predicted spectrum in PDR
        - See what we have got from the [[file:~/Dropbox/cloudy-dust-charging/cloudy-dust-charging.org][cloudy-dust-charging]] project
    + This is mentioned in Luridiana:2009a
    + But note that the difference between O VI and Ly\beta is 1031.93 - 1025.72 = 6.21 \AA, which corresponds to 1800 km/s, whereas velocity of thC wind is only 1200 km/s
      + So it doesn't get all the way to H\beta - the blue edge will be at 1031.93 (1 - 1200/3e5) = 1027.8 \AA
      + In the H\alpha domain this is 6562.79 + (1027.8 - 1025.72) 40.96 = 6648 \AA
      + Check using more accurate equation
        + \lambda_2 = 1/(1/6564.533 + 1/1027.8 - 1/1025.72) = 6650.67 vacuum, or 6649 air
        + \Delta \lambda_2 = 6650.67 - 6564.533 = 86.14 \AA, smack in the middle of the R087 band
      + So it is somewhat strange to see no evidence for this in the Raman spectrum
      + Rest wavelength of O VI absorption: 1037.62, 1031.93
        + \lambda_2 = 1/(1/6564.533 + 1/1037.62 - 1/1025.72) = 7084.41
        +  \lambda_2 = 1/(1/6564.533 + 1/1031.93 - 1/1025.72) = 6827.57
+ Look at variation of the raman wings, and correlations with 6634 absorption
+ Given that Dopita has narrower line than us, it might absorb more than just the Raman pseudo-continuum


** Telluric absorption and sky emission
+ According to Weilbacher:2015a
  + The average atmospheric extinction curve was applied (Patat:2011a)
  + But no attempt was made to remove the sky background or telluric absorption
  + They mention two tools for calculating telluric absorption
    + SKYCORR - Noll:2014a but that is mainly sky emission lines
    + MOLECFIT - Yes, this does the absorption.
  + More details at http://www.eso.org/sci/software/pipelines/skytools/
+ Looks like best bet is the SkyCalc online tool
  + I put in the coordinates and time (2014-02-16)
  + And made a FITS file in air wavelengths on a linear scale of 0.1 \AA for the transmission and the emission spectrum
  + Results are in [[file:~/Dropbox/dib-scatter-hii/data/skycalc/skytable.fits]]
    + See code snippet below
    + The important columns are
      + ~trans_ma~ molecular absorption
      + ~flux_ael~ airglow emission lines

#+begin_src python :results output verbatim
  from astropy.table import Table

  tab = Table.read("../data/skycalc/skytable.fits")

  print(tab)

  print(tab.columns)
#+end_src

#+RESULTS:
#+begin_example
 lam          flux        ...      trans_rs           trans_ms     
------ ------------------ ... ------------------ ------------------
 450.0  2583.921817879798 ...  0.831446120992378 0.9569159803247606
450.01  2585.223127493925 ... 0.8314601805229443 0.9569172726546972
450.02 2586.5243099001295 ... 0.8314742386703544 0.9569185649180324
450.03 2587.8253650815714 ... 0.8314882954347557  0.956919857114771
450.04 2589.1262930214157 ... 0.8315023508162951  0.956921149244918
450.05  2590.427093702826 ... 0.8315164048151203 0.9569224413084781
450.06 2591.7277671089696 ... 0.8315304574313785 0.9569237333054563
450.07 2593.0283132230006 ...  0.831544508665217 0.9569250252358574
450.08 2594.3287320280997 ... 0.8315585585167833 0.9569263170996862
450.09  2595.629023507423 ... 0.8315726069862245 0.9569276088969476
   ...                ... ...                ...                ...
 949.9  854.2417481499106 ... 0.9911623498820592  0.984416111907422
949.91  837.4836490922867 ... 0.9911627238954729 0.9844163365316104
949.92  748.5286429705792 ...   0.99116309788922 0.9844165611502222
949.93 497.34838083014597 ... 0.9911634718633018 0.9844167857632574
949.94  643.1637823155027 ... 0.9911638458177194 0.9844170103707165
949.95  726.2615012488163 ... 0.9911642197524744 0.9844172349725996
949.96  562.9837516877566 ... 0.9911645936675675 0.9844174595689069
949.97  251.6422067982511 ... 0.9911649675630004 0.9844176841596384
949.98   516.368294301081 ...  0.991165341438774 0.9844179087447945
949.99  727.1154231637446 ... 0.9911657152948898 0.9844181333243753
 950.0  772.4016890220621 ... 0.9911660891313488 0.9844183578983811
Length = 50001 rows
<TableColumns names=('lam','flux','dflux1','dflux2','trans','dtrans1','dtrans2','flux_sml','flux_ssl','flux_zl','flux_tie','flux_tme','flux_ael','flux_arc','trans_ma','trans_o3','trans_rs','trans_ms')>
#+end_example




*** Look at the spectrum from existing Cloudy models
#+name: make-cloudy-fuv-spectrum
#+header: :var PREFIX="dustrad-n00-MS40"
#+BEGIN_SRC python :return pltfile :results file
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns
  from astropy.table import Table
  from astropy import units as u
  from astropy.constants import k_B
  CLOUDYDIR = "/Users/will/Dropbox/cloudy-dust-charging"
  sys.path.append(CLOUDYDIR) 
  from cloudytab import CloudyModel

  pltfile = f'cloudy-fuv-spectrum-{PREFIX}.pdf'
  m = CloudyModel(f'{CLOUDYDIR}/models/{PREFIX}')

  fig, ax = plt.subplots()

  nu = m.data['cont']['Cont  nu']
  wav = 912.0/nu
  nuFnu_inc = m.data['cont']['incident'] / wav  # Col 2
  nuFnu_trans = m.data['cont']['trans'] / wav   # Col 3
  nuFnu_tot = m.data['cont']['total'] / wav     # Col 7
  vmax = nuFnu_inc.max()
  ax.plot(wav, nuFnu_inc)
  ax.plot(wav, nuFnu_tot, lw=0.6)
  ax.plot(wav, nuFnu_trans, lw=0.3)

  ax.set(
      xlim=[800.0, 1500.0],
      ylim=[0, 1.3*vmax],
      xlabel='Wavelength, Angstrom',
      ylabel=r'$F_{\lambda}$',
  )

  fig.savefig(pltfile)

#+END_SRC

#+RESULTS: make-sed
[[file:cloudy-fuv-spectrum-dustrad-n00-MS40.pdf]]

**** Conclusions based on Cloudy model spectra
+ The ~dustrad~ models all stop at 4000 K, so just on neutral side of i-front
+ There are a variety of column densities, depending on the ionization parameter (proportional to (Q n)^{1/3})
+ Lines are not properly resolved in the output - look like triangles
+ Ly\alpha is seen in emission in the ~total~ spectrum, which is transmitted plus reflected
+ Ly\beta is in absorption in all spectra
  + Absorption depth seems slightly less in transmitted and total spectra
  + 1025.72 \AA = 0.889 Ryd
  + The reddest O I component is at 1028.16 = 0.887 Ryd
  + The Cloudy continuum mesh points are at [..., 0.8850, 0.8880, 0.8909, ...]
    + [..., 1024, 1027, 1030, ...] in \AA
  + This corresponds to resolving power R = 1025/(2 3) = 171 so clearly insufficient to see details in spectrum
  + We need to use the ~Save fine continuum [range, merge]~ command to see it better
    + Fine continuum has R = 1.737e+05, or 1.7 km/s, which would be 10.9 km/s at H\alpha, which is plenty fine enough
+ Continuum across Ly\beta rises to red, but only 10% in 50\AA
+ Stellar emission line at about 1045 \AA = 0.87 Ryd
+ Important caveat from Hazy
  : In general the treatment of scattering is very geometry dependent. The output produced by the save continuum commands does not include the pumped part of the line contribution. This is correct if the continuum source is included in the beam, but is not if only the gas is observed.
  + This is because absorption and emission cancel out when integrated over the line profile
  + So I think it is OK in our case, since the spectrum as seen by the neutral gas /does/ include the transmitted stellar continuum
+ 


**** DONE [#A] Run more cloudy models
CLOSED: [2019-10-19 Sat 10:30]
+ Save fine continuum (see above)
+ Stop at various depths
+ Dig out atmosphere models for Trapezium
+ [2019-09-26 Thu] I am now doing this here: [[id:AFF44F5A-6868-4ACF-9018-D6B055BECD2F][Run cloudy models with this new SED]]
**** Further spectra for different models
#+call: make-cloudy-fuv-spectrum("dustrad-n02-MS40")

#+RESULTS:
[[file:cloudy-fuv-spectrum-dustrad-n02-MS40.pdf]]

#+call: make-cloudy-fuv-spectrum("dustrad-n03-MS40")

#+RESULTS:
[[file:cloudy-fuv-spectrum-dustrad-n03-MS40.pdf]]

#+call: make-cloudy-fuv-spectrum("dustrad-n04-MS40")

#+RESULTS:
[[file:cloudy-fuv-spectrum-dustrad-n04-MS40.pdf]]


#+call: make-cloudy-fuv-spectrum("dustrad-n02-MS20")

#+RESULTS:
[[file:cloudy-fuv-spectrum-dustrad-n02-MS20.pdf]]

#+call: make-cloudy-fuv-spectrum("dustrad-n04-MS20")

#+RESULTS:
[[file:cloudy-fuv-spectrum-dustrad-n04-MS20.pdf]]

#+call: make-cloudy-fuv-spectrum("dustrad-n02-MS10")

#+RESULTS:
[[file:cloudy-fuv-spectrum-dustrad-n02-MS10.pdf]]

#+call: make-cloudy-fuv-spectrum("dustrad-n04-MS10")

#+RESULTS:
[[file:cloudy-fuv-spectrum-dustrad-n04-MS10.pdf]]

#+call: make-cloudy-fuv-spectrum("dustrad-n04-BSG")

#+RESULTS:
[[file:cloudy-fuv-spectrum-dustrad-n04-BSG.pdf]]

#+call: make-cloudy-fuv-spectrum("shell-R001-n27-LP_Ori20Bz5")

#+RESULTS:
[[file:cloudy-fuv-spectrum-shell-R001-n27-LP_Ori20Bz5.pdf]]

#+call: make-cloudy-fuv-spectrum("shell-R003-n47-th1D-L25-triple-AV5")

#+RESULTS:
[[file:cloudy-fuv-spectrum-shell-R003-n47-th1D-L25-triple-AV5.pdf]]


*** Correlation between 6634 and Raman wings for Orion
+ Choose suitable ranges - use the 8x8 binned cube
+ Regions free of any strong lines:
  + 6410 \to 6450 \AA = 31 \to 78 pix
  + 6760 \to 6810 \AA = 442 \to 502 pix (some C II lines but super weak)
  + [ ] Maybe we could divide each continuum range in two to give 4 sections, and take median of each
    + This would be insensitive to absorption or emission lines as long as there are not too many of them
    + Then fit quadratic through the 4 points
+ Regions for Red Raman wing
  + 6600 \to 6629 \AA = 253 \to 289 pix (width 37)
  + 6638 \to 6656 \AA = 290 \to 320 pix (width 29)
  + First attempt, just sum these
  + [ ] Fit a quadratic through these
+ Region for the 6634 \AA absorption line
  + 6631 \to 6638 \AA = 290 \to 298 pix (width 9)
+ Blue Raman wing
  + Weak OH Sky lines
    + 6499
    + 6505
  + Real nebular lines
    + [N II] 6527
    + [Ni III] 6534


**** Lines found in the wavsec3 cube
+ [Ni III] 6401.5
  + HH 202 and 203 strong on blue flank
  + Maybe a Ne I 6402.25 blend, but it doesn't really look like it
+ Perhaps something like [Fe II] at 6401, but exceedingly weak
+ High ionization line at 6457 - very weak
+ [C II] 6461.95 - nice and strong
  + Shows the inner shell nicely on the red flank
+ [N II] 6527
+ [Ni III] 6533
**** DONE Concatenate wavsec 2 and wavsec 3
CLOSED: [2019-09-04 Wed 12:24]
+ [2019-09-01 Sun] It turns out that the region I had used for continuum was not good
  + On the blue side of the line, the 6400 to 6450 range is still in the Raman wings according to the Dopita spectrum
+ So we need to go out to the 6050 to 6150 range to get a good continuum
  + And this is in wavsec 4
+ I can just use the WCS from wavsec 2

#+begin_src python :tangle ../src/concat-wavsecs.py
  import sys
  import numpy as np
  from astropy.io import fits

  try:
      DATADIR = sys.argv[1]
      SUFFIX = sys.argv[2]
      OUTDIR = sys.argv[3]
  except IndexError:
      sys.exit(f"Usage: {sys.argv[0]} DATADIR SUFFIX OUTDIR")


  hdu2 = fits.open(f"{DATADIR}/muse-hr-data-wavsec2{SUFFIX}.fits")["DATA"]
  hdu3 = fits.open(f"{DATADIR}/muse-hr-data-wavsec3{SUFFIX}.fits")["DATA"]

  hdu2.data = np.concatenate([hdu2.data, hdu3.data], axis=0)

  hdu2.writeto(f"{OUTDIR}/muse-hr-data-wavsec23{SUFFIX}.fits")


#+end_src

#+name: concat-wavsecs
#+header: :var DATADIR="/Users/will/Dropbox/OrionMuse/BigFiles"
#+header: :var SUFFIX="-rebin16x16"
#+header: :var OUTDIR="../data/orion-muse"
#+begin_src sh
python ../src/concat-wavsecs.py $DATADIR $SUFFIX $OUTDIR
#+end_src

#+RESULTS: concat-wavsecs
***** DONE Now we need to do this on the server for the full res cubes
CLOSED: [2019-09-04 Wed 12:24]

**** Remove continuum from cube
:PROPERTIES:
:ID:       90BA9F0F-DEF4-47FB-AE68-722524E169F1
:END:
+ [2019-09-01 Sun] This is revisited to use a broader range - see above
+ Also, write scripts to python files and use shell commands to run them
+ Take opportunity to use wavelengths instead of array indices

#+begin_src python :tangle ../src/subtract-continuum.py :eval no
  import sys
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  from numpy.polynomial import Chebyshev as T
  import itertools

  try:
      DATADIR = sys.argv[1]
      SUFFIX = sys.argv[2]
      OUTDIR = sys.argv[3]
  except IndexError:
      sys.exit(f"Usage: {sys.argv[0]} DATADIR SUFFIX OUTDIR")

  infile = f"muse-hr-data-wavsec23{SUFFIX}.fits"
  hdu = fits.open(f"{DATADIR}/{infile}")["DATA"]
  w = WCS(hdu)
  nwav, ny, nx = hdu.data.shape
  wavpix = np.arange(nwav)

  # Two pairs of adjacent sections for the true continuum

  # Wavelength sections of clean continuum
  clean_sections = [
      [6070.0, 6140.0], [6170.0, 6225.0], # to the blue
      [6760.0, 6790.0], [6790.0, 6820.0], # to the red
  ]

  cont_slices = []
  for wavs in clean_sections:
      wavs = 1e-10*np.array(wavs)
      _, _, wpix = w.world_to_pixel_values([0, 0], [0, 0], wavs)
      cont_slices.append(slice(*wpix.astype(int)))


  # Use median over each section to avoid weak lines
  cont_maps = np.array([np.median(hdu.data[_, :, :], axis=0) for _ in cont_slices])
  cont_wavpix = np.array([np.median(wavpix[_], axis=0) for _ in cont_slices])
  # Inefficient but simple algorithm - loop over spaxels
  bgdata = np.empty_like(hdu.data)
  for j, i in itertools.product(range(ny), range(nx)):
      # Fit polynomial to BG
      try:
          p = T.fit(cont_wavpix, cont_maps[:, j, i], deg=2)
          # and fill in the BG spectrum of this spaxel
          bgdata[:, j, i] = p(wavpix)
      except:
          bgdata[:, j, i] = np.nan



  for suffix, cube in [
          ["cont", bgdata],
          ["cont-sub", hdu.data - bgdata],
          ["cont-div", hdu.data/bgdata],
  ]:
      outfile = infile.replace(".fits", f"-{suffix}.fits")
      fits.PrimaryHDU(header=hdu.header, data=cube).writeto(
          f"{OUTDIR}/{outfile}", overwrite=True)
      print(f"Written {outfile}")
#+end_src

#+name: subtract-cont
#+header: :var DATADIR="../data/orion-muse"
#+header: :var SUFFIX="-rebin16x16"
#+header: :var OUTDIR="../data/orion-muse"
#+begin_src sh :results verbatim
python ../src/subtract-continuum.py $DATADIR $SUFFIX $OUTDIR
#+end_src

#+RESULTS: subtract-cont
: Written muse-hr-data-wavsec23-rebin16x16-cont.fits
: Written muse-hr-data-wavsec23-rebin16x16-cont-sub.fits
: Written muse-hr-data-wavsec23-rebin16x16-cont-div.fits

Now do same for 5x5 cube

#+call: subtract-cont(DATADIR="/Users/will/Dropbox/OrionMuse", INFILE="muse-hr-data-wavsec3-rebin05x05.fits")

#+RESULTS:
: None

And for the unbinned cube, which we are keeping out of Dropbox

#+call: subtract-cont(DATADIR="/Users/will/Work/Muse-Hii-Data/M42", INFILE="muse-hr-data-wavsec3.fits", OUTDIR="/Users/will/Work/Muse-Hii-Data/M42")

#+RESULTS:
: None

That was a mistake to run in emacs - took 90 minutes!
**** Send scripts to linux server and run them there
#+begin_src sh :results verbatim
rsync -avzP ../src/*.py nil:/fs/nil/other0/will/orion-muse
#+end_src

#+RESULTS:
: sending incremental file list
: extract-ci-8727.py
:             519 100%    0.00kB/s    0:00:00              519 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=4/7)
: 
: sent 581 bytes  received 40 bytes  177.43 bytes/sec
: total size is 8,542  speedup is 13.76

Had to install python 3.7 since old one was on 3.3!

#+begin_src sh :eval no
time python concat-wavsecs.py . "" .
#+end_src

This took 90 sec

#+begin_src sh :eval no
time python subtract-continuum.py . "" .
#+end_src

That took 25 min. And I had to trap exceptions in the polynomial fit. 

Now to do the band maps. Still do it on the server, since I don't want a 22GB file here. 

#+begin_src sh :eval no
time python extract-raman-bands.py . "" .
#+end_src

Copy files back here:
#+begin_src sh :dir ../data/orion-muse :results verbatim
rsync -avzP nil:/fs/nil/other0/will/orion-muse/muse-hr-data-ha-raman-*.fits .
#+end_src

#+RESULTS:
: receiving incremental file list
: 
: sent 11 bytes  received 361 bytes  148.80 bytes/sec
: total size is 125,176,320  speedup is 336,495.48

[2019-09-04 Wed] Do the [C I] line stuff on the full resolution cube. 

#+begin_src sh :eval no
time python subtract-continuum.py-8700.py . "" .
#+end_src

#+begin_src sh :eval no
time python extract-ci-8727.py . "" .
#+end_src

#+begin_src sh :dir ../data/orion-muse :results verbatim
rsync -avzP nil:/fs/nil/other0/will/orion-muse/linesum-blue-C_I-8727*.fits .
#+end_src

#+RESULTS:
: receiving incremental file list
: linesum-blue-C_I-8727.fits
:               0   0%    0.00kB/s    0:00:00       10,434,240 100%  207.31MB/s    0:00:00 (xfr#1, to-chk=0/1)
: 
: sent 19,452 bytes  received 884 bytes  5,810.29 bytes/sec
: total size is 10,434,240  speedup is 513.09


**** Remove continuum from wavsec6 for the [C I] 8727.13 line
+ Minima in spectra where we can estimate the continuum
  + 606, 8689.45
  + 618, 8699.65
  + 646, 8723.45
  + 670, 8743.85
  + FITS pixel convention, so subtract 1 for python
+ Take the average of these 4, since not much to be gained from a linear fit
#+begin_src python :tangle ../src/subtract-continuum-8700.py :eval no
  import sys
  import numpy as np
  from astropy.io import fits

  try:
      DATADIR = sys.argv[1]
      SUFFIX = sys.argv[2]
      OUTDIR = sys.argv[3]
  except IndexError:
      sys.exit(f"Usage: {sys.argv[0]} DATADIR SUFFIX OUTDIR")

  infile = f"muse-hr-data-wavsec6{SUFFIX}.fits"
  hdu = fits.open(f"{DATADIR}/{infile}")["DATA"]

  # wave indices for estimating continuum
  kcont = [605, 617, 645, 669]

  cont = np.nanmean(hdu.data[kcont, :, :], axis=0, keepdims=True)
  hdu.data -= cont

  outfile = infile.replace(".fits", "-cont-sub.fits")
  hdu.writeto(f"{OUTDIR}/{outfile}", overwrite=True)

  print(f"Written {outfile}")
#+end_src

#+name: subtract-cont-8700
#+header: :var DATADIR="../../OrionMuse/Bigfiles"
#+header: :var SUFFIX="-rebin16x16"
#+header: :var OUTDIR="../data/orion-muse"
#+begin_src sh :results verbatim
python ../src/subtract-continuum-8700.py $DATADIR $SUFFIX $OUTDIR
#+end_src

#+RESULTS: subtract-cont-8700
: Written muse-hr-data-wavsec6-rebin16x16-cont-sub.fits

#+call: subtract-cont-8700(DATADIR="../../OrionMuse", SUFFIX="-rebin05x05")

#+RESULTS:
: Written muse-hr-data-wavsec6-rebin05x05-cont-sub.fits

Extract the blue half of the [C I] 8727.13 line.  The red half is contaminated by [Fe III] 8728.90 and N I 8728.90.  Eduardo has them at about 20% of the [C I] intensity. Use pixels 649, 650, 651, 652 (8726.0 \to 8728.55 \AA) since in 653 you start to see N I and [Fe III]

#+begin_src python :tangle ../src/extract-ci-8727.py :eval no
  import sys
  import numpy as np
  from astropy.io import fits

  try:
      DATADIR = sys.argv[1]
      SUFFIX = sys.argv[2]
      OUTDIR = sys.argv[3]
  except IndexError:
      sys.exit(f"Usage: {sys.argv[0]} DATADIR SUFFIX OUTDIR")

  infile = f"muse-hr-data-wavsec6{SUFFIX}-cont-sub.fits"
  hdu = fits.open(f"{DATADIR}/{infile}")["DATA"]

  line = np.nanmean(hdu.data[648:652, :, :], axis=0)
  hdu.data = line

  outfile = f"linesum-blue-C_I-8727{SUFFIX}.fits"
  hdu.writeto(f"{OUTDIR}/{outfile}", overwrite=True)

  print(f"Written {outfile}")
#+end_src

#+name: extract-ci-8727
#+header: :var DATADIR="../data/orion-muse"
#+header: :var SUFFIX="-rebin05x05"
#+header: :var OUTDIR="../data/orion-muse"
#+begin_src sh :results verbatim
python ../src/extract-ci-8727.py $DATADIR $SUFFIX $OUTDIR
#+end_src

#+RESULTS: extract-ci-8727
: Written linesum-blue-C_I-8727-rebin05x05.fits


**** Plot the spectrum of different regions
:PROPERTIES:
:ID:       000D3CF5-4C2F-429C-A2CE-013C1AA0D40D
:END:
+ When did we last use astropy.regions?
  + Turns out to be for sigma Ori
  + Need to use ~mask = skyregion.to_pixel(WCS).to_mask().to_image(SHAPE)~
+ Use the 5x5 image to make it faster
+ Save the cont-subtracted and cont spectra to a json file
  
#+name: extract-1d-spectra
#+header: :var WAVSEC="wavsec23"
#+begin_src python :return jsonfile :results file
  import json
  import numpy as np
  import astropy.coordinates as coord
  from astropy.wcs import WCS
  from astropy.io import fits
  import regions as rg

  regions = rg.read_ds9("../data/raman-extract-boxes.reg")
  regions += rg.read_ds9("../data/raman-faint2-boxes.reg")

  hdu = fits.open(f"../data/orion-muse/muse-hr-data-{WAVSEC}-rebin16x16-cont-sub.fits")["DATA"]
  chdu = fits.open(f"../data/orion-muse/muse-hr-data-{WAVSEC}-rebin16x16-cont.fits")["DATA"]

  spec = {}
  nz, ny, nx = hdu.data.shape
  w = WCS(hdu.header)
  _, _, waves = w.pixel_to_world_values([0], [0], np.arange(nz))
  for region in regions:
      mask = region.to_pixel(w.celestial).to_mask().to_image((ny, nx))
      label = region.meta["label"]
      spec[label] = {
          "wavelength": (1e10*waves).tolist(),
          "raman": np.sum(hdu.data*mask[None, :, :], axis=(1, 2)).tolist(),
          "continuum": np.sum(chdu.data*mask[None, :, :], axis=(1, 2)).tolist(),
          }

  jsonfile = f"raman-orion-muse-1d-spectra-{WAVSEC}.json"

  with open(jsonfile, "w") as f:
      json.dump(spec, f, indent=3)
#+end_src

#+RESULTS: extract-1d-spectra
[[file:raman-orion-muse-1d-spectra-wavsec23.json]]

#+call: extract-1d-spectra(WAVSEC="wavsec3")

#+RESULTS:
[[file:raman-orion-muse-1d-spectra-wavsec3.json]]


#+begin_src python :return figfile :results file
  import numpy as np
  import json
  from matplotlib import pyplot as plt
  import seaborn as sns
  from astropy.table import Table
  from astropy.convolution import Gaussian1DKernel, convolve_fft

  jsonfile = "raman-orion-muse-1d-spectra-wavsec23.json"
  data = json.load(open(jsonfile))
  figfile = jsonfile.replace(".json", ".pdf")

  sky = Table.read("../data/skycalc/skytable.fits")

  # Heliocentric correction
  V_HEL = -16.217273731
  # Heliocentric velocity of molecular cloud
  V_OMC = +9.0 + 19.1

  region_order = [
      "SW minibar",
      "Orion S",
      "E-W Bar",
      "Trap W",
      "Trap SW",
      "Big Arc",
      "Bar",
      "Dark Bay",
  ]

  bands = {
      "B133": [6414.85, 6445.45],
      "B080": [6469.25, 6496.45],
      "B054": [6499.85, 6517.7],
      "B033": [6518.55, 6540.65],
      "R040": [6594.2, 6611.2],
      "R058": [6612.05, 6628.2],
      "R087": [6638.4, 6660.5],
      "R136": [6688.55, 6708.95],
  }

  strong_lines = {
      6562.79: r"H$\alpha$",
      6548.05: "[N II]",
      6583.45: "[N II]",
  }
  medium_lines = {
      6300.30: "[O I]",
      6312.06: "[S III]",
      6347.11: "Si II",
      6363.78: "[O I]",
      6371.36: "Si II",
      6578.05: "C II",
      6678.15: "He I",
      6716.44: "[S II]",
      6730.816: "[S II]",
  }
  weak_lines = {
      6257.18: "C II",
      6259.56: " ", # no label to avoid overlap
      6334.35: "N II",
      6382.8: "N II",
      6401.5: "[Ni III]",
      6501.4: "O II",
      6510.9: "O II",
      6461.95: "C II",
      6527.24: "[N II]",
      6533.8: "[Ni III]",
      # 6544.3: "?",
      6641: "[Cr IV]",
      6666.80: "[Ni II]",
      6699.39: "He I",
      6721.39: "O II",
      6755.02: "He I",
      6769.59: "N I",
      6785.81: "O II",
      6791.48: "[Ni II]",
      6809.23: "N II",
      6813.57: "[Ni II]",
  }
  label_shifts = {
      6527.24: -3,
      6785.81: -2,
      6791.48: +2,
      6809.23: -3,
      6813.57: +3,
      6371.36: +2,
      6449.0: -2,
      6494.0: +2,
  }
  sky_lines = [6235.5, 6287.5, 6306.5, 6329, 6465, 6471, 6478, 6498.15, 6507, 6603]
  absorption_lines = {
      6633.347: "O I",
      6663.747: "O I",
      6362.3446: "Si II",
      6480.8110: "Si II",
      6494.0: "DIB?",
      6708.0: "?",
      6438.5: " ",
      6449.0: "DIBs?",
      6284.0: "DIB",
      6614.0: "DIB",
  }

  fig, ax = plt.subplots(figsize=(10, 6))

  wavmin, wavmax = 6200, 6820
  offset = 0.7
  fc = 0.7
  for region in region_order:
      if not region in data:
         continue
      spec = data[region]
      waves = np.array(spec["wavelength"]) 
      # Put in OMC frame
      waves *= (1.0 - (V_OMC + V_HEL)/3e5)
      imin = np.sum(waves < wavmin)
      imax = np.sum(waves < wavmax)
      cont = np.array(spec["continuum"])
      total = cont + np.array(spec["raman"])
      waves = waves[imin:imax]
      cont = cont[imin:imax]
      total = total[imin:imax]
      norm = cont[0]
      cont /= norm
      total /= norm
      ax.fill_between(waves, cont + offset, total + offset, color=(fc, fc, fc))
      ax.plot(waves, cont + offset, color="k", lw=0.5, zorder=-100)
      ax.plot(waves, total + offset, color="k", lw=0.7)
      ax.annotate(f"{np.round(np.abs(offset), 2):.2f} + {region}",
                  (wavmax, cont[-1] + offset),
                  xytext=(5, 0), textcoords="offset points", ha="left", va="center")
      offset -= 0.1
      fc += 0.04

  # bandcolors = iter(sns.color_palette("coolwarm", len(bands)))
  # bandcolors = iter(sns.diverging_palette(220, 20, sep=1, n=len(bands), center="dark"))
  alphas = iter([0.2, 0.4, 0.4, 0.6, 0.6, 0.4, 0.4, 0.2])
  bandcolors = iter(["c", "c", "b", "b", "m", "m", "r", "r"])
  for i, [band, [wav1, wav2]] in enumerate(bands.items()):
      ypos = 2.18 if i % 2 == 0 else 2.22
      ax.axvspan(wav1, wav2, 0.2, 0.95, facecolor=next(bandcolors), alpha=next(alphas), zorder=-10)
      ax.text((wav1 + wav2)/2, ypos, band, ha="center", fontsize="small")

  sns.set_color_codes("dark")
  for wave, label in strong_lines.items():
      ax.axvline(wave, 0.22, 0.8, color="k", lw=2, zorder=-5)
      ax.text(wave, 0.74, label, ha="center", va="top", rotation="vertical", fontsize="small")
  for wave, label in medium_lines.items():
      ax.axvline(wave, 0.28, 0.8, color="k", lw=1, zorder=-5)
      wavshift = label_shifts.get(wave, 0)
      ax.text(wave + wavshift, 0.85, label, ha="center", va="top", rotation="vertical", fontsize="small")
  for wave, label in weak_lines.items():
      ax.axvline(wave, 0.33, 0.87, color="k", lw=0.5, zorder=-5)
      wavshift = label_shifts.get(wave, 0)
      ax.text(wave + wavshift, 2.03, label, ha="center", va="bottom", rotation="vertical", fontsize="small")

  for wave, label in absorption_lines.items():
      lw = 1.5 if label[0] in "D? " else 1.5
      ls = ":" if label[0] in "D? " else "--"
      miny = 0.21 if label[0] in "D? " else 0.18
      ytext = 0.7 if label[0] in "D? " else 0.65
      ax.axvline(wave, miny, 0.8, color="r", ls=ls, lw=lw, zorder=-5)
      wavshift = label_shifts.get(wave, 0)
      ax.text(wave + wavshift, ytext, label, ha="center", rotation="horizontal", fontsize="small", color="r", fontweight="bold")

  for wave in sky_lines:
      # Sky line wavelengths need correcting from topocentric to OMC farme
      wave *= (1.0 - (V_OMC + V_HEL)/3e5)
      ax.axvline(wave, 0.08, 0.82, color="g", lw=1, ls=":", zorder=-5)
      #ax.text(wave, 0.7, "sky", ha="center", rotation="vertical", fontsize="xx-small")


  # Add in sky transmission "trans_ma" and skyglow lines "flux_ael" from skycalc
  skywavs =  10*sky["lam"]*(1.0 - (V_OMC + V_HEL)/3e5)
  smask = (wavmin <= skywavs) & (skywavs <= wavmax) 
  skywavs = skywavs[smask]
  # pixels are 0.1 AA - convolve to give R = 2500 at 6500 AA
  fwhm_pix = 6500.0/(0.1*2500.0)
  gauss = Gaussian1DKernel(stddev=fwhm_pix/2.3)
  skytrans = convolve_fft(sky["trans_ma"].quantity, gauss)[smask]
  skyemis = convolve_fft(sky["flux_ael"].quantity, gauss)[smask]

  sns.set_color_codes("dark")

  offset = -0.55
  ax.plot(skywavs, (1.2*skytrans - 0.2) + offset, lw=0.8, color="r")
  ax.annotate(f"${np.round(offset, 2):.2f}$ + Telluric absorption",
              (wavmax, 1 + offset), color="r",
              xytext=(5, 0), textcoords="offset points", ha="left", va="center")
  offset = 0.55
  ax.plot(skywavs, offset + skyemis/skyemis.max(), lw=0.8, color="g") 
  ax.annotate(f"{np.round(np.abs(offset), 2):.2f} + Airglow",
              (wavmax, offset), color="g",
              xytext=(5, 0), textcoords="offset points", ha="left", va="center")

  ax.set(
      xlabel="STP Wavelength, Å (OMC frame)",
      ylabel="Relative Flux, $F_{\lambda} / F_{6200}$ + offset",
      # xlim=[wavmin, wavmax],
      ylim=[0.35, 2.25],
  )
  ax.minorticks_on()
  sns.despine(fig)
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:raman-orion-muse-1d-spectra-wavsec23.pdf]]



**** DONE Make files for Bob
CLOSED: [2021-01-04 Mon 20:40]
#+begin_src python :results output list
  import numpy as np
  import json
  from astropy.io import fits
  from astropy.wcs import WCS


  jsonfile = "raman-orion-muse-1d-spectra-wavsec23.json"
  all_data = json.load(open(jsonfile))


  for i, [region, data] in enumerate(all_data.items()):
      s_region = f"{i:02d}_{region.replace(' ', '_')}"

      wavs = data["wavelength"]
      line = data["raman"]
      cont = data["continuum"]

      wav0 = wavs[0]
      dwav = wavs[1] - wavs[0]

      w = WCS(naxis=1)
      w.wcs.cdelt = [np.round(dwav, 6)]
      w.wcs.crpix = [0]
      w.wcs.crval = [np.round(wav0, 6)]
      w.wcs.ctype = ["LINEAR"]

      fname = f"orion_raman_line_{s_region}.fits"
      print(fname)
      fits.PrimaryHDU(
          header=w.to_header(),
          data=line,
      ).writeto(fname, overwrite=True,)

      fname = f"orion_raman_cont_{s_region}.fits"
      fits.PrimaryHDU(
          header=w.to_header(),
          data=cont,
      ).writeto(fname, overwrite=True,)


#+end_src

#+RESULTS:
: - orion_raman_line_00_Bar.fits
: - orion_raman_line_01_Orion_S.fits
: - orion_raman_line_02_SW_minibar.fits
: - orion_raman_line_03_Trap_SW.fits
: - orion_raman_line_04_Trap_W.fits
: - orion_raman_line_05_E-W_Bar.fits
: - orion_raman_line_06_HH_202.fits
: - orion_raman_line_07_Big_Arc.fits
: - orion_raman_line_08_HH_528.fits

Make a zip file for Bob

#+begin_src sh :results verbatim
zip orion_raman_1d_spectra_for_bob.zip orion_raman_*.fits
#+end_src

#+RESULTS:
#+begin_example
updating: orion_raman_cont_00_Bar.fits (deflated 27%)
updating: orion_raman_cont_01_Orion_S.fits (deflated 31%)
updating: orion_raman_cont_02_SW_minibar.fits (deflated 29%)
updating: orion_raman_cont_03_Trap_SW.fits (deflated 30%)
updating: orion_raman_cont_04_Trap_W.fits (deflated 30%)
updating: orion_raman_cont_05_E-W_Bar.fits (deflated 29%)
updating: orion_raman_cont_06_HH_202.fits (deflated 29%)
updating: orion_raman_cont_07_Big_Arc.fits (deflated 30%)
updating: orion_raman_cont_08_HH_528.fits (deflated 30%)
updating: orion_raman_line_00_Bar.fits (deflated 22%)
updating: orion_raman_line_01_Orion_S.fits (deflated 22%)
updating: orion_raman_line_02_SW_minibar.fits (deflated 22%)
updating: orion_raman_line_03_Trap_SW.fits (deflated 22%)
updating: orion_raman_line_04_Trap_W.fits (deflated 22%)
updating: orion_raman_line_05_E-W_Bar.fits (deflated 22%)
updating: orion_raman_line_06_HH_202.fits (deflated 22%)
updating: orion_raman_line_07_Big_Arc.fits (deflated 22%)
updating: orion_raman_line_08_HH_528.fits (deflated 22%)
#+end_example


**** Check Bob's theory about normalizing by H\alpha
#+begin_src python :return figfile :results file
  import numpy as np
  import json
  from matplotlib import pyplot as plt
  import seaborn as sns

  figfile = "raman-muse-spectra-normalized-ha.pdf"

  jsonfile = "raman-orion-muse-1d-spectra-wavsec3.json"
  data = json.load(open(jsonfile))

  region_order = [
      "SW minibar",
      "Orion S",
      "E-W Bar",
      "Trap W",
      "Trap SW",
      "Bar",
      "Big Arc",
      "HH 202",
      "HH 528",
  ]
  sns.set_palette("bright")
  fig, ax = plt.subplots()

  for region in region_order:
      wavs = np.array(data[region]["wavelength"])
      flux = np.array(data[region]["raman"])
      flux /= flux.max()
      ax.plot(wavs, flux, label=region, alpha=0.7)
  wav0 = wavs[flux.argmax()]
  ax.axhline(0.0, lw=0.5, ls="--", c="k")
  ax.axvline(wav0, lw=0.5, ls="--", c="k")
  ax.legend(title="Region")
  ax.set(
      xlabel="Wavelength, Angstrom",
      ylabel=r"Flux / Peak H$\alpha$ flux",
      xlim=[6450, 6700],
      ylim=[-1e-5, 4e-4],
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)
  #+end_src

  #+RESULTS:
  [[file:raman-muse-spectra-normalized-ha.pdf]]

**** Make plot of (\Delta\lambda)^2 F_\lambda for the different regions
This is just like the previous figure, but with a restricted wavelength range and with the continuum removed

#+begin_src python :return figfile :results file
  import numpy as np
  import json
  from matplotlib import pyplot as plt
  import seaborn as sns

  jsonfile = "raman-orion-muse-1d-spectra.json"
  data = json.load(open(jsonfile))
  figfile = "raman-muse-spectra-times-lambda-squared.pdf"

  # Heliocentric correction
  V_HEL = -16.217273731
  # Heliocentric velocity of molecular cloud
  V_OMC = +9.0 + 19.1

  region_order = [
      "SW minibar",
      "Orion S",
      "E-W Bar",
      "Trap W",
      "Trap SW",
      "Bar",
  ]

  bands = {
      "B133": [6414.85, 6445.45],
      "B080": [6469.25, 6496.45],
      "B054": [6499.85, 6517.7],
      "B033": [6518.55, 6540.65],
      "R040": [6594.2, 6611.2],
      "R058": [6612.05, 6628.2],
      "R087": [6638.4, 6660.5],
      "R136": [6688.55, 6708.95],
  }

  strong_lines = {
      6562.79: r"H$\alpha$",
      6548.05: "[N II]",
      6583.45: "[N II]",
  }
  medium_lines = {
      6578.05: "C II",
      6678.15: "He I",
      6716.44: "[S II]",
      6730.816: "[S II]",
  }
  weak_lines = {
      6401.5: "[Ni III]",
      6501.4: "O II",
      6461.95: "C II",
      6527.24: "[N II]",
      6533.8: "[Ni III]",
      # 6544.3: "?",
      6641: "[Cr IV]",
      6666.80: "[Ni II]",
      6699.39: "He I"
  }
  sky_lines = [6465, 6471, 6478, 6498.15, 6507, 6603]
  absorption_lines = {
      6633.347: "O I",
      6663.747: "O I",
      6362.3446: "Si II",
      6480.8110: "Si II",
  }

  fig, ax = plt.subplots(figsize=(10, 6))

  wavmin, wavmax = 6410, 6710
  offset = 2.0
  fc = 0.7
  wav0 = 6562.74
  for region in region_order:
      spec = data[region]
      waves = np.array(spec["wavelength"]) 
      # Put in OMC frame
      waves *= (1.0 - (V_OMC + V_HEL)/3e5)
      imin = np.sum(waves < wavmin)
      imax = np.sum(waves < wavmax)
      i1 = np.sum(waves < bands["R087"][0])
      i2 = np.sum(waves < bands["R087"][1])
      total = np.array(spec["raman"])*(waves - wav0)**2
      norm = np.median(total[i1:i2])
      waves = waves[imin:imax] - wav0
      total = total[imin:imax]
      total /= norm
      ax.fill_between(waves, offset, total + offset, color=(fc, fc, fc))
      ax.plot(waves, total + offset, color="k", lw=0.7)
      ax.annotate(f"{offset:.1f} + {region}", (wavmax - wav0, offset + 1.0),
                  xytext=(5, 0), textcoords="offset points", ha="left", va="center")
      offset -= 0.4
      fc += 0.04

  wavmin -= wav0
  wavmax -= wav0
  # bandcolors = iter(sns.color_palette("coolwarm", len(bands)))
  # bandcolors = iter(sns.diverging_palette(220, 20, sep=1, n=len(bands), center="dark"))
  alphas = iter([0.2, 0.4, 0.4, 0.6, 0.6, 0.4, 0.4, 0.2])
  bandcolors = iter(["c", "c", "b", "b", "m", "m", "r", "r"])
  for band, [wav1, wav2] in bands.items():
      wav1 -= wav0
      wav2 -= wav0
      ax.axvspan(wav1, wav2, 0.2, 0.95, facecolor=next(bandcolors), alpha=next(alphas), zorder=-10)
      ax.text((wav1 + wav2)/2, 5.8, band, ha="center", fontsize="small")

  for wave, label in strong_lines.items():
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.08, 0.8, color="k", lw=2, zorder=-5)
      ax.text(wave, -0.6, label, ha="center", va="top", rotation="vertical", fontsize="small")
  for wave, label in medium_lines.items():
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.1, 0.8, color="k", lw=1, zorder=-5)
      ax.text(wave, -0.45, label, ha="center", va="top", rotation="vertical", fontsize="x-small")
  for wave, label in weak_lines.items():
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.1, 0.85, color="k", lw=0.5, zorder=-5)
      ax.text(wave, 5.0, label, ha="center", va="bottom", rotation="vertical", fontsize="xx-small")

  for wave, label in absorption_lines.items():
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.05, 0.8, color="k", ls="--", lw=1, zorder=-5)
      ax.text(wave, -0.98, label, ha="center", rotation="vertical", fontsize="xx-small")

  for wave in sky_lines:
      # Sky line wavelengths need correcting from topocentric to OMC farme
      wave *= (1.0 - (V_OMC + V_HEL)/3e5)
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.15, 0.82, color="k", lw=1, ls=":", zorder=-5)
      ax.text(wave, 4.75, "sky", ha="center", rotation="vertical", fontsize="xx-small")


  ax.set(
      xlabel=r"Wavelength difference from H$\alpha$: $\Delta\lambda_2$, Å",
      ylabel=r"offset + Compensated flux, $[(\Delta\lambda_2)^2\ (F_{\lambda}\ - F_{\mathrm{cont}})]\ /\ \langle  (\Delta\lambda_2)^2\ (F_{\lambda}\ - F_{\mathrm{cont}})\rangle_{\mathrm{R087}}$",
      # xlim=[wavmin, wavmax],
      ylim=[-1.1, 6.0],
  )
  ax.minorticks_on()
  sns.despine(fig)
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:raman-muse-spectra-times-lambda-squared.pdf]]

**** Make plot of F_\lambda / \sigma_Raman f_Ha for the different regions
+ This is just like the previous figure in layout
+ It is an improvement on the (\Delta\lambda)^2 F_\lambda one because it uses the true cross-section
+ [2020-12-26 Sat] Note that I now take an average of the results from the wavsec3 and wavsec23 cubes, which were calculated using different orders of polynomials for the continuum fit, which turns out to make quite a difference
  + See comment after source code in [[id:FBC24354-4D79-4438-8345-C851BA3BD016][Make a cube of (\Delta\lambda)^{2} F_{\lambda}]]
    
#+begin_src python :return figfile :results file
  import numpy as np
  import json
  from matplotlib import pyplot as plt
  import seaborn as sns

  jsonfile = "raman-orion-muse-1d-spectra-wavsec3.json"
  data = json.load(open(jsonfile))
  jsonfile2 = "raman-orion-muse-1d-spectra-wavsec23.json"
  data2 = json.load(open(jsonfile2))

  figfile = "raman-muse-spectra-compensated.pdf"

  # Heliocentric correction
  V_HEL = -16.217273731
  # Heliocentric velocity of molecular cloud
  V_OMC = +9.0 + 19.1

  region_order = [
      "SW minibar",
      "Orion S",
      "E-W Bar",
      "Trap W",
      "Trap SW",
      "Bar",
  ]

  bands = {
      "B133": [6414.85, 6445.45],
      "B080": [6469.25, 6496.45],
      "B054": [6499.85, 6517.7],
      "B033": [6518.55, 6540.65],
      "R040": [6594.2, 6611.2],
      "R058": [6612.05, 6628.2],
      "R087": [6638.4, 6660.5],
      "R136": [6688.55, 6708.95],
  }

  strong_lines = {
      6562.79: r"H$\alpha$",
      6548.05: "[N II]",
      6583.45: "[N II]",
  }
  medium_lines = {
      6578.05: "C II",
      6678.15: "He I",
      6716.44: "[S II]",
      6730.816: "[S II]",
  }
  weak_lines = {
      6401.5: "[Ni III]",
      6501.4: "O II",
      6461.95: "C II",
      6527.24: "[N II]",
      6533.8: "[Ni III]",
      # 6544.3: "?",
      6641: "[Cr IV]",
      6666.80: "[Ni II]",
      6699.39: "He I"
  }
  sky_lines = [6465, 6471, 6478, 6498.15, 6507, 6603]
  absorption_lines = {
      6633.347: "O I",
      6663.747: "O I",
      6362.3446: "Si II",
      6480.8110: "Si II",
  }

  def sig_fha(dwav):
      """
      Raman sigma times Ha conversion fraction

      Argument `dwav` (1d array) is delta lambda from Ha rest wavelength
      in optical frame
      """
      x = np.atleast_1d(dwav)/100.0
      result = np.where(
          x >= 0.0,
          # Red flank
          0.2367 / x**2 - 0.01866 / x + 0.0004068, 
          # Blue flank
          0.2186 / x**2 - 0.03435 / x - 0.005381,
      )
      # Normalization of x-section
      result *= 1e-21
      # Multiply by Ha conversion fraction
      result *= 0.2238 + 0.03631 * x + 0.002363 * x**2
      return result


  fig, ax = plt.subplots(figsize=(10, 6))

  wavmin, wavmax = 6410, 6710
  offset = 2.0
  fc = 0.7
  wav0 = 6562.74
  for region in region_order:
      spec = data[region]
      spec2 = data2[region]
      waves = np.array(spec["wavelength"]) 
      waves2 = np.array(spec2["wavelength"]) 
      # Put in OMC frame
      waves *= (1.0 - (V_OMC + V_HEL)/3e5)
      waves2 *= (1.0 - (V_OMC + V_HEL)/3e5)
      imin = np.sum(waves < wavmin)
      imax = np.sum(waves < wavmax)
      i1 = np.sum(waves < bands["R087"][0])
      i2 = np.sum(waves < bands["R087"][1])
      total = np.array(spec["raman"]) / sig_fha(waves - wav0)
      total2 = np.array(spec2["raman"]) / sig_fha(waves2 - wav0)
      norm = np.median(total[i1:i2])
      waves = waves[imin:imax] - wav0
      total = total[imin:imax]
      total /= norm
      imin2 = np.sum(waves2 < wavmin)
      imax2 = np.sum(waves2 < wavmax)
      waves2 = waves2[imin2:imax2] - wav0
      total2 = total2[imin2:imax2]
      total2 /= norm
      total = 0.5*(total + total2)
      ax.fill_between(waves, offset, total + offset, color=(fc, fc, fc))
      ax.plot(waves, total + offset, color="k", lw=0.7)
      #ax.plot(waves, total2 + offset, color="r", lw=0.7)
      ax.annotate(f"{offset:.1f} + {region}", (wavmax - wav0, offset + 1.0),
                  xytext=(5, 0), textcoords="offset points", ha="left", va="center")
      offset -= 0.4
      fc += 0.04

  wavmin -= wav0
  wavmax -= wav0
  # bandcolors = iter(sns.color_palette("coolwarm", len(bands)))
  # bandcolors = iter(sns.diverging_palette(220, 20, sep=1, n=len(bands), center="dark"))
  alphas = iter([0.2, 0.4, 0.4, 0.6, 0.6, 0.4, 0.4, 0.2])
  bandcolors = iter(["c", "c", "b", "b", "m", "m", "r", "r"])
  for band, [wav1, wav2] in bands.items():
      wav1 -= wav0
      wav2 -= wav0
      ax.axvspan(wav1, wav2, 0.2, 0.95, facecolor=next(bandcolors), alpha=next(alphas), zorder=-10)
      ax.text((wav1 + wav2)/2, 5.8, band, ha="center", fontsize="small")

  for wave, label in strong_lines.items():
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.08, 0.8, color="k", lw=2, zorder=-5)
      ax.text(wave, -0.6, label, ha="center", va="top", rotation="vertical", fontsize="small")
  for wave, label in medium_lines.items():
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.1, 0.8, color="k", lw=1, zorder=-5)
      ax.text(wave, -0.45, label, ha="center", va="top", rotation="vertical", fontsize="x-small")
  for wave, label in weak_lines.items():
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.1, 0.89, color="k", lw=0.5, zorder=-5)
      ax.text(wave, 5.3, label, ha="center", va="bottom", rotation="vertical", fontsize="xx-small")

  for wave, label in absorption_lines.items():
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.05, 0.8, color="k", ls="--", lw=1, zorder=-5)
      ax.text(wave, -0.98, label, ha="center", rotation="vertical", fontsize="xx-small")

  for wave in sky_lines:
      # Sky line wavelengths need correcting from topocentric to OMC farme
      wave *= (1.0 - (V_OMC + V_HEL)/3e5)
      wave -= wav0
      if not wavmin < wave < wavmax:
          continue
      ax.axvline(wave, 0.15, 0.82, color="k", lw=1, ls=":", zorder=-5)
      ax.text(wave, 4.75, "sky", ha="center", rotation="vertical", fontsize="xx-small")


  ax.set(
      xlabel=r"Wavelength difference from H$\alpha$: $\Delta\lambda_2$, Å",
      ylabel=r"offset + Compensated flux, $(F_{\lambda}\ - F_{\mathrm{cont}}) \ / \ \sigma_{\mathrm{Ly\beta}}(\Delta\lambda_2)\ f_{\mathrm{H\alpha}}(\Delta\lambda_2)$",
      # xlim=[wavmin, wavmax],
      ylim=[-1.1, 6.0],
  )
  ax.minorticks_on()
  sns.despine(fig)
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:raman-muse-spectra-compensated.pdf]]


**** Make a cube of (\Delta\lambda)^{2} F_{\lambda}
:PROPERTIES:
:ID:       FBC24354-4D79-4438-8345-C851BA3BD016
:END:
+ This should give a flat spectrum for Lorentzian wings
+ Should be able to spot any red-blue asymmetries better
+ And also see where the [N II] lines start to become important
+ For central wavelength, we can use the cluster velocity of 25 km/s heliocentric
  + Wave pixels are 0.85 \AA = 39 km/s @ H\alpha
  + The heliocentric correction is -16.2 km/s, but do we add or subtract?

#+name: dlam2-cube
#+header: :var REBIN="rebin16x16"
#+begin_src python
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  datadir = "../data/orion-muse"
  infile = f"muse-hr-data-wavsec23-{REBIN}-cont-sub.fits"
  hdu = fits.open(f"{datadir}/{infile}")["DATA"]


  wcs = WCS(hdu.header)

  nwav, ny, nx = hdu.data.shape
  wavpix = np.arange(nwav)
  _, _, waves = wcs.pixel_to_world_values([0]*nwav, [0]*nwav, wavpix)
  dlam = 1e10*waves - 6562.79*(1 + (25.0 - 16.2)/3e5)
  hdu.data *= dlam[:, None, None]**2
  outfile = infile.replace(".fits", "-Flam-dlam2.fits")
  hdu.writeto(f"{datadir}/{outfile}", overwrite=True)
#+end_src

#+RESULTS: dlam2-cube
: None

#+RESULTS:
: None

#+call: dlam2-cube("rebin05x05")

#+RESULTS:
: None

+ [X] [2020-12-26 Sat] The ~wavsec3-rebin16x16~ version has an arguably better blue wing than the the ~wavsec23-rebin16x16~ version.
  + Better in the sense that the B080 band goes flat like R087 does
  + But worse in that the B133 band drops to essentially zero
  + This seems to be related to the order of polynomial used for the continuum fitting

**** Calculate EW of 6634
#+name: ew-6634
#+header: :var REBIN="rebin16x16"
#+begin_src python
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  from numpy.polynomial import Chebyshev as T
  import itertools
  datadir = "../data/orion-muse"
  infile = f"muse-hr-data-wavsec3-{REBIN}-cont-sub-Flam-dlam2.fits"
  hdu = fits.open(f"{datadir}/{infile}")["DATA"]


  wcs = WCS(hdu.header)
  ANGSTROM = 1e-10                # convert to SI lengths for WCS
  nwav, ny, nx = hdu.data.shape
  _, _, waves = wcs.pixel_to_world_values([0]*nwav, [0]*nwav, np.arange(nwav))
  contwavs = np.array([6594.2, 6660.5])*ANGSTROM
  linewavs = np.array([6628.2, 6638.4])*ANGSTROM
  [ic1, ic2], _, _ = wcs.world_to_array_index_values([0, 0], [0, 0], contwavs)
  [il1, il2], _, _ = wcs.world_to_array_index_values([0, 0], [0, 0], linewavs)

  # slices for blue and red continuum sections 
  bslice = slice(ic1, il1)
  rslice = slice(il2, ic2)
  # slices for line section and full section
  lslice = slice(il1, il2)
  fslice = slice(ic1, ic2)

  # Wavelength arrays for continuum, line, and full
  cwaves = np.concatenate([waves[bslice], waves[rslice]])
  lwaves = waves[lslice]
  fwaves = waves[fslice]

  # Corresponding intensity cubes
  cdata = np.concatenate([hdu.data[bslice, :, :], hdu.data[rslice, :, :]], axis=0)
  ldata = hdu.data[lslice, :, :]
  fdata = hdu.data[fslice, :, :]
  # Cube to put rectified spectrum
  rdata = np.empty_like(fdata)

  for j, i in itertools.product(range(ny), range(nx)):
      # Fit polynomial to continuum
      p = T.fit(cwaves, cdata[:, j, i], deg=2)
      # Divide full section by fit to give rectified spectrum of residual intensity
      rdata[:, j, i] = fdata[:, j, i] / p(fwaves)

  # Absorption depth is 1 - residual intensity
  adata = 1.0 - rdata
  # Adjust line slice for the new wavelength window (fwaves)
  lslice = slice(il1-ic1, il2-ic1)
  # integrate absorption depth over line wavelengths to get equivalent width
  ewmap = np.trapz(adata[lslice, :, :], x=fwaves[lslice], axis=0)/ANGSTROM

  outfile = f"muse-ew6634-{REBIN}.fits"
  fits.PrimaryHDU(header=wcs.celestial.to_header(), data=ewmap).writeto(
      f"{datadir}/{outfile}", overwrite=True)
#+end_src

#+RESULTS: ew-6634
: None

#+call: ew-6634("rebin05x05")

#+RESULTS:
: None

+ Note that these are EW with respect to the Raman wing
  + That is, they do not include the dilution by the underlying continuum (atomic and dust-scattered)
  + The resultant EW is
    + 1.8 \pm 0.4 \AA in Bar
    + 2.1 \pm 0.4 \AA in EW Bar
    + 2.5 \pm 0.5 \AA in Orion S
+ In this sense, they are different from the EW that we calculate generally for the MUSE project, which /do/ include this dilution
  + What we can do is to make an image of the Raman band divided by local continuum
**** Make maps of the different Raman bands
+ This is an intermediate step to doing proper multi-line fitting
+ Bands are defined in [[id:B644E1CC-212F-4A30-9924-04DB7BAADF00][Column densities]]

#+begin_src python :tangle ../src/extract-raman-bands.py :eval no
  import sys
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS

  try:
      INDIR = sys.argv[1]
      REBIN = sys.argv[2]
      OUTDIR = sys.argv[3]
  except IndexError:
      sys.exit(f"Usage: {sys.argv[0]} INDIR REBIN OUTDIR")

  infile = f"muse-hr-data-wavsec23{REBIN}-cont-sub.fits"
  hdu = fits.open(f"{INDIR}/{infile}")["DATA"]

  bands = {
      "R007": [6568.7, 6571.25],
      "R011": [6572.1, 6574.65],
      "R040": [6594.2, 6611.2],
      "R058": [6612.05, 6628.2],
      "R087": [6638.4, 6660.5],
      "R136": [6688.55, 6708.95],
      "B006": [6555.95, 6557.65],
      "B009": [6552.55, 6555.1],
      "B033": [6518.55, 6540.65],
      "B054": [6499.85, 6517.7],
      "B080": [6469.25, 6496.45],
      "B133": [6414.85, 6445.45],
  }

  wcs = WCS(hdu.header)
  imhdr = wcs.celestial.to_header()

  nwav, ny, nx = hdu.data.shape
  wavpix = np.arange(nwav)

  for band, waves in bands.items():
      waves = np.array(waves)/1e10
      [i1, i2], _, _ = wcs.world_to_array_index_values([0, 0], [0, 0], waves)
      image = hdu.data[i1:i2+1, :, :].mean(axis=0)
      outfile = infile.replace("wavsec23", f"ha-raman-{band}")
      fits.PrimaryHDU(data=image, header=imhdr).writeto(
          f"{OUTDIR}/{outfile}", overwrite=True)
#+end_src

#+name: extract-raman-bands
#+header: :var REBIN="-rebin16x16"
#+header: :var INDIR="../data/orion-muse"
#+header: :var OUTDIR="../data/orion-muse"
#+begin_src sh
python ../src/extract-raman-bands.py $REBIN $INDIR $OUTDIR
#+end_src

#+RESULTS: extract-raman-bands
: None

And extract the bands for the 5x5 cube

#+call: extract-raman-bands("-rebin05x05")

#+RESULTS:
: None


And for the 1x1 full-resolution cube
#+call: extract-raman-bands(REBIN="", INDIR="/Users/will/Work/Muse-Hii-Data/M42")

#+RESULTS:
: None

**** Sum and ratios of bands

#+begin_src python
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  suffix = "-multibin-1000"
  bands = {
      "R040": [6594.2, 6611.2],
      "R058": [6612.05, 6628.2],
      "R087": [6638.4, 6660.5],
      "R136": [6688.55, 6708.95],
      "B033": [6518.55, 6540.65],
      "B054": [6499.85, 6517.7],
      "B080": [6469.25, 6496.45],
      "B133": [6414.85, 6445.45],
  }

  datadir = "../data/orion-muse"
  hdus = {}
  for band in bands:
      infile = f"muse-hr-data-ha-raman-{band}-cont-sub{suffix}.fits"
      hdus[band] = fits.open(f"{datadir}/{infile}")[0]


  data = np.sum([hdus[band].data for band in bands], axis=0)
  outfile = f"muse-hr-data-ha-raman-TOTAL{suffix}.fits"
  fits.PrimaryHDU(
      data=data,
      header=hdus["R040"].header,
  ).writeto(
      f"{datadir}/{outfile}",
      overwrite=True,
  )

  data = np.sum([hdus[band].data for band in ["R040", "R058", "B033", "B054"]], axis=0)
  outfile = f"muse-hr-data-ha-raman-TOTAL-NEAR{suffix}.fits"
  fits.PrimaryHDU(
      data=data,
      header=hdus["R040"].header,
  ).writeto(
      f"{datadir}/{outfile}",
      overwrite=True,
  )

  data = np.sum([hdus[band].data for band in ["R087", "R136", "B080", "B133"]], axis=0)
  outfile = f"muse-hr-data-ha-raman-TOTAL-FAR{suffix}.fits"
  fits.PrimaryHDU(
      data=data,
      header=hdus["R040"].header,
  ).writeto(
      f"{datadir}/{outfile}",
      overwrite=True,
  )

  data = np.sum(
      [hdus[band].data for band in ["R040", "R058", "R087", "R136"]],
      axis=0
  )
  data /= np.sum(
      [hdus[band].data for band in ["B033", "B054", "B080", "B133"]],
      axis=0
  )
  outfile = f"muse-hr-data-ha-raman-RED-BLUE{suffix}.fits"
  fits.PrimaryHDU(
      data=data,
      header=hdus["R040"].header,
  ).writeto(
      f"{datadir}/{outfile}",
      overwrite=True,
  )


  data = np.sum(
      [hdus[band].data for band in ["R087", "R136", "B080", "B133"]],
      axis=0
      )
  data /= np.sum(
      [hdus[band].data for band in ["R040", "R058", "B033", "B080"]],
      axis=0
  )
  outfile = f"muse-hr-data-ha-raman-FAR-NEAR{suffix}.fits"
  fits.PrimaryHDU(
      data=data,
      header=hdus["R040"].header,
  ).writeto(
      f"{datadir}/{outfile}",
      overwrite=True,
  )

#+end_src

#+RESULTS:
: None


**** Multibinning of band maps

#+begin_src sh :results verbatim
  MULTIBIN=/Users/will/Dropbox/multibin-maps/multibin-map.py
  #MULTIBIN=/Users/will/Dropbox/OrionWest/multibin-map.py
  cd ../data/orion-muse
  for map in muse-hr-data-ha-raman-[BR]???-cont-sub.fits; do
      python $MULTIBIN $map
  done
#+end_src

#+RESULTS:
#+begin_example
Saving muse-hr-data-ha-raman-B006-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-B006-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-B006-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-B006-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-B006-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-B006-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-B006-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-B006-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-B006-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-B009-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-B009-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-B009-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-B009-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-B009-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-B009-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-B009-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-B009-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-B009-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-B033-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-B033-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-B033-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-B033-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-B033-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-B033-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-B033-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-B033-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-B033-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-B054-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-B054-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-B054-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-B054-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-B054-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-B054-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-B054-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-B054-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-B054-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-B080-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-B080-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-B080-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-B080-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-B080-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-B080-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-B080-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-B080-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-B080-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-B133-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-B133-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-B133-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-B133-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-B133-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-B133-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-B133-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-B133-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-B133-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-R007-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-R007-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-R007-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-R007-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-R007-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-R007-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-R007-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-R007-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-R007-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-R011-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-R011-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-R011-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-R011-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-R011-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-R011-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-R011-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-R011-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-R011-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-R040-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-R040-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-R040-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-R040-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-R040-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-R040-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-R040-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-R040-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-R040-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-R058-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-R058-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-R058-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-R058-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-R058-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-R058-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-R058-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-R058-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-R058-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-R087-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-R087-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-R087-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-R087-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-R087-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-R087-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-R087-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-R087-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-R087-cont-sub-bin256.fits
Saving muse-hr-data-ha-raman-R136-cont-sub-bin001.fits
Saving muse-hr-data-ha-raman-R136-cont-sub-bin002.fits
Saving muse-hr-data-ha-raman-R136-cont-sub-bin004.fits
Saving muse-hr-data-ha-raman-R136-cont-sub-bin008.fits
Saving muse-hr-data-ha-raman-R136-cont-sub-bin016.fits
Saving muse-hr-data-ha-raman-R136-cont-sub-bin032.fits
Saving muse-hr-data-ha-raman-R136-cont-sub-bin064.fits
Saving muse-hr-data-ha-raman-R136-cont-sub-bin128.fits
Saving muse-hr-data-ha-raman-R136-cont-sub-bin256.fits
#+end_example

#+begin_src sh :results verbatim
  MULTIBIN=/Users/will/Dropbox/multibin-maps/multibin-map.py
  cd ../data/orion-muse
  python $MULTIBIN linesum-blue-C_I-8727.fits
#+end_src

#+RESULTS:
: Saving linesum-blue-C_I-8727-bin001.fits
: Saving linesum-blue-C_I-8727-bin002.fits
: Saving linesum-blue-C_I-8727-bin004.fits
: Saving linesum-blue-C_I-8727-bin008.fits
: Saving linesum-blue-C_I-8727-bin016.fits
: Saving linesum-blue-C_I-8727-bin032.fits
: Saving linesum-blue-C_I-8727-bin064.fits
: Saving linesum-blue-C_I-8727-bin128.fits
: Saving linesum-blue-C_I-8727-bin256.fits





**** Combine multibin maps
#+BEGIN_SRC python :tangle ../src/raman-multibin-combine.py
  import sys
  from astropy.io import fits
  import numpy as np
  sys.path.append('/Users/will/Work/RubinWFC3/Tsquared')
  from rebin_utils import oversample
  from skimage.morphology import square
  from skimage.filters.rank import modal


  def minify(a, n):
      return a[::n, ::n]


  ELEMENT = square(5)
  def cleanup_mask(mask, n):
      """Eliminate small islands in the mask"""
      m = minify(mask, n).astype(np.uint8)
      m = m & modal(m, ELEMENT)
      return oversample(m, n).astype(bool)


  try: 
      prefix, minw_scale = sys.argv[1], float(sys.argv[2])
  except:
      print('Usage:', sys.argv[0], 'FITSFILE_PREFIX MINIMUM_WEIGHT [COARSE_WEIGHT]')
      sys.exit()

  try:
      minw_coarse = float(sys.argv[3])
  except IndexError:
      minw_coarse = None

  nlist = [1, 2, 4, 8, 16, 32, 64]
  minweights = [2.0, 2.0, 2.0, 4.0, 8.0, 8.0, 8.0]
  if minw_coarse is not None:
      minweights[-1] = minw_coarse
  outim = np.zeros((1536, 1792))
  for n, minw in reversed(list(zip(nlist, minweights))):
      fn = '{}-bin{:03d}.fits'.format(prefix, n)
      hdulist = fits.open(fn)
      im = hdulist['scaled'].data
      hdr = hdulist['scaled'].header
      w = hdulist['weight'].data
      m = cleanup_mask(w*im >= minw*minw_scale, n)
      m = m & np.isfinite(w) & (w > 0.0) & np.isfinite(im) & (im > 0.0)
      outim[m] = im[m]
  fits.PrimaryHDU(header=hdr, data=outim).writeto(
      f"{prefix}-multibin-{int(minw_scale)}.fits", overwrite=True)
#+END_SRC

#+RESULTS:

Original runs were with ~MINIMUM_WEIGHT=5000~.  But we are going to try some higher resolution but noisier ones. 
#+begin_src sh :results silent :dir ..
python src/raman-multibin-combine.py data/orion-muse/linesum-blue-C_I-8727 500 0.0
#+end_src


#+begin_src sh :results silent :dir ..
python src/raman-multibin-combine.py data/orion-muse/muse-hr-data-ha-raman-R040-cont-sub 1000 0.0
#+end_src

#+begin_src sh :results silent :dir ..
python src/raman-multibin-combine.py data/orion-muse/muse-hr-data-ha-raman-R058-cont-sub 1000 0.0
#+end_src

#+begin_src sh :results silent :dir ..
python src/raman-multibin-combine.py data/orion-muse/muse-hr-data-ha-raman-R087-cont-sub 1000 0.0
#+end_src

#+begin_src sh :results silent :dir ..
python src/raman-multibin-combine.py data/orion-muse/muse-hr-data-ha-raman-R136-cont-sub 1000 0.0
#+end_src

#+begin_src sh :results silent :dir ..
python src/raman-multibin-combine.py data/orion-muse/muse-hr-data-ha-raman-B033-cont-sub 1000 0.0
#+end_src

#+begin_src sh :results silent :dir ..
python src/raman-multibin-combine.py data/orion-muse/muse-hr-data-ha-raman-B054-cont-sub 1000 0.0
#+end_src

#+begin_src sh :results silent :dir ..
python src/raman-multibin-combine.py data/orion-muse/muse-hr-data-ha-raman-B080-cont-sub 1000 0.0
#+end_src

#+begin_src sh :results silent :dir ..
python src/raman-multibin-combine.py data/orion-muse/muse-hr-data-ha-raman-B133-cont-sub 1000 0.0
#+end_src


**** TODO Maps of Raman-wing fraction around the 6634 feature
+ First, do naive method without multibinning the continuum

#+begin_src python
  import numpy as np
  from astropy.io import fits
  from pathlib import Path

  datadir = Path("../data/orion-muse")
  contfile = "continuum-N_III-6634-bin004.fits"
  conthdu = fits.open(datadir / contfile)["SCALED"]

  #bands = ["R087", "R136"]
  bands = ["R087", ]
  wing_data = np.zeros_like(conthdu.data)
  for band in bands:
      band_file = f"muse-hr-data-ha-raman-{band}-cont-sub-multibin-1000.fits"
      band_data = fits.open(datadir / band_file)[0].data
      wing_data += band_data
      wing_data /= len(bands)

  ratio = wing_data / (conthdu.data - wing_data)

  # Mask out areas of weak continuum because noisy
  mask = conthdu.data < 600.0
  ratio[mask] = np.nan

  fits.PrimaryHDU(header=conthdu.header, data=ratio).writeto(
      datadir / "ratio-raman-wing-to-continuum-6634.fits", overwrite=True)
#+end_src

#+RESULTS:
: None
That was good enough for the maps.  But now do another version at fixed bin size for the histograms because that comes out better.  Use bin064

#+begin_src python
  import numpy as np
  from astropy.io import fits
  from pathlib import Path

  datadir = Path("../data/orion-muse")
  contfile = "continuum-N_III-6634-bin064.fits"
  conthdu = fits.open(datadir / contfile)["SCALED"]

  #bands = ["R087", "R136"]
  bands = ["R087", ]
  wing_data = np.zeros_like(conthdu.data)
  for band in bands:
      band_file = f"muse-hr-data-ha-raman-{band}-cont-sub-bin032.fits"
      band_data = fits.open(datadir / band_file)["SCALED"].data
      wing_data += band_data
      wing_data /= len(bands)

  ratio = wing_data / (conthdu.data - wing_data)

  # Mask out areas of weak continuum because noisy
  mask = conthdu.data < 600.0
  ratio[mask] = np.nan

  fits.PrimaryHDU(header=conthdu.header, data=ratio).writeto(
      datadir / "ratio-raman-wing-to-continuum-6634-bin032.fits", overwrite=True)
#+end_src

#+RESULTS:
: None

And also make one for Raman / Ha, just for Bob

#+begin_src python
  import numpy as np
  from astropy.io import fits
  from pathlib import Path

  datadir = Path("../data/orion-muse")
  contfile = "linesum-H_I-6563-bin001.fits"
  conthdu = fits.open(datadir / contfile)["SCALED"]

  # bands = ["R040", "R058", "R087", ]
  # bands = ["R040", "R058", "B054"]
  bands = ["R040", "R058", ]
  wing_data = np.zeros_like(conthdu.data)
  for band in bands:
      band_file = f"muse-hr-data-ha-raman-{band}-cont-sub-multibin-1000.fits"
      band_data = fits.open(datadir / band_file)[0].data
      wing_data += band_data
      wing_data /= len(bands)

  ratio = wing_data / (conthdu.data - wing_data)

  # Mask out areas of weak continuum because noisy
  mask = conthdu.data < 600.0
  ratio[mask] = np.nan

  fits.PrimaryHDU(header=conthdu.header, data=ratio).writeto(
      datadir / "ratio-raman-wing-to-Halpha.fits", overwrite=True)
#+end_src

#+RESULTS:
: None


**** Make figures of maps
:PROPERTIES:
:ID:       9B0BB7D0-1CFB-4129-A918-B4A7CB085941
:END:
+ Try out the Lupton:2014a method, although I am a bit skeptical
  + It seems to lose the whites completely
  + And RGB is not perceptually uniform
    + So blue areas look darker
  + For instance, on this test image (with random number), all the bright spots are green
#+begin_src python :results file :return figfile
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.visualization import make_lupton_rgb
  image_r = np.random.random((100,100))
  image_g = np.random.random((100,100))
  image_b = np.random.random((100,100))
  image = make_lupton_rgb(image_r, image_g, image_b, stretch=0.5)

  figfile = "lupton-rgb-test.pdf"
  fig, ax = plt.subplots()
  ax.imshow(image)
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:lupton-rgb-test.pdf]]

#+name: rgb-lupton-raman
#+header: :var TAB=rgb-limits-ifront SUFFIX="ifront" DATADIR="../data/orion-muse"
#+header: :var STRETCH=0.3 Q=4 STARS=star-coords HDU="SCALED"
#+begin_src python :results file :return figfile
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.visualization import make_lupton_rgb
  from astropy.io import fits
  from astropy.wcs import WCS

  # Unpack the channel info from the table
  [rf, r1, r2], [gf, g1, g2], [bf, b1, b2] = TAB

  def load_and_scale_image(fn, v1, v2, ihdu=HDU):
      data = fits.open(f"{DATADIR}/{fn}")[ihdu].data
      return (data - v1) / (v2 - v1)


  w = WCS(fits.open(f"{DATADIR}/{rf}")[HDU].header)

  image_r = load_and_scale_image(rf, r1, r2)
  image_g = load_and_scale_image(gf, g1, g2)
  image_b = load_and_scale_image(bf, b1, b2)
  image = make_lupton_rgb(image_r, image_g, image_b, stretch=STRETCH, Q=Q)

  figfile = f"rgb-lupton-raman-{SUFFIX}.jpg"
  fig, ax = plt.subplots(figsize=(6.2, 5), subplot_kw=dict(projection=w))
  ax.imshow(image)
  for _, ra, dec, size in STARS:
      ax.scatter(ra, dec, transform=ax.get_transform("icrs"), s=0.6*size, ec="yellow", fc="none")
  ax.set(xlabel="RA (J2000)", ylabel="Dec (J2000)")
  fig.tight_layout(rect=[0.08, 0.07, 1.0, 1.0])
  fig.savefig(figfile, dpi=200)
#+end_src

#+RESULTS: rgb-lupton-raman
[[file:rgb-lupton-raman-ifront.jpg]]


I have decreased ~vmax~ for 6300 to bring out the yellow and cyan better 
#+name: rgb-limits-ifront
| linesum-O_I-8446-bin001.fits  |  3000 |  200000 |
| linesum-O_I-6300-bin001.fits  |  8000 |  150000 |
| linesum-O_II-7318-bin001.fits | 20000 | 1000000 |

These are the original limits I used in DS9
#+name: rgb-limits-ifront-ds9
| linesum-O_I-8446-bin001.fits  |  3000 |  200000 |
| linesum-O_I-6300-bin001.fits  |  8000 |  200000 |
| linesum-O_II-7318-bin001.fits | 20000 | 1000000 |

Now, the Raman bands

#+name: rgb-limits-raman-R
| muse-hr-data-ha-raman-R087-cont-sub-multibin.fits | 20 |  450 |
| muse-hr-data-ha-raman-R057-cont-sub-multibin.fits | 20 | 1000 |
| muse-hr-data-ha-raman-R040-cont-sub-multibin.fits | 20 | 2000 |

#+call: rgb-lupton-raman(TAB=rgb-limits-raman-R, SUFFIX="raman-R", STRETCH=0.4, Q=8)

#+RESULTS:
[[file:rgb-lupton-raman-raman-R.jpg]]

I don't like that so much - it looks very brown. 

Coordinates of stars. 
#+begin_src python :return table
  from astropy.coordinates import SkyCoord

  stars = [
      "tet01 Ori A",
      "tet01 Ori B",
      "tet01 Ori C",
      "tet01 Ori D",
      "tet02 Ori A",
      "tet02 Ori B",
  ]

  table = []
  for star in stars:
      c = SkyCoord.from_name(star)
      table.append([star, c.ra.value, c.dec.value])
    
#+end_src

#+RESULTS:
| tet01 Ori A |  83.8159384 |  -5.3873146 |
| tet01 Ori B | 83.81713333 | -5.38524722 |
| tet01 Ori C | 83.81859898 | -5.38968015 |
| tet01 Ori D | 83.82163535 | -5.38765726 |
| tet02 Ori A | 83.84542605 | -5.41606033 |
| tet02 Ori B | 83.86000176 | -5.41688682 |

Make a version of above table with sizes for circles. 

#+name: star-coords
| tet01 Ori A |  83.8159384 |  -5.3873146 |  50 |
| tet01 Ori B | 83.81713333 | -5.38524722 |  30 |
| tet01 Ori C | 83.81859898 | -5.38968015 | 100 |
| tet01 Ori D | 83.82163535 | -5.38765726 |  50 |
| tet02 Ori A | 83.84542605 | -5.41606033 | 100 |
| tet02 Ori B | 83.86000176 | -5.41688682 |  70 |


Here is a version that does a natural RGB image

#+name: rgb-natural-raman
#+header: :var TAB=rgb-limits-raman-R SUFFIX="raman-R" DATADIR="../data/orion-muse"
#+header: :var SCALE="sqrt" STARS=star-coords HDU="SCALED"
#+begin_src python :results file :return figfile
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.visualization import make_lupton_rgb
  from astropy.visualization.lupton_rgb import LinearMapping
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy.coordinates import SkyCoord

  # Unpack the channel info from the table
  [rf, r1, r2], [gf, g1, g2], [bf, b1, b2] = TAB

  def load_and_scale_image(fn, v1, v2, ihdu='SCALED'):
      data = fits.open(f"{DATADIR}/{fn}")[ihdu].data
      return (data - v1) / (v2 - v1)


  w = WCS(fits.open(f"{DATADIR}/{rf}")[HDU].header)

  image_r = load_and_scale_image(rf, r1, r2)
  image_g = load_and_scale_image(gf, g1, g2)
  image_b = load_and_scale_image(bf, b1, b2)
  if SCALE == "sqrt":
      image_r = np.sqrt(image_r)
      image_g = np.sqrt(image_g)
      image_b = np.sqrt(image_b)

  image = LinearMapping(0.0, 1.0).make_rgb_image(image_r, image_g, image_b)

  figfile = f"rgb-natural-raman-{SUFFIX}.jpg"
  fig, ax = plt.subplots(figsize=(6.2, 5), subplot_kw=dict(projection=w))
  ax.imshow(image)
  for _, ra, dec, size in STARS:
      ax.scatter(ra, dec, transform=ax.get_transform("icrs"), s=0.6*size, ec="yellow", fc="none")
    
  ax.set(xlabel="RA (J2000)", ylabel="Dec (J2000)")
  fig.tight_layout(rect=[0.08, 0.07, 1.0, 1.0])
  fig.savefig(figfile, dpi=200)
#+end_src

#+RESULTS: rgb-natural-raman
[[file:rgb-natural-raman-raman-R.jpg]]

That looks a lot better - goes to white in the bright parts.

Now for the blue wing

#+name: rgb-limits-raman-B
| muse-hr-data-ha-raman-B080-cont-sub-multibin.fits | 15 |  300 |
| muse-hr-data-ha-raman-B054-cont-sub-multibin.fits | 20 | 1000 |
| muse-hr-data-ha-raman-B033-cont-sub-multibin.fits | 20 | 2000 |


#+call: rgb-natural-raman(TAB=rgb-limits-raman-B, SUFFIX="raman-B")

#+RESULTS:
[[file:rgb-natural-raman-raman-B.jpg]]


Now try a higher resolution ones

#+name: rgb-limits-raman-R-hires
| muse-hr-data-ha-raman-R087-cont-sub-multibin-1000.fits | 20 |  700 |
| muse-hr-data-ha-raman-R058-cont-sub-multibin-1000.fits | 30 | 1200 |
| muse-hr-data-ha-raman-R040-cont-sub-multibin-1000.fits | 40 | 2400 |

#+call: rgb-natural-raman(TAB=rgb-limits-raman-R-hires, SUFFIX="raman-R-hires", SCALE="sqrt")

#+RESULTS:
[[file:rgb-natural-raman-raman-R-hires.jpg]]

#+name: rgb-limits-raman-B-hires
| muse-hr-data-ha-raman-B080-cont-sub-multibin-1000.fits | 20 |  700 |
| muse-hr-data-ha-raman-B054-cont-sub-multibin-1000.fits | 30 | 1200 |
| muse-hr-data-ha-raman-B033-cont-sub-multibin-1000.fits | 40 | 2400 |


#+call: rgb-natural-raman(TAB=rgb-limits-raman-B-hires, SUFFIX="raman-B-hires")

#+RESULTS:
[[file:rgb-natural-raman-raman-B-hires.jpg]]

And try Lupton with hi-res images...

#+call: rgb-lupton-raman(TAB=rgb-limits-raman-R-hires, SUFFIX="raman-R-hires", STRETCH=0.5, Q=3)

#+RESULTS:
[[file:rgb-lupton-raman-raman-R-hires.jpg]]

#+call: rgb-lupton-raman(TAB=rgb-limits-raman-B-hires, SUFFIX="raman-B-hires", STRETCH=0.5, Q=3)

#+RESULTS:
[[file:rgb-lupton-raman-raman-B-hires.jpg]]


...nah, still ugly.  But maybe I should use them, since they are higher contrast



**** Finding charts for Raman extraction regions
+ One of [O I], [O II], [O III]
+ One of 13CO, IRAC1, Radio

#+name: rgb-limits-oi-oii-oiii
| linesum-O_I-6300-bin001.fits   |   8000 |   150000 |
| linesum-O_II-7318-bin001.fits  |  20000 |  1000000 |
| linesum-O_III-5007-bin001.fits | 200000 | 23000000 |

#+name: rgb-lupton-regions
#+header: :var TAB=rgb-limits-oi-oii-oiii SUFFIX="oi-oii-oiii" DATADIR="../data/orion-muse"
#+header: :var STRETCH=0.3 Q=4 STARS=star-coords HDU="SCALED"
#+begin_src python :results file :return figfile
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.visualization import make_lupton_rgb
  from astropy.io import fits
  from astropy.wcs import WCS
  import regions as rg


  # Unpack the channel info from the table
  [rf, r1, r2], [gf, g1, g2], [bf, b1, b2] = TAB

  def load_and_scale_image(fn, v1, v2, ihdu=HDU):
      data = fits.open(f"{DATADIR}/{fn}")[ihdu].data
      return (data - v1) / (v2 - v1)


  w = WCS(fits.open(f"{DATADIR}/{rf}")[HDU].header)

  image_r = load_and_scale_image(rf, r1, r2)
  image_g = load_and_scale_image(gf, g1, g2)
  image_b = load_and_scale_image(bf, b1, b2)
  image = make_lupton_rgb(image_r, image_g, image_b, stretch=STRETCH, Q=Q)
  figfile = f"rgb-lupton-regions-{SUFFIX}.jpg"
  fig, ax = plt.subplots(figsize=(6.2, 5), subplot_kw=dict(projection=w))
  ax.imshow(image)

  # Regions for estracting Raman profile
  regions = rg.read_ds9("../data/raman-extract-boxes.reg")
  for skyregion in regions:
      pixelregion = skyregion.to_pixel(w)
      pixelregion.plot(ax=ax, color="w", lw=1)

  # Regions for weak Raman profile
  regions = rg.read_ds9("../data/raman-faint2-boxes.reg")
  for skyregion in regions:
      pixelregion = skyregion.to_pixel(w)
      pixelregion.plot(ax=ax, color="w", lw=1, ls=":")

  # Regions for Dopita paper
  regions = rg.read_ds9("../data/raman-dopita-box.reg")
  for skyregion in regions:
      pixelregion = skyregion.to_pixel(w)
      pixelregion.plot(ax=ax, color="w", lw=0.8, ls="--")

  # Regions for Keck extraction
  regions = rg.read_ds9("../data/raman-keck-boxes.reg")
  for skyregion in regions:
      pixelregion = skyregion.to_pixel(w)
      pixelregion.plot(ax=ax, color="r", lw=0.7)


  for _, ra, dec, size in STARS:
      ax.scatter(ra, dec, transform=ax.get_transform("icrs"), s=0.6*size, ec="yellow", fc="none")
  ax.set(xlabel="RA (J2000)", ylabel="Dec (J2000)")
  fig.tight_layout(rect=[0.08, 0.07, 1.0, 1.0])
  fig.savefig(figfile, dpi=200)
#+end_src

#+RESULTS: rgb-lupton-regions
[[file:rgb-lupton-regions-oi-oii-oiii.jpg]]


Re-project the CO, etc all together

#+begin_src python :results silent
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  from reproject import reproject_interp

  datadir = "../data/orion-muse"

  hdu1 = fits.open("../../OrionMotions/DarkArc/radiotau-radec.fits")[0]
  hdu2 = fits.open("../../dust-wave-case-studies/data/Orion-Spitzer-SuperMosaic/40044081.40044081-89-short.IRAC.1.mosaic.fits")[0]
  hdu3 = fits.open("../../OrionMolecular/Carma-NRO-CO/dataverse_files/coldens13_tauinte.fits")[0]
  hdu3.data = hdu3.data[0, :, :]/1e17
  hdu3.header = WCS(hdu3.header).celestial.to_header()

  hdu1.writeto(f"{datadir}/radiotau-radec.fits", overwrite=True)

  newdata, _ = reproject_interp(hdu2, hdu1.header)
  fits.PrimaryHDU(header=hdu1.header, data=newdata).writeto(
      f"{datadir}/orion-irac-1.fits",
      overwrite=True
  )

  newdata, _ = reproject_interp(hdu3, hdu1.header)
  fits.PrimaryHDU(header=hdu1.header, data=newdata).writeto(
      f"{datadir}/orion-13co.fits",
      overwrite=True
  )
#+end_src

Do the same, but use the Robberto WFI image instead of radio, and reproject onto IRAC

#+begin_src python :results silent
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  from reproject import reproject_interp

  datadir = "../data/orion-muse"

  hdu1 = fits.open("../../dust-wave-case-studies/data/Orion-Spitzer-SuperMosaic/40044081.40044081-89-short.IRAC.1.mosaic.fits")[0]
  hdu2 = fits.open("../data/orion-muse/Orion_H_A_shallow.fits")[0]
  hdu3 = fits.open("../../OrionMolecular/Carma-NRO-CO/dataverse_files/coldens13_tauinte.fits")[0]
  hdu3.data = hdu3.data[0, :, :]/1e17
  hdu3.header = WCS(hdu3.header).celestial.to_header()

  hdu1.writeto(f"{datadir}/orion-spitzer-irac1-full.fits", overwrite=True)

  newdata, _ = reproject_interp(hdu2, hdu1.header)
  fits.PrimaryHDU(header=hdu1.header, data=newdata).writeto(
      f"{datadir}/orion-wfi-ha-reproject-irac1-full.fits",
      overwrite=True
  )

  newdata, _ = reproject_interp(hdu3, hdu1.header)
  fits.PrimaryHDU(header=hdu1.header, data=newdata).writeto(
      f"{datadir}/orion-13co-reproject-irac1-full.fits",
      overwrite=True
  )
#+end_src

#+name: rgb-limits-co-irac1-ha
| orion-13co-reproject-irac1-full.fits   | 0 |   30 |
| orion-spitzer-irac1-full.fits          | 0 | 1000 |
| orion-wfi-ha-reproject-irac1-full.fits | 0 |  500 |


#+name: rgb-lupton-large
#+header: :var TAB=rgb-limits-co-irac1-ha SUFFIX="co-irac1-ha" DATADIR="../data/orion-muse"
#+header: :var STRETCH=0.08 Q=10 HDU=0
#+header: :var X0=2322 Y0=1401 DX=3404 DY=2344
#+begin_src python :results file :return figfile
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.visualization import make_lupton_rgb
  from astropy.io import fits
  from astropy.wcs import WCS
  import regions as rg

  regions = rg.read_ds9("../data/muse-fov.reg")

  # Unpack the channel info from the table
  [rf, r1, r2], [gf, g1, g2], [bf, b1, b2] = TAB

  def load_and_scale_image(fn, v1, v2, ihdu=HDU):
      data = fits.open(f"{DATADIR}/{fn}")[ihdu].data
      return (data - v1) / (v2 - v1)


  w = WCS(fits.open(f"{DATADIR}/{rf}")[HDU].header)

  image_r = load_and_scale_image(rf, r1, r2)
  image_g = load_and_scale_image(gf, g1, g2)
  image_b = load_and_scale_image(bf, b1, b2)
  image = make_lupton_rgb(image_r, image_g, image_b, stretch=STRETCH, Q=Q)
  figfile = f"rgb-lupton-large-{SUFFIX}.jpg"
  fig, ax = plt.subplots(figsize=(7, 5), subplot_kw=dict(projection=w))
  ax.imshow(image)
  for skyregion in regions:
      pixelregion = skyregion.to_pixel(w)
      pixelregion.plot(ax=ax, color="w", lw=1)

  # for _, ra, dec, size in STARS:
  #     ax.scatter(ra, dec, transform=ax.get_transform("icrs"), s=0.6*size, ec="yellow", fc="none")

  # Window for plotting defined in large-fiv.reg
  x0, y0, dx, dy = X0, Y0, DX, DY

  ax.set(
      xlabel="RA (J2000)",
      ylabel="Dec (J2000)",
      xlim=[x0-dx/2, x0+dx/2],
      ylim=[y0-dy/2, y0+dy/2],
  )
  #fig.tight_layout()
  fig.savefig(figfile, dpi=400)
#+end_src

#+RESULTS: rgb-lupton-large
[[file:rgb-lupton-large-co-irac1-ha.jpg]]


#+call: rgb-lupton-large(SUFFIX="co-irac1-ha-tall", DX=3500, DY=3500)

#+RESULTS:
[[file:rgb-lupton-large-co-irac1-ha-tall.jpg]]


#+name: rgb-limits-oi-sii-nii
| final631-radec.fits |  15 |  250 |
| final673-radec.fits |  50 |  500 |
| final658-radec.fits | 100 | 1800 |

#+name: rgb-lupton-zoom
#+header: :var TAB=rgb-limits-oi-sii-nii SUFFIX="oi-sii-nii" DATADIR="../../../Work/BobPC/2002"
#+header: :var STRETCH=0.5 Q=2.5 HDU=0 STARS=star-coords
#+begin_src python :results file :return figfile
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.visualization import make_lupton_rgb
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy.convolution import convolve_fft, Gaussian2DKernel
  import regions as rg


  # Unpack the channel info from the table
  [rf, r1, r2], [gf, g1, g2], [bf, b1, b2] = TAB

  def load_and_scale_image(fn, v1, v2, ihdu=HDU):
      data = fits.open(f"{DATADIR}/{fn}")[ihdu].data
      return (data - v1) / (v2 - v1)


  w = WCS(fits.open(f"{DATADIR}/{rf}")[HDU].header)

  image_r = load_and_scale_image(rf, r1, r2)
  image_g = load_and_scale_image(gf, g1, g2)
  image_b = load_and_scale_image(bf, b1, b2)
  image = make_lupton_rgb(image_r, image_g, image_b, stretch=STRETCH, Q=Q)
  figfile = f"rgb-lupton-zoom-{SUFFIX}.jpg"
  fig, ax = plt.subplots(figsize=(7, 5), subplot_kw=dict(projection=w))
  ax.imshow(image)

  # Add contours of the Raman TOTAL image
  rhdu = fits.open("../data/orion-muse/muse-hr-data-ha-raman-TOTAL-multibin-1000.fits")["SCALED"]
  w2 = WCS(rhdu)
  # Mask out stars and smooth to 1 arcsec
  mask = rhdu.data > 10000
  rhdu.data[mask] = np.nan
  smooth_raman = convolve_fft(rhdu.data, Gaussian2DKernel(stddev=3))
  ax.contour(smooth_raman,
             transform=ax.get_transform(w2),
             levels=[4000, 5500], linewidths=[0.4, 1.0],
             colors="w",
  )

  regions = rg.read_ds9("../data/raman-keck-boxes.reg")
  for skyregion in regions:
      pixelregion = skyregion.to_pixel(w)
      pixelregion.plot(ax=ax, color="r", lw=1, zorder=100)

  # for _, ra, dec, size in STARS:
  #     ax.scatter(ra, dec, transform=ax.get_transform("icrs"), s=0.6*size, ec="yellow", fc="none")

  # Window for plotting defined in zoom-fov.reg
  x0, y0, dx, dy = 1677, 1482, 1469, 1111

  ax.set(
      xlabel="RA (J2000)",
      ylabel="Dec (J2000)",
      xlim=[x0-dx/2, x0+dx/2],
      ylim=[y0-dy/2, y0+dy/2],
  )
  #fig.tight_layout()
  fig.savefig(figfile, dpi=400)
#+end_src

#+RESULTS: rgb-lupton-zoom
[[file:rgb-lupton-zoom-oi-sii-nii.jpg]]

#+name: rgb-limits-nii-ha-oiii
| final658-radec.fits | 100 | 1800 |
| final656-radec.fits | 100 | 3000 |
| final502-radec.fits | 100 | 1000 |

#+call: rgb-lupton-zoom(TAB=rgb-limits-nii-ha-oiii, SUFFIX="nii-ha-oiii")

#+RESULTS:
[[file:rgb-lupton-zoom-nii-ha-oiii.jpg]]

**** Some more color figures


***** Velocity maps of H
:PROPERTIES:
:ID:       6104B4AF-6D51-4BA2-8F60-FCC6F92D762F
:END:
#+name: rgb-lupton-velchannels
#+header: :var TAB=rgb-limits-hi-line-center SUFFIX="hi-line-center" DATADIR="../data/orion-muse"
#+header: :var STRETCH=0.3 Q=4 STARS=star-coords HDU="DATA"
#+begin_src python :results file :return figfile
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.visualization import make_lupton_rgb
  from astropy.io import fits
  from astropy.wcs import WCS

  # Unpack the channel info from the table
  [rf, r1, r2], [gf, g1, g2], [bf, b1, b2] = TAB

  def load_and_scale_image(fn, v1, v2, ihdu=HDU):
      data = fits.open(f"{DATADIR}/{fn}")[ihdu].data
      return (data - v1) / (v2 - v1)


  w = WCS(fits.open(f"{DATADIR}/{rf}")[HDU]).celestial

  image_r = load_and_scale_image(rf, r1, r2)
  image_g = load_and_scale_image(gf, g1, g2)
  image_b = load_and_scale_image(bf, b1, b2)
  image = make_lupton_rgb(image_r, image_g, image_b, stretch=STRETCH, Q=Q)

  figfile = f"rgb-lupton-velchannels-{SUFFIX}.jpg"
  fig, ax = plt.subplots(figsize=(6.2, 5), subplot_kw=dict(projection=w))
  ax.imshow(image)
  for _, ra, dec, size in STARS:
      ax.scatter(ra, dec, transform=ax.get_transform("icrs"), s=0.6*size, ec="yellow", fc="none")
  ax.set(xlabel="RA (J2000)", ylabel="Dec (J2000)")
  fig.tight_layout(rect=[0.08, 0.07, 1.0, 1.0])
  fig.savefig(figfile, dpi=200)
#+end_src

#+RESULTS: rgb-lupton-velchannels
[[file:rgb-lupton-velchannels-hi-line-center.jpg]]

#+name: rgb-limits-hi-line-center
| hi-05x05-8751_50.fits | 0 | 1100000 |
| hi-05x05-8750_65.fits | 0 | 1100000 |
| hi-05x05-8749_80.fits | 0 |  800000 |

#+name: rgb-limits-hi-near-red
| hi-05x05-8752_35.fits | 0 |  400000 |
| hi-05x05-8751_50.fits | 0 |  800000 |
| hi-05x05-8750_65.fits | 0 | 1100000 |
#+call: rgb-lupton-velchannels(TAB=rgb-limits-hi-near-red, SUFFIX="hi-near-red", STRETCH=0.5, Q=3, HDU="DATA") 

#+RESULTS:
[[file:rgb-lupton-velchannels-hi-near-red.jpg]]


#+name: rgb-limits-hi-mid-red
| hi-05x05-8753_20.fits | 0 | 110000 |
| hi-05x05-8752_35.fits | 0 | 400000 |
| hi-05x05-8751_50.fits | 0 | 800000 |
#+call: rgb-lupton-velchannels(TAB=rgb-limits-hi-mid-red, SUFFIX="hi-mid-red", STRETCH=0.5, Q=3, HDU="DATA") 

#+RESULTS:
[[file:rgb-lupton-velchannels-hi-mid-red.jpg]]

#+name: rgb-limits-hi-far-red
| hi-05x05-8754_05.fits | 0 |  25000 |
| hi-05x05-8753_20.fits | 0 | 180000 |
| hi-05x05-8752_35.fits | 0 | 600000 |
#+call: rgb-lupton-velchannels(TAB=rgb-limits-hi-far-red, SUFFIX="hi-far-red", STRETCH=0.5, Q=3, HDU="DATA") 

#+RESULTS:
[[file:rgb-lupton-velchannels-hi-far-red.jpg]]


#+name: rgb-limits-hi-near-blue
| hi-05x05-8750_65.fits | 0 | 1100000 |
| hi-05x05-8749_80.fits | 0 |  800000 |
| hi-05x05-8748_95.fits | 0 |  300000 |

#+call: rgb-lupton-velchannels(TAB=rgb-limits-hi-near-blue, SUFFIX="hi-near-blue", STRETCH=0.5, Q=3, HDU="DATA") 

#+RESULTS:
[[file:rgb-lupton-velchannels-hi-near-blue.jpg]]

#+name: rgb-limits-hi-mid-blue
| hi-05x05-8749_80.fits | 0 | 800000 |
| hi-05x05-8748_95.fits | 0 | 300000 |
| hi-05x05-8748_10.fits | 0 | 100000 |

#+call: rgb-lupton-velchannels(TAB=rgb-limits-hi-mid-blue, SUFFIX="hi-mid-blue", STRETCH=0.5, Q=3, HDU="DATA") 

#+RESULTS:
[[file:rgb-lupton-velchannels-hi-mid-blue.jpg]]

#+name: rgb-limits-hi-far-blue
| hi-05x05-8748_95.fits | 0 | 300000 |
| hi-05x05-8748_10.fits | 0 | 100000 |
| hi-05x05-8747_25.fits | 0 |  30000 |

#+call: rgb-lupton-velchannels(TAB=rgb-limits-hi-far-blue, SUFFIX="hi-far-blue", STRETCH=0.5, Q=3, HDU="DATA") 

#+RESULTS:
[[file:rgb-lupton-velchannels-hi-far-blue.jpg]]

***** TODO [Fe II] 8617 
:PROPERTIES:
:ID:       97441E8F-68B9-4716-A4BE-8A4FA7028176
:END:
+ This line is sat on top of the second order H\beta line
+ [ ] But we can use a linear interpolation of the 8612.1 and 8621.45 channels to remove this
+ Leave it for another day
#+name: rgb-limits-feii-center
| feii-05x05-8618_05.fits | 0 | 200000 |
| feii-05x05-8617_20.fits | 0 | 200000 |
| feii-05x05-8616_35.fits | 0 | 100000 |

#+call: rgb-lupton-velchannels(TAB=rgb-limits-feii-center, SUFFIX="feii-center", STRETCH=0.5, Q=3, HDU="DATA") 

#+RESULTS:
[[file:rgb-lupton-velchannels-feii-center.jpg]]

#+name: rgb-limits-feii-near-blue
| feii-05x05-8617_20.fits | 0 | 200000 |
| feii-05x05-8616_35.fits | 0 | 100000 |
| feii-05x05-8615_50.fits | 0 |  60000 |

#+call: rgb-lupton-velchannels(TAB=rgb-limits-feii-near-blue, SUFFIX="feii-near-blue", STRETCH=0.5, Q=3, HDU="DATA") 

#+RESULTS:
[[file:rgb-lupton-velchannels-feii-near-blue.jpg]]

***** TODO Other lines to look at 
+ He II 6827 shows the inner arc nicely to red side but there must be better He II lines
+ N II 5941 and 5831 show nicely the Big Arc, but very weak
+ Unknown line at 5988 \AA
  + Take 5984.75 and 5990.7 as the base level
  + Add up from 5985.6 \to 5989.85 
***** DONE Maps of different extinction estimates
CLOSED: [2019-09-07 Sat 09:02]
First of all, we would need to put the radio tau map on the same WCS as the others
#+begin_src python :results silent
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import wcs
  from reproject import reproject_interp

  datadir = "../data/orion-muse"
  radiodir = "../../OrionDust"
  hdu1 = fits.open(f"{datadir}/C_H_beta-bin004.fits")["SCALED"]
  hdu2 = fits.open(f"{radiodir}/chbeta-radec.fits")[0]

  newdata, _ = reproject_interp(hdu2, hdu1.header)

  fits.PrimaryHDU(header=hdu1.header, data=newdata).writeto(
      f"{datadir}/C_H_beta_Radio.fits",
      overwrite=True,
  )
#+end_src

While we are at it, we can make difference maps

#+begin_src python :dir ../data/orion-muse :results silent
  from astropy.io import fits

  hdu_V = fits.open("C_H_beta-bin004.fits")["SCALED"]
  hdu_I = fits.open("C_H_beta_9229-bin004.fits")["SCALED"]
  hdu_R = fits.open("C_H_beta_Radio.fits")[0]

  fits.PrimaryHDU(
      header=hdu_V.header,
      data=hdu_I.data - hdu_V.data
  ).writeto("Delta_CHB_I-V.fits", overwrite=True)
  fits.PrimaryHDU(
      header=hdu_V.header,
      data=hdu_R.data - hdu_V.data
  ).writeto("Delta_CHB_R-V.fits", overwrite=True)
  fits.PrimaryHDU(
      header=hdu_V.header,
      data=hdu_R.data - hdu_I.data
  ).writeto("Delta_CHB_R-I.fits", overwrite=True)
#+end_src

Now, we can make a color image

#+name: rgb-limits-extinction
| Delta_CHB_R-I.fits   | -0.3 | 1.5 | sqrt   |
| C_H_beta-bin001.fits |    0 | 1.7 | linear |
| Delta_CHB_I-V.fits   | -0.1 | 0.8 | sqrt   |


#+name: rgb-lupton-extinction
#+header: :var TAB=rgb-limits-extinction  DATADIR="../data/orion-muse"
#+header: :var STARS=star-coords HDU="SCALED"
#+begin_src python :results file :return figfile
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.visualization import make_lupton_rgb
  from astropy.visualization.lupton_rgb import LinearMapping
  from astropy.io import fits
  from astropy.wcs import WCS

  # Unpack the channel info from the table
  [rf, r1, r2, rscale], [gf, g1, g2, gscale], [bf, b1, b2, bscale] = TAB

  def load_and_scale_image(fn, v1, v2, scale, ihdu=HDU):
      data = fits.open(f"{DATADIR}/{fn}")[ihdu].data
      im = (data - v1) / (v2 - v1)
      if "sqrt" in scale.lower():
          im = np.sqrt(im)
      return im


  w = WCS(fits.open(f"{DATADIR}/{rf}")[HDU]).celestial

  image_r = load_and_scale_image(rf, r1, r2, rscale)
  image_g = load_and_scale_image(gf, g1, g2, gscale)
  image_b = load_and_scale_image(bf, b1, b2, bscale)
  image = LinearMapping(0.0, 1.0).make_rgb_image(image_r, image_g, image_b)

  figfile = f"rgb-lupton-extinction.jpg"
  fig, ax = plt.subplots(figsize=(6.2, 5), subplot_kw=dict(projection=w))
  ax.imshow(image)
  for _, ra, dec, size in STARS:
      ax.scatter(ra, dec, transform=ax.get_transform("icrs"), s=0.6*size, ec="yellow", fc="none")
  ax.set(xlabel="RA (J2000)", ylabel="Dec (J2000)")
  fig.tight_layout(rect=[0.08, 0.07, 1.0, 1.0])
  fig.savefig(figfile, dpi=200)
#+end_src

#+RESULTS: rgb-lupton-extinction
[[file:rgb-lupton-extinction.jpg]]
***** DONE Spatial binning of the extinction anomalies
CLOSED: [2019-09-07 Sat 09:02]
This is a bit daft since some of them are already binned, but never mind

#+begin_src sh :results verbatim
  MULTIBIN=/Users/will/Dropbox/multibin-maps/multibin-map.py
  cd ../data/orion-muse
  for map in Delta_CHB_*.fits C_H_beta_Radio.fits; do
      python $MULTIBIN $map
  done
#+end_src

#+RESULTS:
#+begin_example
Saving Delta_CHB_I-V-bin001.fits
Saving Delta_CHB_I-V-bin002.fits
Saving Delta_CHB_I-V-bin004.fits
Saving Delta_CHB_I-V-bin008.fits
Saving Delta_CHB_I-V-bin016.fits
Saving Delta_CHB_I-V-bin032.fits
Saving Delta_CHB_I-V-bin064.fits
Saving Delta_CHB_I-V-bin128.fits
Saving Delta_CHB_I-V-bin256.fits
Saving Delta_CHB_R-I-bin001.fits
Saving Delta_CHB_R-I-bin002.fits
Saving Delta_CHB_R-I-bin004.fits
Saving Delta_CHB_R-I-bin008.fits
Saving Delta_CHB_R-I-bin016.fits
Saving Delta_CHB_R-I-bin032.fits
Saving Delta_CHB_R-I-bin064.fits
Saving Delta_CHB_R-I-bin128.fits
Saving Delta_CHB_R-I-bin256.fits
Saving Delta_CHB_R-V-bin001.fits
Saving Delta_CHB_R-V-bin002.fits
Saving Delta_CHB_R-V-bin004.fits
Saving Delta_CHB_R-V-bin008.fits
Saving Delta_CHB_R-V-bin016.fits
Saving Delta_CHB_R-V-bin032.fits
Saving Delta_CHB_R-V-bin064.fits
Saving Delta_CHB_R-V-bin128.fits
Saving Delta_CHB_R-V-bin256.fits
Saving C_H_beta_Radio-bin001.fits
Saving C_H_beta_Radio-bin002.fits
Saving C_H_beta_Radio-bin004.fits
Saving C_H_beta_Radio-bin008.fits
Saving C_H_beta_Radio-bin016.fits
Saving C_H_beta_Radio-bin032.fits
Saving C_H_beta_Radio-bin064.fits
Saving C_H_beta_Radio-bin128.fits
Saving C_H_beta_Radio-bin256.fits
#+end_example

***** DONE Histograms of extinction anomalies
CLOSED: [2019-09-07 Sat 09:02]
+ Compare Radio-infrared with Infrared-optical
+ These look like they need some spatial binning

#+name: extinct-anom-hist
#+header: :var SUFF="-bin001"
#+begin_src python :return figfile :results file
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns
  from astropy.io import fits


  datadir = "../data/orion-muse"

  R_I = fits.open(f"{datadir}/Delta_CHB_R-I{SUFF}.fits")["SCALED"].data
  I_V = fits.open(f"{datadir}/Delta_CHB_I-V{SUFF}.fits")["SCALED"].data
  CHB = fits.open(f"{datadir}/C_H_beta_Radio{SUFF}.fits")["SCALED"].data

  xmin, xmax = -0.5, 1.
  ymin, ymax = -0.5, 1.

  m = np.isfinite(R_I*I_V*CHB) & (R_I > xmin) & (R_I < xmax) & (I_V > ymin) & (I_V < ymax) 
  m = m & ~(R_I*I_V*CHB == 0.0)
  x, y, w = R_I[m], I_V[m], CHB[m] - CHB[m].min()

  H, xedges, yedges = np.histogram2d(x, y, 31,
                                     [[xmin, xmax], [ymin, ymax]],
                                     weights=w**2, density=True)

  figfile = f"orion-extinction-anomalies-histogram{SUFF}.pdf"
  gamma = 1.5
  fig, ax = plt.subplots(figsize=(6, 6))
  ax.imshow(H.T**(1.0/gamma), extent=[xmin, xmax, ymin, ymax],
            interpolation="nearest", aspect="auto",
            origin="lower", cmap="viridis",
  )
  ax.set(
      xlim=[xmin, xmax],
      ylim=[ymin, ymax],
      xlabel="Radio-infrared",
      ylabel="Infrared-optical",
  )
  ax.set_aspect("equal")

  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS: extinct-anom-hist
[[file:orion-extinction-anomalies-histogram-bin001.pdf]]

#+call: extinct-anom-hist("-bin008")

#+RESULTS:
[[file:orion-extinction-anomalies-histogram-bin008.pdf]]

#+call: extinct-anom-hist("-bin016")

#+RESULTS:
[[file:orion-extinction-anomalies-histogram-bin016.pdf]]

#+call: extinct-anom-hist("-bin032")

#+RESULTS:
[[file:orion-extinction-anomalies-histogram-bin032.pdf]]

***** DONE Scatter version of the same
CLOSED: [2019-09-07 Sat 09:03]
+ These are better than the histograms
+ bin032 is the best
+ Color and point size map to Radio-Ha C(H\beta)
#+name: extinct-anom-scat
#+header: :var SUFF="-bin032"
#+begin_src python :return figfile :results file
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns
  from astropy.io import fits


  datadir = "../data/orion-muse"

  R_I = fits.open(f"{datadir}/Delta_CHB_R-I{SUFF}.fits")["SCALED"].data
  I_V = fits.open(f"{datadir}/Delta_CHB_I-V{SUFF}.fits")["SCALED"].data
  CHB = fits.open(f"{datadir}/C_H_beta_Radio{SUFF}.fits")["SCALED"].data

  xmin, xmax = -0.4, 1.0
  ymin, ymax = -0.4, 0.6

  m = np.isfinite(R_I*I_V*CHB) & (R_I > xmin) & (R_I < xmax) & (I_V > ymin) & (I_V < ymax) 
  m = m & ~(R_I*I_V*CHB == 0.0)
  x, y, w = R_I[m], I_V[m], CHB[m] - CHB[m].min()

  # Get rid of repeated values
  x, y, w = np.unique(np.stack((x, y, w)), axis=-1)

  figfile = f"orion-extinction-anomalies-scatter{SUFF}.pdf"
  gamma = 1.5
  fig, ax = plt.subplots(figsize=(7, 5))
  ax.scatter(x, y, s=10*(0.5 + w**2), c=w**1.5, alpha=0.6, edgecolor="none", cmap="magma_r")
  ax.set(
      xlim=[xmin, xmax],
      ylim=[ymin, ymax],
      xlabel="Radio-infrared",
      ylabel="Infrared-optical",
  )
  ax.set_aspect("equal")

  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS: extinct-anom-scat
[[file:orion-extinction-anomalies-scatter-bin032.pdf]]

#+call: extinct-anom-scat("-bin016")

#+RESULTS:
[[file:orion-extinction-anomalies-scatter-bin016.jpg]]

#+call: extinct-anom-scat("-bin064")

#+RESULTS:
[[file:orion-extinction-anomalies-scatter-bin064.jpg]]

***** TODO [#A] More details of extinction anomalies
+ I wrote some notes in Craft
  + [[https://www.craft.do/s/9FOBe6rGJvhlzT][Public link to web page]]
  + [[shell:open 'craftdocs://open?spaceId=ebf58611-71d2-f72d-500b-350bfc7b0451&blockId=EBF46FD9-2552-4A81-BEE4-D7F7D3876829'][Inline source to open Craft with document on local machine:]]

**** Figure to compare Raman, [O I], and CO

#+name: compare-oi-co-raman
#+header: :var STARS=star-coords
#+begin_src python :return figfile :results file
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy.convolution import convolve_fft, Gaussian2DKernel

  figfile = "raman-with-co-oi-contours.jpg"
  datapath = "../data/orion-muse"
  hdu = fits.open(f"{datapath}/muse-hr-data-ha-raman-TOTAL-multibin-1000.fits")["SCALED"]
  w = WCS(hdu.header)

  COpath = "../../OrionMolecular/Carma-NRO-CO/dataverse_files"
  hdu_redCO = fits.open(f"{COpath}/mom0_48_57_12co_pix_2_Tmb.fits")[0]
  hdu_greenCO = fits.open(f"{COpath}/mom0_38_47_12co_pix_2_Tmb.fits")[0]
  hdu_blueCO = fits.open(f"{COpath}/mom0_28_37_12co_pix_2_Tmb.fits")[0]
  w_CO = WCS(hdu_greenCO).celestial
  levels_CO = [300, 350, 400, 450]
  hdu_OI = fits.open(f"{datapath}/linesum-O_I-6300-bin001.fits")["SCALED"]
  smooth_OI = convolve_fft(hdu_OI.data, Gaussian2DKernel(stddev=5))
  w_OI = WCS(hdu_OI)
  levels_OI = [5e4, 1e5]

  fig, ax = plt.subplots(figsize=(6.2, 5), subplot_kw=dict(projection=w))
  # ax.imshow(hdu.data, vmin=1200, vmax=5000, origin="lower", cmap="viridis")
  ax.imshow(hdu.data, vmin=0, vmax=8000, origin="lower", cmap="viridis")
  ax.contour(hdu_redCO.data[0, :, :],
             levels=levels_CO, linewidths=[0.5, 1.0, 1.5, 2.0],
             transform=ax.get_transform(w_CO),
             colors="red")
  ax.contour(hdu_greenCO.data[0, :, :],
             levels=levels_CO, linewidths=[0.3, 0.6, 0.9, 1.2],
             transform=ax.get_transform(w_CO),
             colors="magenta")
  ax.contour(hdu_blueCO.data[0, :, :],
             levels=[250] + levels_CO[:-1], linewidths=[0.3, 0.6, 0.9, 1.2],
             transform=ax.get_transform(w_CO),
             colors="cyan")
  ax.contour(smooth_OI,
             levels=levels_OI,  linewidths=[0.5, 1.0],
  #           transform=ax.get_transform(w_OI),
             colors="orange")
  for _, ra, dec, size in STARS:
      ax.scatter(ra, dec, transform=ax.get_transform("icrs"), s=0.6*size, ec="white", fc="none")
  ny, nx = hdu.data.shape
  fig.tight_layout(rect=[0.08, 0.07, 1.0, 1.0])
  fig.savefig(figfile, dpi=200)
#+end_src

#+RESULTS: compare-oi-co-raman
[[file:raman-with-co-oi-contours.jpg]]


**** Do the profile cuts of Bar and Orion S
+ This will be fun
  + We can make a "Sky Offset" frame, centered about a point in the bar and with a rotation so that ~lon~ is along the bar and ~lat~ is perpendicular


#+begin_src python :eval no :tangle ../src/bar-profile.py
  import json
  import sys
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy.coordinates import SkyCoord
  import astropy.units as u
  from matplotlib import pyplot as plt
  import seaborn as sns
  import statsmodels.api as sm

  try:
      INFILE, DATAPATH = sys.argv[1], sys.argv[2]
      HDU, NBLOCK, NORM = sys.argv[3], int(sys.argv[4]), sys.argv[5]
  except:
      sys.exit(f"Usage: {sys.argv[0]} INFILE DATAPATH HDU NBLOCK NORM (not {sys.argv[1:]})")

  try:
      HDU = int(HDU)
  except:
      pass

  # Origin of Bar offset frame
  c0 = SkyCoord(83.8418691, -5.4113246, unit=(u.deg, u.deg))
  # Position angle perp to Bar (away from Trapezium)
  PA = 141.5*u.deg
  bar_frame = c0.skyoffset_frame(rotation=PA)

  hdu = fits.open(f"{DATAPATH}/{INFILE}")[HDU]
  w = WCS(hdu).celestial

  # Make sure we have 2d image, not 3d cube
  if len(hdu.data.shape) == 3:
      hdu.data = hdu.data[0, :, :]

  # Find coordinates of all pixels in image
  ny, nx = hdu.data.shape
  xpix, ypix = np.meshgrid(np.arange(nx), np.arange(ny))
  c = w.pixel_to_world(xpix, ypix)

  # Transform to the Bar offset frame (lon is along bar, lat is perpendicular)
  cb = c.transform_to(bar_frame)

  # Take a 75 arcsec section of bar
  mask = np.abs(cb.lon) < (75.0/2.0)*u.arcsec

  # For the PDR lines, we restrict to the SW end
  # if "H2-" in INFILE or "C_I" in INFILE or "CO137" in INFILE:
  if "H2-" in INFILE or "C_I" in INFILE:
      mask = (cb.lon > 7*u.arcsec) & (cb.lon < 60*u.arcsec)

  # And +/- 1 arcmin in perp direction
  mask = mask & (np.abs(cb.lat) < 1.0*u.arcmin)


  # offset in arcseconds perp to bar
  x = cb[mask].lat.to(u.arcsec).value
  # and parallel
  y = cb[mask].lon.to(u.arcsec).value
  # brightness
  s = hdu.data[mask]

  # Sort them all by x
  indices = np.argsort(x)
  x = x[indices]
  y = y[indices]
  s = s[indices]

  # scale by median by default
  if "median" in NORM.lower():
      s /= np.nanmedian(s)

  # Calculate blockwise medians
  nblock = NBLOCK
  # Discard any extra points off the end
  n = nblock*(len(x) // nblock)
  xm = np.nanmedian(x[:n].reshape((-1, nblock)), axis=-1)
  sm = np.nanmedian(s[:n].reshape((-1, nblock)), axis=-1)

  jsonfile = INFILE.replace(".fits", "-bar-profile.json")
  with open(jsonfile, "w") as f:
      json.dump(
          {"offset": list(xm.astype(float)), "brightness": list(sm.astype(float))},
          f, indent=3)

  # Plot s(x)
  figfile = INFILE.replace(".fits", "-bar-profile.jpg")
  fig, ax = plt.subplots()
  ax.scatter(x, s, s=3.0, c=y,
             alpha=0.3, marker=".", edgecolors="none", cmap="cool",
  )
  ax.plot(xm, sm, '-', color="k")
  ax.set(
      xlabel="Offset, arcsec",
      yscale="linear",
      ylim=[0.0, 2.0*np.nanmax(sm)],
  )
  ax.set_xscale("symlog", linthreshx=10, linscalex=0.5, subsx=[2, 3, 4, 5, 6, 7, 8, 9])
  sns.despine()
  fig.savefig(figfile, dpi=600)

  print(figfile, end="")

#+end_src

#+name: bar-profile
#+header: :var INFILE="linesum-O_I-6300-bin001.fits"
#+header: :var DATAPATH="../data/orion-muse" HDU="SCALED" NBLOCK=500 NORM="median"
#+begin_src sh :results file
python ../src/bar-profile.py $INFILE $DATAPATH $HDU $NBLOCK $NORM
#+end_src


#+call: bar-profile(INFILE="linesum-O_I-6300-bin001.fits", NORM="no")

#+RESULTS:
[[file:linesum-O_I-6300-bin001-bar-profile.jpg]]

#+RESULTS: bar-profile
[[file:linesum-O_I-6300-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="linesum-blue-C_I-8727-multibin-500.fits", NBLOCK=200)

#+RESULTS:
[[file:linesum-blue-C_I-8727-multibin-500-bar-profile.jpg]]

#+call: bar-profile(INFILE="linesum-blue-C_I-8727-bin008.fits")

#+RESULTS:
[[file:linesum-blue-C_I-8727-bin008-bar-profile.jpg]]



#+call: bar-profile(INFILE="linesum-O_I-8446-bin001.fits", NORM="NO")

#+RESULTS:
[[file:linesum-O_I-8446-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="linesum-O_II-7318-bin001.fits", NORM="no")

#+RESULTS:
[[file:linesum-O_II-7318-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="linesum-O_III-5007-bin001.fits", NORM="no")

#+RESULTS:
[[file:linesum-O_III-5007-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-data-ha-raman-TOTAL-multibin-1000.fits")

#+RESULTS:
[[file:muse-hr-data-ha-raman-TOTAL-multibin-1000-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-data-ha-raman-R040-cont-sub-multibin-1000.fits", NORM="no")

#+RESULTS:
[[file:muse-hr-data-ha-raman-R040-cont-sub-multibin-1000-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-data-ha-raman-R058-cont-sub-multibin-1000.fits", NORM="no")

#+RESULTS:
[[file:muse-hr-data-ha-raman-R058-cont-sub-multibin-1000-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-data-ha-raman-R087-cont-sub-multibin-1000.fits", NORM="no")

#+RESULTS:
[[file:muse-hr-data-ha-raman-R087-cont-sub-multibin-1000-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-data-ha-raman-R136-cont-sub-multibin-1000.fits", NORM="no")

#+RESULTS:
[[file:muse-hr-data-ha-raman-R136-cont-sub-multibin-1000-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-data-ha-raman-B033-cont-sub-multibin-1000.fits", NORM="no")

#+RESULTS:
[[file:muse-hr-data-ha-raman-B033-cont-sub-multibin-1000-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-data-ha-raman-B054-cont-sub-multibin-1000.fits", NORM="no")

#+RESULTS:
[[file:muse-hr-data-ha-raman-B054-cont-sub-multibin-1000-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-data-ha-raman-B080-cont-sub-multibin-1000.fits", NORM="no")

#+RESULTS:
[[file:muse-hr-data-ha-raman-B080-cont-sub-multibin-1000-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-data-ha-raman-B133-cont-sub-multibin-1000.fits", NORM="no")

#+RESULTS:
[[file:muse-hr-data-ha-raman-B133-cont-sub-multibin-1000-bar-profile.jpg]]

#+call: bar-profile(INFILE="continuum-N_III-6634-bin001.fits")

#+RESULTS:
[[file:continuum-N_III-6634-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="linesum-H_I-9229-bin001.fits")

#+RESULTS:
[[file:linesum-H_I-9229-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="linesum-He_I-6678-bin001.fits")

#+RESULTS:
[[file:linesum-He_I-6678-bin001-bar-profile.jpg]]


#+call: bar-profile(INFILE="linesum-Ar_III-7136-bin001.fits")

#+RESULTS:
[[file:linesum-Ar_III-7136-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="linesum-S_III-9069-bin001.fits")

#+RESULTS:
[[file:linesum-S_III-9069-bin001-bar-profile.jpg]]

#+call: bar-profile(DATAPATH="../../OrionMolecular/Carma-NRO-CO/dataverse_files", INFILE="mom0_48_57_12co_pix_2_Tmb.fits", HDU=0, NBLOCK=30)

#+RESULTS:
[[file:mom0_48_57_12co_pix_2_Tmb-bar-profile.jpg]]

#+call: bar-profile(DATAPATH="../../OrionMolecular/Carma-NRO-CO/dataverse_files", INFILE="mom0_87_109_13co_pix_2_Tmb.fits", HDU=0, NBLOCK=30)

#+RESULTS:
[[file:mom0_87_109_13co_pix_2_Tmb-bar-profile.jpg]]

What is wrong with these IRAC images that we get so many NaNs in the profiles? /Answer:/ they were the wrong files - sorted now.

#+call: bar-profile(DATAPATH="../data/orion-hawki", INFILE="Orion-Bar-H2-minus-060-Brg.fits", HDU=1, NBLOCK=1000)

#+RESULTS:
[[file:Orion-Bar-H2-minus-060-Brg-bar-profile.jpg]]

#+call: bar-profile(DATAPATH="../../dust-wave-case-studies/data/Orion-Spitzer-SuperMosaic", INFILE="40044081.40044081-89-short.IRAC.1.mosaic.fits", HDU=0, NBLOCK=100, NORM="no")

#+RESULTS:
[[file:40044081.40044081-89-short.IRAC.1.mosaic-bar-profile.jpg]]

#+call: bar-profile(DATAPATH="../../dust-wave-case-studies/data/Orion-Spitzer-SuperMosaic", INFILE="40044081.40044081-89-short.IRAC.4.mosaic.fits", HDU=0, NBLOCK=100, NORM="no")

#+RESULTS:
[[file:40044081.40044081-89-short.IRAC.4.mosaic-bar-profile.jpg]]

#+call: bar-profile(DATAPATH="../../dust-wave-case-studies/data/Orion-Spitzer-SuperMosaic", INFILE="40044081.40044081-89-short.IRAC.2.mosaic.fits", HDU=0, NBLOCK=100, NORM="no")

#+RESULTS:
[[file:40044081.40044081-89-short.IRAC.2.mosaic-bar-profile.jpg]]

#+call: bar-profile(DATAPATH="../../dust-wave-case-studies/data/Orion-Spitzer-SuperMosaic", INFILE="40044081.40044081-89-short.IRAC.3.mosaic.fits", HDU=0, NBLOCK=100, NORM="no")

#+RESULTS:
[[file:40044081.40044081-89-short.IRAC.3.mosaic-bar-profile.jpg]]

#+call: bar-profile(DATAPATH="../../OrionMolecular/Parikka-HighJ-CO/fits", INFILE="map_CO137_pacsman.fits", HDU=0, NBLOCK=8)

#+RESULTS:
[[file:map_CO137_pacsman-bar-profile.jpg]]



#+call: bar-profile(INFILE="muse-derived-Ne-multibin-SN0003.fits", NORM="no")

#+RESULTS:
[[file:muse-derived-Ne-multibin-SN0003-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-derived-Ne-iii-multibin-SN0003.fits", NORM="no")

#+RESULTS:
[[file:muse-derived-Ne-iii-multibin-SN0003-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-derived-Te-multibin-SN0003.fits", NORM="no")

#+RESULTS:
[[file:muse-derived-Te-multibin-SN0003-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-derived-Te-iii-multibin-SN0003.fits", NORM="no")

#+RESULTS:
[[file:muse-derived-Te-iii-multibin-SN0003-bar-profile.jpg]]


***** Herschel line maps
#+call: bar-profile(INFILE="herschel-bar-oi-63mic-line.fits", NORM="no", HDU=0, NBLOCK=16)

#+RESULTS:
[[file:herschel-bar-oi-63mic-line-bar-profile.jpg]]

#+call: bar-profile(INFILE="herschel-bar-oi-63mic-cont.fits", NORM="no", HDU=0, NBLOCK=16)

#+RESULTS:
[[file:herschel-bar-oi-63mic-cont-bar-profile.jpg]]

#+call: bar-profile(INFILE="herschel-bar-oi-63mic-ew.fits", NORM="NO", HDU=0, NBLOCK=32)

#+RESULTS:
[[file:herschel-bar-oi-63mic-ew-bar-profile.jpg]]

#+call: bar-profile(INFILE="herschel-bar-oi-146mic-line.fits", NORM="no", HDU=0, NBLOCK=32)

#+RESULTS:
[[file:herschel-bar-oi-146mic-line-bar-profile.jpg]]

#+call: bar-profile(INFILE="herschel-bar-oi-146mic-cont.fits", NORM="no", HDU=0, NBLOCK=32)

#+RESULTS:
[[file:herschel-bar-oi-146mic-cont-bar-profile.jpg]]

#+call: bar-profile(INFILE="herschel-bar-co-145mic-line.fits", NORM="no", HDU=0, NBLOCK=32)

#+RESULTS:
[[file:herschel-bar-co-145mic-line-bar-profile.jpg]]

#+call: bar-profile(INFILE="herschel-bar-nii-122mic-line.fits", NORM="no", HDU=0, NBLOCK=64)

#+RESULTS:
[[file:herschel-bar-nii-122mic-line-bar-profile.jpg]]

#+call: bar-profile(INFILE="herschel-bar-cii-158mic-line.fits", NORM="no", HDU=0, NBLOCK=32)

#+RESULTS:
[[file:herschel-bar-cii-158mic-line-bar-profile.jpg]]

**** Combined plot of all the Bar profiles

+ Raman wing brightness units
  + Original MUSE data is in 10**(-20)*erg/s/cm**2/Angstrom
    + This is presumably per pixel, which are 5.55555555555556E-05 rad = 0.2 arcsec
  + So each pixel is 3.08641975309e-9 sr, so units are 3.24e-12 erg s^{-1} cm^{-2} sr^{-1} \AA^{-1}
  + In extract-raman-bands.py, we take the mean not the sum
  + So these are still the units
  + We can divide by 324 and have it in 1e-10 erg s^{-1} cm^{-2} sr^{-1} \AA^{-1}
  + Multiply by 3.24e-12 => units of erg s^{-1} cm^{-2} sr^{-1} \AA^{-1}
+ We can apply the same to the brightness in the maps
  + Done in [[id:9B0BB7D0-1CFB-4129-A918-B4A7CB085941][Make figures of maps]] (the high resolution ones)
  + The max values are 700, 1200, 2400
  + [2.268e-9, 3.888e-9, 7.776e-9] erg s^{-1} cm^{-2} sr^{-1} \AA^{-1}
#+begin_src python :return figfile :results file
  import json
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns

  #sns.set_color_codes("bright")

  PC_PER_ARCSEC = 1.9e-3

  def load_data(jsonfile):
      "Returns offset(mpc) and brightness"
      data = json.load(open(jsonfile))
      return 1000*np.array(data["offset"])*PC_PER_ARCSEC, np.array(data["brightness"])


  def xmap(x, scale_pc=0.1):
      """Map parsecs to scaled asinh"""
      return np.arcsinh(x/scale_pc)

  figfile = "raman-bar-multi-profile.pdf"
  fig, [ax2, ax] = plt.subplots(2, 1, figsize=(8, 6), sharex=True)

  emlines = [
      ["O_III-5007", 7, 2.2, 0.5, r"[O III] $\lambda 5007$"], 
      ["O_II-7318",  2.5, 1.3, 0.7, r"[O II] $\lambda 7318$"], 
      ["O_I-6300",   1.0, 1.0, 0.9, r"[O I] $\lambda 6300$"], 
      ["O_I-8446",   0.0, 1.0, 1.1, r"O I $\lambda 8446$"], 
  ]

  raman_bands = [
      ["B033", "R040", 0.6, "b", "m", 36],
      ["B054", "R058", 0.4, "b", "m", 56],
      ["B080", "R087", 0.4, "c", "r", 83],
      ["B133", "R136", 0.2, "c", "r", 134],
  ]

  molecules = [
      ["mom0_87_109_13co_pix_2_Tmb", 0.0, 5.5, 1.0, "$^{13}$CO (1-0)"],
      ["mom0_48_57_12co_pix_2_Tmb", 0.0, 4.0, 1.5, "$^{12}$CO (1-0)"],
      ["linesum-blue-C_I-8727-multibin-500", 0.0, 4.0, 2, r"[C I] $\lambda 8727$"],
      ["map_CO137_pacsman", 0.0, 0.65, 2.5, "$^{12}$CO (19-18)"],
      ["Orion-Bar-H2-minus-060-Brg", -12.7, 13.0, 3.0, r"H$_{2}$ 2.12$\,\mu$m"],
  ]

  infrared = [
      ["IRAC.1", 0.038, "$3.6\, \mu$m"],
      ["IRAC.3", 0.0044, "$5.8\, \mu$m"],
      ["IRAC.4", 0.001, "$8.0\, \mu$m"],
  ]

  whitebox = dict(facecolor="white", edgecolor="none", boxstyle="round,pad=0.2")
  for lineid, offset, scale, lw, label in emlines:
      x, y = load_data(f"linesum-{lineid}-bin001-bar-profile.json")
      m = x < 30
      y /= np.median(y)
      ax.plot(x[m], scale*y[m] + offset, color="k", lw=lw)
      # x0 = -40 - 5*offset
      x0 = -60
      i0 = np.sum(x < x0)
      y0 = y[i0]
      ax.text(x0, scale*y0 + offset,
              f"{offset:.1f} + {label}",
              bbox=whitebox, ha="center", va="center", fontsize="small")
  ax.text(x0, 15.0, "H II region emission lines", ha="center", fontsize="small")

  for bandid, scale, label in infrared:
      x, y = load_data(f"40044081.40044081-89-short.{bandid}.mosaic-bar-profile.json")
      m = x > -10
      # y /= np.median(y)
      ax.fill_between(x[m], y[m]*scale, color="k", alpha=0.07, zorder=-100)
      x0 = 3
      i0 = np.sum(x < x0)
      y0 = y[i0]
      ax.text(x0+2, 0.97*scale*y0,
              f"{label}",
              bbox=whitebox, ha="right", va="top", fontsize="small")
  ax.text(10, 15.0, "IR continuum", ha="center", bbox=whitebox, fontsize="small")

  for lineid, offset, scale, lw, label in molecules:
      x, y = load_data(f"{lineid}-bar-profile.json")
      m = x > 10
      y /= np.median(y)
      ax.plot(x[m], y[m]*scale + offset, color="k", lw=lw, alpha=0.3)
      x0 = 60
      i0 = np.sum(x < x0)
      y0 = y[i0]
      ax.text(x0, scale*y0 + offset,
              f"{label}",
              bbox=whitebox, ha="center", va="center", fontsize="small")
  ax.text(x0, 15.0, "PDR emission lines", bbox=whitebox, ha="center", fontsize="small")


  raman_fmt = "muse-hr-data-ha-raman-{}-cont-sub-multibin-1000-bar-profile.json"
  for blue, red, alpha, cb, cr, wav in raman_bands:
      xb, yb = load_data(raman_fmt.format(blue)) 
      xr, yr = load_data(raman_fmt.format(red))
      # Put in units of 1e-9 erg/s/cm2/sr/AA
      yb *= 3.24e-12 / 1e-9
      yr *= 3.24e-12 / 1e-9
      ax2.plot(xb, yb, color=cb, alpha=alpha, lw=2)
      ax2.plot(xr, yr, color=cr, alpha=alpha, lw=2)
      x0 = -40
      i0 = np.sum(xb < x0)
      y0 = (yb[i0] + yr[i0])/2
      ax2.text(x0, y0,
               fr"$\Delta\lambda \approx \pm{wav}$ Å",
               bbox=whitebox, ha="center", va="center", fontsize="small")
      xtext = -75
      ytext = np.interp([xtext], xb, yb)[0]
      ax2.text(xtext, ytext, blue, color=cb, alpha=np.sqrt(alpha),
               bbox=whitebox, ha="center", va="center", fontsize="small")
      xtext = -90
      ytext = np.interp([xtext], xr, yr)[0]
      ax2.text(xtext, ytext, red, color=cr, alpha=np.sqrt(alpha),
               bbox=whitebox, ha="center", va="center", fontsize="small")

  ax2.text(-40.0, 1.1, "Raman wings", ha="center", fontsize="small")

  ax.text(-50, 16.5, "IONIZED", ha="center")
  ax.text(15, 16.5, "NEUTRAL", ha="center")
  ax.text(50, 16.5, "MOLECULAR", ha="center")

  ax.axvline(ls=":")
  ax2.axvline(ls=":")
  ax.set(
      xlim=[95, -95],
      ylim=[0, None],
      #yscale="log",
      xlabel="Depth into Bar: $x$, $10^{-3}$ pc",
      ylabel="Constant + Intensity (arbitrary units)",
  )
  ax.minorticks_on()
  ax2.set(
      ylim=[0, None],
      ylabel="Mean band intensity,\n$10^{-9}$ erg s$^{-1}$ cm$^{-2}$ sr$^{-1}$ Å$^{-1}$"
  )
  sns.despine()
  fig.tight_layout(h_pad=0.0)
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:raman-bar-multi-profile.pdf]]


**** New version with Herschel data too
#+begin_src python :return figfile :results file
  import json
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns

  #sns.set_color_codes("bright")

  PC_PER_ARCSEC = 1.9e-3

  def load_data(jsonfile):
      "Returns offset(mpc) and brightness"
      data = json.load(open(jsonfile))
      return 1000*np.array(data["offset"])*PC_PER_ARCSEC, np.array(data["brightness"])


  def xmap(x, scale_pc=0.1):
      """Map parsecs to scaled asinh"""
      return np.arcsinh(x/scale_pc)

  figfile = "raman-bar-multi-profile-3-panel.pdf"
  fig, [ax2, axH, ax] = plt.subplots(3, 1, figsize=(8, 8), sharex=True)

  emlines = [
      ["O_III-5007", 7, 2.2, 0.5, r"[O III] $\lambda 5007$"], 
      ["O_II-7318",  2.5, 1.3, 0.7, r"[O II] $\lambda 7318$"], 
      ["O_I-6300",   1.0, 1.0, 0.9, r"[O I] $\lambda 6300$"], 
      ["O_I-8446",   0.0, 1.0, 1.1, r"O I $\lambda 8446$"], 
  ]

  raman_bands = [
      ["B033", "R040", 0.6, "b", "m", 36],
      ["B054", "R058", 0.4, "b", "m", 56],
      ["B080", "R087", 0.4, "c", "r", 83],
      ["B133", "R136", 0.2, "c", "r", 134],
  ]

  molecules = [
      ["mom0_87_109_13co_pix_2_Tmb", 0.0, 5.5, 1.0, "$^{13}$CO (1-0)"],
      ["mom0_48_57_12co_pix_2_Tmb", 0.0, 4.0, 1.5, "$^{12}$CO (1-0)"],
      ["linesum-blue-C_I-8727-multibin-500", 0.0, 4.0, 2, r"[C I] $\lambda 8727$"],
      ["map_CO137_pacsman", 0.0, 0.65, 2.5, "$^{12}$CO (19-18)"],
      ["Orion-Bar-H2-minus-060-Brg", -12.7, 13.0, 3.0, r"H$_{2}$ 2.12$\,\mu$m"],
  ]

  infrared = [
      ["IRAC.1", 0.038, "$3.6\, \mu$m"],
      ["IRAC.3", 0.0044, "$5.8\, \mu$m"],
      ["IRAC.4", 0.001, "$8.0\, \mu$m"],
  ]

  herschel_lines = [
      ["nii-122mic", 1.3, -100, 50, -50, 0.7, 1.0, "[N II] $122\,\mu$m"],
      ["oi-146mic", 4.0, -10, 100, 60, 1.0, 0.3, "[O I] $146\,\mu$m"],
      ["oi-63mic", 3.7, -10, 100, 50, 1.5, 0.3, "[O I] $63\,\mu$m"],
      ["cii-158mic", 3.5, -10, 100, 60, 2.0, 0.3, "[C II] $158\,\mu$m"],
      ["co-145mic", 0.5, 10, 100, 60, 2.5, 0.3, "$^{12}$CO (18-17) $145\,\mu$m"],
  ]

  herschel_cont = [
      ["oi-146mic", 3.4, "$150\,\mu$m"],
      ["oi-63mic", 5.0, "$60\,\mu$m"],
  ]

  whitebox = dict(facecolor="white", edgecolor="none", boxstyle="round,pad=0.2")
  for lineid, offset, scale, lw, label in emlines:
      x, y = load_data(f"linesum-{lineid}-bin001-bar-profile.json")
      m = x < 30
      y /= np.median(y)
      ax.plot(x[m], scale*y[m] + offset, color="k", lw=lw)
      # x0 = -40 - 5*offset
      x0 = -60
      i0 = np.sum(x < x0)
      y0 = y[i0]
      ax.text(x0, scale*y0 + offset,
              f"{offset:.1f} + {label}",
              bbox=whitebox, ha="center", va="center", fontsize="small")
  ax.text(x0, 15.0, "H II region emission lines", ha="center", fontsize="small")

  for bandid, scale, label in infrared:
      x, y = load_data(f"40044081.40044081-89-short.{bandid}.mosaic-bar-profile.json")
      m = x > -10
      # y /= np.median(y)
      ax.fill_between(x[m], y[m]*scale, color="k", alpha=0.07, zorder=-100)
      x0 = 3
      i0 = np.sum(x < x0)
      y0 = y[i0]
      ax.text(x0+2, 0.97*scale*y0,
              f"{label}",
              bbox=whitebox, ha="right", va="top", fontsize="small")
  ax.text(10, 15.0, "MIR continuum", ha="center", bbox=whitebox, fontsize="small")

  for bandid, scale, label in herschel_cont:
      x, y = load_data(f"herschel-bar-{bandid}-cont-bar-profile.json")
      m = x > -10
      # y /= np.median(y)
      axH.fill_between(x[m], y[m]*scale, color="k", alpha=0.07, zorder=-100)
      x0 = 15
      i0 = np.sum(x < x0)
      y0 = y[i0]
      axH.text(x0, 0.75*scale*y0,
              f"{label}",
              bbox=whitebox, ha="center", va="top", fontsize="small")
  axH.text(15, 14.0, "FIR continuum", ha="center", bbox=whitebox, fontsize="small")

  offset = 0.0
  for lineid, scale, x1, x2, x0, lw, alpha, label in herschel_lines:
      x, y = load_data(f"herschel-bar-{lineid}-line-bar-profile.json")
      m = (x1 < x) & (x < x2)
      y /= np.median(y)
      axH.plot(x[m], y[m]*scale + offset, color="k", lw=lw, alpha=alpha)
      i0 = np.sum(x < x0)
      y0 = y[i0]
      axH.text(x0, scale*y0 + offset,
              f"{label}",
              bbox=whitebox, ha="center", va="center", fontsize="small")
  axH.text(x0, 14, "FIR emission lines", bbox=whitebox, ha="center", fontsize="small")

  for lineid, offset, scale, lw, label in molecules:
      x, y = load_data(f"{lineid}-bar-profile.json")
      m = x > 10
      y /= np.median(y)
      ax.plot(x[m], y[m]*scale + offset, color="k", lw=lw, alpha=0.3)
      x0 = 60
      i0 = np.sum(x < x0)
      y0 = y[i0]
      ax.text(x0, scale*y0 + offset,
              f"{label}",
              bbox=whitebox, ha="center", va="center", fontsize="small")
  ax.text(x0, 15.0, "PDR emission lines", bbox=whitebox, ha="center", fontsize="small")


  raman_fmt = "muse-hr-data-ha-raman-{}-cont-sub-multibin-1000-bar-profile.json"
  for blue, red, alpha, cb, cr, wav in raman_bands:
      xb, yb = load_data(raman_fmt.format(blue)) 
      xr, yr = load_data(raman_fmt.format(red))
      # Put in units of 1e-9 erg/s/cm2/sr/AA
      yb *= 3.24e-12 / 1e-9
      yr *= 3.24e-12 / 1e-9
      ax2.plot(xb, yb, color=cb, alpha=alpha, lw=2)
      ax2.plot(xr, yr, color=cr, alpha=alpha, lw=2)
      x0 = -40
      i0 = np.sum(xb < x0)
      y0 = (yb[i0] + yr[i0])/2
      ax2.text(x0, y0,
               fr"$\Delta\lambda \approx \pm{wav}$ Å",
               bbox=whitebox, ha="center", va="center", fontsize="small")
      xtext = -75
      ytext = np.interp([xtext], xb, yb)[0]
      ax2.text(xtext, ytext, blue, color=cb, alpha=np.sqrt(alpha),
               bbox=whitebox, ha="center", va="center", fontsize="small")
      xtext = -90
      ytext = np.interp([xtext], xr, yr)[0]
      ax2.text(xtext, ytext, red, color=cr, alpha=np.sqrt(alpha),
               bbox=whitebox, ha="center", va="center", fontsize="small")

  ax2.text(-40.0, 1.1, r"H$\alpha$ Raman wings", ha="center", fontsize="small")

  ax.text(-50, 16.5, "IONIZED", ha="center")
  ax.text(15, 16.5, "NEUTRAL", ha="center")
  ax.text(50, 16.5, "MOLECULAR", ha="center")

  ax.axvline(ls=":")
  ax2.axvline(ls=":")
  axH.axvline(ls=":")
  ax.set(
      xlim=[95, -95],
      ylim=[0, None],
      #yscale="log",
      xlabel="Depth into Bar: $x$, $10^{-3}$ pc",
      ylabel="Constant + Intensity (arbitrary units)",
  )
  ax.minorticks_on()
  ax2.set(
      ylim=[0, None],
      ylabel="Mean band intensity,\n$10^{-9}$ erg s$^{-1}$ cm$^{-2}$ sr$^{-1}$ Å$^{-1}$"
  )
  axH.set(
      ylabel="Intensity (arbitrary units)",
      ylim=[0, None],
  )
  sns.despine()
  fig.tight_layout(h_pad=0.0)
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:raman-bar-multi-profile-3-panel.pdf]]

**** Fit Gaussians to all the profiles
+ Use a linear baseline plus a single gaussian to have a uniform methodology
+ Units of brightness profiles
  + MUSE lines.
    + The ones with ~linesum~ in the name were summed over a window (with BG subtraction)
    + Original units are 10**(-20)*erg/s/cm**2/Angstrom per 0.2 arcsec spaxel
    + => 3.24e-12 erg s^{-1} cm^{-2} sr^{-1} \AA^{-1}
    + \int F_\lambda d\lambda = (\sum F_i) \delta\lambda where \delta\lambda = 0.85 \AA
    + So units of ~linesum~ maps are 2.754e-12 erg s^{-1} cm^{-2} sr^{-1}
    + We write the table in units of 1e-6 erg s^{-1} cm^{-2} sr^{-1}
  + Raman wings
    + These are just 3.24e-12 erg s^{-1} cm^{-2} sr^{-1} \AA^{-1}
    + We write the table in units of 1e-9 erg s^{-1} cm^{-2} sr^{-1} \AA^{-1}
  + IRAC bands
    + Images are in MJy/sr
    + Divide by 1e3 to put in GJy/sr
  + Herschel maps
    + Images are in Jy/pixel
    + Just leave it like that for the continuum
    + For lines, we can median normalize

#+begin_src python :return results
  import json
  import numpy as np
  from astropy.modeling import models, fitting

  PC_PER_ARCSEC = 1.9e-3

  def load_data(jsonfile):
      "Returns offset(mpc) and brightness"
      data = json.load(open(jsonfile))
      return 1000*np.array(data["offset"])*PC_PER_ARCSEC, np.array(data["brightness"])


  emlines = [
      ["O_III-5007", 7, 2.2, 0.5, r"[O III] $\lambda 5007$"], 
      ["O_II-7318",  2.5, 1.25, 0.7, r"[O II] $\lambda 7318$"], 
      ["O_I-6300",   1.0, 1.0, 0.9, r"[O I] $\lambda 6300$"], 
      ["O_I-8446",   0.0, 1.0, 1.1, r"O I $\lambda 8446$"], 
  ]

  raman_bands = [
      ["B033", "R040", 0.6, "b", "m", 36],
      ["B054", "R058", 0.4, "b", "m", 56],
      ["B080", "R087", 0.4, "c", "r", 83],
      ["B133", "R136", 0.2, "c", "r", 134],
  ]

  molecules = [
      ["mom0_87_109_13co_pix_2_Tmb", 0.0, 5.5, 1.0, "$^{13}$CO (1-0)"],
      ["mom0_48_57_12co_pix_2_Tmb", 0.0, 4.0, 1.5, "$^{12}$CO (1-0)"],
      ["linesum-blue-C_I-8727-multibin-500", 0.0, 4.0, 2, r"[C I] $\lambda 8727$"],
      ["map_CO137_pacsman", 0.0, 0.65, 2.5, "$^{12}$CO (19-18)"],
      ["Orion-Bar-H2-minus-060-Brg", -14.1, 13.0, 3.0, r"H$_{2}$ 2.12$\,\mu$m"],
  ][::-1]

  infrared = [
      ["IRAC.1", 0.038, "$3.6\, \mu$m"],
      ["IRAC.3", 0.0044, "$5.8\, \mu$m"],
      ["IRAC.4", 0.001, "$8.0\, \mu$m"],
  ]

  herschel_lines = [
      ["nii-122mic", 1.3, -100, 50, -50, 0.7, 1.0, "[N II] $122\,\mu$m"],
      ["oi-146mic", 4.0, -10, 100, 60, 1.0, 0.3, "[O I] $146\,\mu$m"],
      ["oi-63mic", 3.7, -10, 100, 50, 1.5, 0.3, "[O I] $63\,\mu$m"],
      ["cii-158mic", 3.5, -10, 100, 60, 2.0, 0.3, "[C II] $158\,\mu$m"],
      ["co-145mic", 0.5, 10, 100, 60, 2.5, 0.3, "$^{12}$CO (18-17) $145\,\mu$m"],
  ]

  herschel_cont = [
      ["oi-146mic", 3.4, "$150\,\mu$m"],
      ["oi-63mic", 5.0, "$60\,\mu$m"],
  ]

  fit = fitting.LevMarLSQFitter()
  def fit_gaussian(x, y, A=None, x0=None, sig0=10.0, a=None, b=0.0):
      if a is None:
          a = y.min()
      if A is None:
          A = y.max() - a
      if x0 is None:
          x0 = x[np.argmax(y)]
      model0 = models.Gaussian1D(A, x0, sig0) + models.Linear1D(a, b)
      model = fit(model0, x, y)
      return model

  # Table for results
  class Results:
      """Table of gaussian fit parameters for each line or band"""
      def __init__(self):
          self.table = [["Label", "x", "FWHM", "Peak", "Base", "Slope"], None]
      def update(self, label, g, xp):
          x = g.mean_0.value
          dx = np.abs(xp - x)
          w = 2.3*g.stddev_0.value
          Apeak = g.amplitude_0.value
          a, b = g.intercept_1, g.slope_1
          Abase = a + b*x
          Asigma = abs(a + b*(x + w) - Abase)
          self.table.append([label,
                             f"{x:0.1f} +/- {dx:0.1f}",
                             f"{w:0.0f}",
                             f"{Apeak:0.3f}",
                             f"{Abase:0.3f}",
                             f"{Asigma:0.3f}",
          ])
      def hline(self):
          self.table.append(None)
      def __repr__(self):
          return repr(self.table)


  results = Results()
  for lineid, offset, scale, lw, label in emlines:
      x, y = load_data(f"linesum-{lineid}-bin001-bar-profile.json")
      # Put in units of 1e-6 erg/s/cm^2/sr
      y *= 2.754e-12 / 1e-6
      m = (x < 30) & (x > -100)
      g = fit_gaussian(x[m], y[m])
      xp = x[m][y[m].argmax()]
      results.update(label, g, xp)
  results.hline()

  raman_fmt = "muse-hr-data-ha-raman-{}-cont-sub-multibin-1000-bar-profile.json"
  for blue, red, alpha, cb, cr, wav in raman_bands:
      xb, yb = load_data(raman_fmt.format(blue)) 
      xr, yr = load_data(raman_fmt.format(red))
      # Put in units of 1e-9 erg/s/cm2/sr/AA
      yb *= 3.24e-12 / 1e-9
      yr *= 3.24e-12 / 1e-9
      m = (xb > -90) & (xb < 60)
      g = fit_gaussian(xb[m], yb[m])
      xp = xb[m][yb[m].argmax()]
      results.update(blue, g, xp)
      m = (xr > -90) & (xr < 60)
      g = fit_gaussian(xr[m], yr[m])
      xp = xr[m][yr[m].argmax()]
      results.update(red, g, xp)
  results.hline()

  for bandid, scale, label in infrared:
      x, y = load_data(f"40044081.40044081-89-short.{bandid}.mosaic-bar-profile.json")
      y /= 1e3
      m = (x > -10) & (x < 100)
      g = fit_gaussian(x[m], y[m])
      xp = x[m][y[m].argmax()]
      results.update(label, g, xp)
  results.hline()

  for lineid, offset, scale, lw, label in molecules:
      x, y = load_data(f"{lineid}-bar-profile.json")
      if "-H2-" in lineid:
          # special treatment for H2, which goes funny on ionized side
          m = (x > 10) & (x < 100)
      else:
          m = (x > -10) & (x < 100)
      y /= np.median(y[m])
      g = fit_gaussian(x[m], y[m])
      xp = x[m][y[m].argmax()]
      results.update(label, g, xp)
  results.hline()

  for bandid, scale, label in herschel_cont:
      x, y = load_data(f"herschel-bar-{bandid}-cont-bar-profile.json")
      m = x > -50
      g = fit_gaussian(x[m], y[m])
      xp = x[m][y[m].argmax()]
      results.update(label, g, xp)
  results.hline()

  for lineid, scale, x1, x2, x0, lw, alpha, label in herschel_lines:
      x, y = load_data(f"herschel-bar-{lineid}-line-bar-profile.json")
      m = (x1 < x) & (x < x2)
      m = (x > -100) & (x < 100)
      y /= np.median(y)
      g = fit_gaussian(x[m], y[m])
      xp = x[m][y[m].argmax()]
      results.update(label, g, xp)
  results.hline()


  misc = [
      "Ne",
      "Ne-iii",
      "Te",
      "Te-iii",
  ]

  for label in misc:
      x, y = load_data(f"muse-derived-{label}-multibin-SN0003-bar-profile.json")
      m = (x > -50) & (x < 50)    
      g = fit_gaussian(x[m], y[m])
      xp = x[m][y[m].argmax()]
      results.update(label, g, xp)
  results.hline()

#+end_src

#+RESULTS:
| Label                    | x             | FWHM |     Peak |     Base |   Slope |
|--------------------------+---------------+------+----------+----------+---------|
| [O III] $\lambda 5007$          | -32.1 +/- 2.6 |   45 |   13.059 |   11.642 |   5.605 |
| [O II] $\lambda 7318$           | -9.4 +/- 3.6  |   25 |    0.882 |    0.232 |   0.026 |
| [O I] $\lambda 6300$            | -1.7 +/- 0.1  |    9 |    0.152 |    0.045 |   0.001 |
| O I $\lambda 8446$              | 0.0 +/- 0.8   |    8 |    0.226 |    0.071 |   0.000 |
|--------------------------+---------------+------+----------+----------+---------|
| B033                     | 0.8 +/- 1.5   |   20 |    0.455 |    0.858 |   0.007 |
| R040                     | 1.8 +/- 0.0   |   18 |    0.480 |    0.815 |   0.023 |
| B054                     | 5.0 +/- 2.7   |    9 |    0.233 |    0.641 |   0.009 |
| R058                     | 5.5 +/- 2.8   |   11 |    0.285 |    0.591 |   0.017 |
| B080                     | 7.1 +/- 1.3   |   11 |    0.136 |    0.437 |   0.013 |
| R087                     | 7.1 +/- 0.7   |   15 |    0.178 |    0.393 |   0.017 |
| B133                     | 6.7 +/- 1.1   |   10 |    0.128 |    0.302 |   0.004 |
| R136                     | 3.1 +/- 2.7   |   27 |    0.072 |    0.198 |   0.007 |
|--------------------------+---------------+------+----------+----------+---------|
| $3.6\, \mu$m               | 11.6 +/- 1.1  |   21 |    0.200 |    0.182 |   0.018 |
| $5.8\, \mu$m               | 12.8 +/- 2.4  |   23 |    1.702 |    0.966 |   0.073 |
| $8.0\, \mu$m               | 13.9 +/- 3.4  |   24 |    4.866 |    2.622 |   0.119 |
|--------------------------+---------------+------+----------+----------+---------|
| H$_{2}$ 2.12$\,\mu$m          | 23.6 +/- 0.1  |   19 |    0.169 |    0.997 |   0.002 |
| $^{12}$CO (19-18)           | 33.8 +/- 0.0  |   32 |    3.930 |    0.399 |   0.001 |
| [C I] $\lambda 8727$            | 37.7 +/- 5.9  |   30 |    0.495 |    0.854 |   0.122 |
| $^{12}$CO (1-0)             | 41.1 +/- 1.2  |   44 |    0.472 |    0.746 |   0.173 |
| $^{13}$CO (1-0)             | 49.8 +/- 2.1  |   33 |    0.891 |    0.823 |   0.112 |
|--------------------------+---------------+------+----------+----------+---------|
| $150\,\mu$m                | 39.2 +/- 4.2  |   63 |    7.263 |    2.592 |   0.065 |
| $60\,\mu$m                 | 23.9 +/- 7.0  |   52 |   66.361 |   25.175 |   0.261 |
|--------------------------+---------------+------+----------+----------+---------|
| [N II] $122\,\mu$m         | -4.0 +/- 1.7  |   55 |    1.907 |    0.581 |   0.181 |
| [O I] $146\,\mu$m          | 26.0 +/- 2.8  |   46 |    2.299 |    0.945 |   0.210 |
| [O I] $63\,\mu$m           | 21.6 +/- 1.2  |   55 |    1.303 |    0.823 |   0.242 |
| [C II] $158\,\mu$m         | 24.3 +/- 1.9  |   47 |    0.975 |    0.920 |   0.145 |
| $^{12}$CO (18-17) $145\,\mu$m | 38.9 +/- 0.5  |   34 |    8.193 |    0.989 |   0.154 |
|--------------------------+---------------+------+----------+----------+---------|
| Ne                       | -8.8 +/- 2.0  |   27 | 1426.813 | 1654.020 | 164.929 |
| Ne-iii                   | -15.0 +/- 4.1 |   26 | 1990.752 | 3321.364 | 503.448 |
| Te                       | -2.2 +/- 0.1  |   15 |  377.649 | 8878.485 |  85.129 |
| Te-iii                   | -6.6 +/- 2.8  |   25 |  642.275 | 7983.434 |  59.940 |
|--------------------------+---------------+------+----------+----------+---------|



**** PSF sizes
| Telescope |         wav | arcsec |   mpc |   mm |
|-----------+-------------+--------+-------+------|
| MUSE      | 4500-9200 \AA |      1 |   1.9 |  1.8 |
| Spitzer   |    8 micron |   2.37 | 4.503 |  4.2 |
| Herschel  |          63 |    4.5 |  8.55 |  7.9 |
| Herschel  |         122 |    8.8 | 16.72 | 15.5 |
| Herschel  |         145 |     10 |   19. | 17.6 |
| Herschel  |         158 |     11 |  20.9 | 19.4 |
| CARMA     |      2.6 mm |      8 |  15.2 | 14.1 |
#+TBLFM: $4=1.9 $3::$5=14.1 $4/15.2;f1
+ Spitzer @ 8 micron: 2.37 arcsec = 4.5 mpc
+ CARMA @ 2.6 mm: 8 arcsec = 15.2 mpc
+ MUSE @ 7000 \AA: 1 arcsec = 1.9 mpc
+ Herschel
  + @ 60 microns: 4.5 arcsec = 8.6 mpc
  + @ 150 microns: 11 arcsec = 20.9 mpc
**** Plot peak position against 1/\sigma for Raman bands
#+name: raman-band-displacements
| Band |  x0 |  W | sigma | 1/sigma |
|------+-----+----+-------+---------|
| B033 | 0.8 | 20 | 2.069 |   0.483 |
| R040 | 1.8 | 18 | 1.451 |   0.689 |
| B054 | 5.0 |  9 | 0.802 |   1.247 |
| R058 | 5.5 | 11 | 0.695 |   1.439 |
| B080 | 7.1 | 11 | 0.378 |   2.646 |
| R087 | 7.1 | 15 | 0.299 |   3.344 |
| B133 | 6.7 | 10 | 0.144 |   6.944 |
| R136 | 3.1 | 27 | 0.119 |   8.403 |
#+TBLFM: $5=1/$-1;f3

#+begin_src python :results file :return figfile :var INTAB=raman-band-displacements
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns

  figfile = "raman-band-displacements-plot.pdf"
  fig, ax = plt.subplots(figsize=(5, 3.5))
  colors = iter(["b", "m", "b", "m", "c", "r", "c", "r"])
  alphas = iter([0.6, 0.6, 0.4, 0.4, 0.4, 0.4, 0.3, 0.2])
  x0s, sigmas = [], []
  for band, x0, W, sigma, _ in INTAB:
      color, alpha = next(colors), next(alphas)
      ax.scatter(sigma, x0, c=color, alpha=alpha, s=200)
      dx = -14 if band.startswith("R") else -4
      ax.annotate(band, xy=(sigma, x0), xytext=(dx, 15), textcoords="offset points", fontsize="x-small")
      ax.errorbar(sigma, x0, yerr=0.1*W, fmt="none", c=color, alpha=alpha)
      x0s.append(x0)
      sigmas.append(sigma)
  x0s = np.array(x0s)
  sigmas = np.array(sigmas)
  Ns = 1.0/sigmas  
  nmean = np.mean(Ns[:4]/x0s[:4])
  sigmagrid = np.linspace(0.2, 2.2)
  x0model = 1.0 / (sigmagrid*nmean)
  nfactor = 1.0 / (1e-21*3.085677582e15)
  sns.set_color_codes()
  ax.plot(sigmagrid, x0model/0.7,
          color="k", ls=":", zorder=-100,
          label=fr"$n = {0.7*nfactor*nmean:.1e}$".replace("e+0", r"\times 10^") + r" cm$^{-3}$")
  ax.plot(sigmagrid, x0model,
          color="k", ls="-", zorder=-100,
          label=fr"$n = {nfactor*nmean:.1e}$".replace("e+0", r"\times 10^") + r" cm$^{-3}$")
  ax.plot(sigmagrid, x0model/1.4,
          color="k", ls="--", zorder=-100,
          label=fr"$n = {1.4*nfactor*nmean:.1e}$".replace("e+0", r"\times 10^") + r" cm$^{-3}$")
  ax.legend(title=r"PDR density for $\tau = 1$ at peak")
  ax.set(
      xlim=[0, None],
      ylim=[0, 9],
      xlabel=r"Ly$\beta$ wing cross section: $\langle\sigma_{\lambda} \rangle$, $10^{-21}$ cm$^{-2}$",
      ylabel="Displacement of Raman band peak\nfrom i-front: $x_{0}$, mpc",
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:raman-band-displacements-plot.pdf]]

**** Rotated image to show the Bar cut
#+begin_src python :return figfile :results file
  from pathlib import Path
  import numpy as np
  import matplotlib.pyplot as plt
  from matplotlib.patches import Rectangle
  from matplotlib.ticker import EngFormatter
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy.wcs.utils import celestial_frame_to_wcs
  from astropy.convolution import convolve_fft, Gaussian2DKernel
  from astropy.coordinates import SkyCoord
  import astropy.units as u
  from reproject import reproject_interp
  import seaborn as sns

  sns.set_color_codes("bright")

  figfile = "orion-bar-rotated-map-with-profile-box.pdf"
  datapath = Path("../data/orion-muse")
  hdu = fits.open(datapath / "linesum-O_I-8446-bin001.fits")["SCALED"]
  w = WCS(hdu.header)

  COpath = Path("../../OrionMolecular/Carma-NRO-CO/dataverse_files")
  hdu_redCO = fits.open(COpath / "mom0_48_57_12co_pix_2_Tmb.fits")[0]
  # Convert from 3D to 2D
  hdu_redCO.header = WCS(hdu_redCO).celestial.to_header()
  hdu_redCO.data = hdu_redCO.data[0, :, :]
  levels_CO = [360, 400, 440]

  hdu_OIII = fits.open(datapath / "linesum-O_III-5007-bin001.fits")["SCALED"]
  levels_OIII = [7e6, 9e6, 11e6]

  # Origin of Bar offset frame
  c0 = SkyCoord(83.8418691, -5.4113246, unit=(u.deg, u.deg))
  # Position angle perp to Bar (away from Trapezium)
  PA = 141.5*u.deg
  bar_frame = c0.skyoffset_frame(rotation=PA)

  # WCS for reprojection - start with the original 
  ww = w.deepcopy()
  # Shift reference pixel to Bar center
  ww.wcs.crpix = w.world_to_pixel(c0)
  ww.wcs.crval = c0.ra.deg, c0.dec.deg
  # Rotate the frame
  c, s = np.cos(PA).value, np.sin(PA).value
  T = np.array([[s, -c], [c, s]])
  ww.wcs.pc = T @ w.wcs.pc
  newdata, footprint = reproject_interp(hdu, ww, shape_out=hdu.data.shape)
  newdata_CO, _ = reproject_interp(hdu_redCO, ww, shape_out=hdu.data.shape)
  hdu_OIII.data = convolve_fft(hdu_OIII.data, Gaussian2DKernel(stddev=5))
  newdata_OIII, _ = reproject_interp(hdu_OIII, ww, shape_out=hdu.data.shape)

  # Now switch to frame centered on c0
  ww.wcs.crval = 0.0, 0.0
  # in mpc
  ww.wcs.pc = w.wcs.pc*3600*1.9

  ww.wcs.ctype = ["linear", "linear"]

  # Box for profile integration
  width, height = 200, 75*1.9
  xx = np.array([-1, 1, 1, -1])*width/2
  yy = np.array([-1, -1, 1, 1])*height/2
  # convert expanded rectangle corners to array indices
  jj, ii = ww.world_to_array_index_values(1.3*xx, 1.3*yy)
  # find limits for plot
  xlim  = ii.min(), ii.max()
  ylim = jj.min(), jj.max()

  fig, ax = plt.subplots(figsize=(4, 3), subplot_kw=dict(projection=ww))
  wtrans = ax.get_transform('world')

  # Plot the O I data as image
  imdata = np.sqrt(newdata/np.nanmax(newdata))
  ax.imshow(imdata,
            vmin=0.02, vmax=0.25, origin="lower", cmap="gray_r")

  # Plot the CO and [O III] data as contours
  ax.contour(newdata_CO,
             levels=levels_CO, linewidths=[0.5, 1.0, 1.5],
             colors="r")
  ax.contour(newdata_OIII,
             levels=levels_OIII,  linewidths=[0.5, 1.0, 1.5],
             colors="b")

  # Dashed rectangle for the profile box
  ax.add_patch(
      Rectangle(
          (-width/2, -height/2),
          width, height,
          alpha=1.0,
          transform=wtrans,
          fill=False,
          ec="k",
          ls="--",
      ),
  )
  # Dotted line for the i-front
  ydots = np.arange(-100, 100, 4)
  xdots = np.zeros_like(ydots)
  ax.scatter(
      xdots, ydots, transform=wtrans,
      marker='o', c="g", edgecolors="w",
      s=2, linewidths=0.25, alpha=0.6,
  )

  eformatter = EngFormatter(usetex=True)
  ax.set(xlim=xlim, ylim=ylim, xlabel="$x$ (mpc)", ylabel="$y$ (mpc)")
  ax.xaxis.set_major_formatter(eformatter)
  ax.yaxis.set_major_formatter(eformatter)
  ax.minorticks_on()
  fig.tight_layout(rect=[0.1, 0.1, 1.0, 1.0])
  fig.savefig(figfile, dpi=200)


#+end_src

#+RESULTS:
[[file:orion-bar-rotated-map-with-profile-box.pdf]]


**** Secondary profiles

#+call: bar-profile(INFILE="linesum-C_I-8727-bin016.fits")

#+RESULTS:
[[file:linesum-C_I-8727-bin016-bar-profile.jpg]]

#+call: bar-profile(INFILE="linesum-Cl_IV-7531-bin016.fits")

#+RESULTS:
[[file:linesum-Cl_IV-7531-bin016-bar-profile.jpg]]

#+call: bar-profile(INFILE="muse-hr-image-wfc3-f547m.fits", HDU="DATA")

#+RESULTS:
[[file:muse-hr-image-wfc3-f547m-bar-profile.jpg]]

#+call: bar-profile(INFILE="continuum-N_III-6634-bin001.fits")

#+RESULTS:
[[file:continuum-N_III-6634-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="continuum-DIB-5781-bin001.fits")

#+RESULTS:
[[file:continuum-DIB-5781-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="C_H_beta-bin001.fits", NORM="no")

#+RESULTS:
[[file:C_H_beta-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="C_H_beta_9229-bin001.fits", NORM="no")

#+RESULTS:
[[file:C_H_beta_9229-bin001-bar-profile.jpg]]

#+call: bar-profile(INFILE="C_H_beta_Radio-bin001.fits", NORM="no")

#+RESULTS:
[[file:C_H_beta_Radio-bin001-bar-profile.jpg]]

**** Isolating the H_2 emission
+ Easiest way is to subtract Br\gamma from H_2 filter
+ That will eliminate the continuum hopefully, but will have negative values where there is ionized emission
+ We could do something cleverer using the broad K band as well
+ Files are
  + H_2 - ~HAWKI.2007-12-02T06_20_16.351.fits~
  + Br\gamma - ~HAWKI.2007-12-02T06:40:00.862.fits~
  + Ks - ~HAWKI.2008-11-09T06:42:26.928.fits~

#+begin_src python :results output verbatim
  import numpy as np
  from astropy.io import fits

  datadir = "../data/orion-hawki/"

  hdu_h2 = fits.open(f"{datadir}/HAWKI.2007-12-02T06_20_16.351.fits")["CHIP1.INT1"]
  hdu_br = fits.open(f"{datadir}/HAWKI.2007-12-02T06:40:00.862.fits")["CHIP1.INT1"]

  hdu_h2.data -= 0.45*hdu_br.data
  hdu_h2.writeto(f"{datadir}/Orion-Bar-H2-minus-045-Brg.fits",
                 output_verify="fix",
                 overwrite=True,
  )
#+end_src

#+RESULTS:

#+begin_src python :results output verbatim
  import numpy as np
  from astropy.io import fits

  datadir = "../data/orion-hawki/"

  hdu_h2 = fits.open(f"{datadir}/HAWKI.2007-12-02T06_20_16.351.fits")["CHIP4.INT1"]
  hdu_br = fits.open(f"{datadir}/HAWKI.2007-12-02T06:40:00.862.fits")["CHIP4.INT1"]

  hdu_h2.data -= 0.45*hdu_br.data
  hdu_h2.writeto(f"{datadir}/Orion-CHIP4-H2-minus-045-Brg.fits",
                 output_verify="fix",
                 overwrite=True,
  )
#+end_src

#+RESULTS:

*** The supposed Si II fluoresced bump
+ Dopita sees this at 6470 \to 6480
+ We see nothing there
+ But we do see a bulge at 6530 near the bar
*** Other H lines
+ H beta has the wings
+ Paschen line are too weak to see the wings, and too many other lines in the way


*** Other weak lines in range
+ 6401 [Ni III] + Ne I
  + Check if [Ni III] 6401/6534 tells us something
+ 6462 C II recomb
+ 6666 [Ni II]
+ Another notch at 6530, or a gap between two lines
  + There is [N II] 6527 and [Ni III] 6534
  + Those two lines are clearly seen in Dopita spectra
  + And in MUSE spectra too
+ [ ] 6544.3 seen in SPM spectra - what is it?
+ 6700 + 6706 in R136 band
  + He I 6699.394473 - could be
  + There are some N I lines around 6706 and also 6722, but the upper level is at just over one Ryd so it can't be
  + There are some Fe II lines that might be it 6704.88, 6706.25 - one of the same multiplet is at 6534.314, which is same wavelength as [Ni III] 6533.80
+ B133 band
  + Lots of stellar absorption lines at 6450 and below
  + Possibly a weak line at 6440.35
  + But these are negligible contribution
*** What H\alpha rest wavelength to use
+ The Raman scattering has to be 1s \to 3p \to 2s by E1 selection rule (\Delta\ell = \pm1)
+ 
** TODO [#A] The [C I] line
Fit the continuum and remove it
** Relation with foreground extinction
+ Show that the 6634 feature is not correlated with reddening
+ But the other DIB features are - maybe
*** TODO [#A] Extinction at the Bright Bar
+ Compare 6563/4681 with 7136/7751 and 9229/6563
+ Strange dip in Raman brightness at the bar
  + Is this caused by dust in ionized gas (will cause big drop in source function)
*** Correlation between the different reddening measures 
*** Correlation between reddening and DIB
:PROPERTIES:
:ID:       0E12E121-C1E6-453E-ACD5-B7A0BBAD92F6
:END:
+ The Relation between C(Hb) and E(B-V)
+ Difference of f_\lambda for B and V is 0.076 - -0.091 = 0.167
  + This is E(B - V) / A(Hb)
    + A = E(B - V) / 0.167
  + C(Hb) = -log10(e^{-A}) = A log10(e) = 0.4343 A
    + C(Hb) = (0.4343 / 0.167)  E(B - V) = 2.6 E(B - V)
  + Or E(B - V) = 0.3845 C(Hb)
+ So we get C(Hb) going up to about 1.3, which corresponds to E(B - V) of about 0.5
+ The W(5780) goes up to about 400 m\AA
+ Baron:2015a have a fit to lots of sightlines to galaxies, getting
  + W(5780) = (0.813 ± 0.073) E(B-V) + (-0.0032 ± 0.0034)
  + This is from their Table 2
  + They are covering high Galactic latitudes
** Stellar absorption lines
+ The low-mass stars have absorption lines too
  + 6663 - Si III
  + 6634 - N III - shows up in a few stars
    + 219-355 - 5:35:21.8801 -5:23:54.789
    + 159-350 - 5:35:15.8718 -5:23:48.515
    + 210-349 - 5:35:21.0189 -5:23:48.808
      + Narrow line at 6635
      + Also, 6593, 6609.5, 6663.9, 6708.1
    + 181-245 - 5:35:18.0745 -5:22:45.107
    + 
  + 6496 - shows up nearly everywhere
    + Accompanied by weaker lines: 6483, 6463, 6451, 6440, 6421, 6402, etc
+ Determining EW of stellar absorption lines by triangle approx
  | star, line   |   wav1 |   wav2 |  cont1 |    min |  cont2 |   EW |
  |--------------+--------+--------+--------+--------+--------+------|
  | 159-350 6664 | 6660.5 | 6667.3 | 992651 | 953142 | 987065 | 0.13 |
  #+TBLFM: $7=0.5 ($3 - $2) (0.5 ($4 + $6) - $5) / 0.5 ($4 + $6); f2
+ Total continuum flux at 6650 (sum in aperture)
  | Source  |          Star |        BG | Star - BG |
  |---------+---------------+-----------+-----------|
  | 159-350 |      3891510. |   420858. |     3.5e6 |
  | th1C    | 7.5695863e+08 | 5510521.2 |     7.5e8 |
  | Orion S |     58229011. |         0 |     5.8e7 |
  #+TBLFM: $4=$2 - $3;s2

** Comparison with other lines in Orion S
+ CO has peak at around +9 km/s LSR = 28 km/s heliocentric
  + Kong:2018a
  + There is a blue wing, but that may be related to molecular outflow
+ [N I] line has peak at 29 km/s heliocentric
  + From Keck spectra of slit p79, assuming -4 km/s heliocentric correction

** Look at other Orion datasets
+ [X] Keck proplyd spectra
  + Unfortunately, we have an inter-order gap from 6622 \to 6649 \AA, which our line falls right in the middle of
  + /However/ the 6662.6 absorption line should be visible
    + Maybe see it on the following spectra
      + In Keck2, jw73b, j71b, j70b, j69b, j68b, j67b, j66b, j65b - last is best
        + C3 slit, which is 28 x 0.861 arcsec with R = 50,000
        + Also p79-ff, which is in Keck1 (C2 slit)
        + j65 and p79 are both from similar pointings called 150-353
        + This is the base of the HH 529 jet
      + Also in p73 clearly (170-337)
        + And in p74 super strong - but is it stellar? I think so - mainly from one star
        + In p77 (180-331) just about visible, but p87 has nothing
        + in p84 (244-440) is visible, but again looks like star although it could be disk
      + Distance between 6666.8 and 6678.15 is
        + 607 - 387 = 220 pix
        + 6678.15 - 6666.8 = 11.35 \AA
        + 0.0516 \AA per pix (= 2.32 km/s, sounds right)
      + Absorption feature ranges between [308, 324], so [-79, -63] pix from 6666.8
        + 6666.8 + [-79, -63] 0.0516 = [6662.7236, 6663.5492]
        + We wanted 6662.6, so it is a bit to red
        + Width is 0.8256 \AA = 37 km/s => 5.8 km/s
        + If line center is 6663.1364, then redshifted by 0.5 \AA = 3.5 km/s with respect to [Ni II]
          + That is, assuming that [Ni II] rest wavelength is accurate
          + This might be showing velocity shifts between ionization front and PDR
          + Including maybe back scattering, which gives double relative redshift
+ [X] Adal spectra
  + /Resolution in red is not as good as I thought/
    + Pixels are 0.83 \AA = 40 km/s at H\alpha, and resolution should be at best 2x this, so 80 km/s or R = 4000
    + This is very similar to MUSE, but not quite as good I don't think
  + We see it for POS 6 in Orion S - strangely not as deep as one might expect
  + POS 4 near Trapezium
  + POS 1 near Trapezium
  + POS 2 crosses Bright Bar
  + Blue spectra are all high resolution, but there are symmetrical ghosts around all the bright lines, which makes it impossible to see any possible wings on H beta for instance
+ [X] O'Dell & Harris
  + The spectral resolution is not very good - we do see the absorption, but only just
+ [X] Manuel PPAK spectra
  + Good example is [[file:~/Dropbox/RubinWFC3/Tsquared/manu-region-specplot-r-6600-6800-x-250-y-350-w0400-h0200.jpg][file:~/Dropbox/RubinWFC3/Tsquared/manu-region-specplot-r-6600-6800-x-250-y-350-w0400-h0200.jpg]]
  + This clearly shows the line and is higher s/n and
+ [X] STIS
  + I don't seem to have the files any more
    + I used to have a ~Work/HST-STIS~ folder, but seems to be missing - maybe on external disk
    + They do seem to be in ~/fs/nil/other0/will/orion-stis~ on linux server
    + Yes, they are on external disk ~SSD-2TB~
  + Best bet would seem to be from Bally program GO8324
  + There is a 6581 \to 6867 \AA spectrum in a slit from LV2 to LV6, same as for the NUV lines
  + See [[file:~/Dropbox/STIS-LV/stis-lv.org][file:~/Dropbox/STIS-LV/stis-lv.org]]
  + I have looked at these and they are insufficient S/N
    + Maybe adding togeter all of them would help
    + But we would have to eliminate the hot pixels and cosmic rays
+ Herbig's HIRES th1E spectra
  + Has same problem as other Keck data
** DONE [4/4] Brightness profiles of PDR emission
CLOSED: [2019-09-07 Sat 11:58]
+ [X] I have the CO from the Kong:2018a data
+ [X] I can get H_2 from HAWKI
+ [X] I can get dust/PAH from IRAC
  + Currently there is a problem with NaNs in the median profile
+ [X] I can get [C I] from MUSE
  + Requires better continuum subtraction on the wavsec6 cube but should be doable
  + There is no good continuum range
  + But the single wavelength at 8723.45 (pixel 646) is a local minimum, so as good as any
* Comparison with other absorption lines
:PROPERTIES:
:ID:       BE62EEF0-597D-4953-9C65-2A8A5D1D0566
:END:
+ See also previous discussion from 2015 in MUSE notes
  + [[id:29ACCF8C-F49A-4FEB-8374-DC19BB20048E][Using the absorption lines]]
+ We have a variety of behaviors of the different lines
  + He II 4686
    + this peaks very clearly around th2A (EW = 0.5 \AA)
    + but is seen at lower level everywhere (EW = 0.2 \AA)
      + Note that it is phase-dependent 
    + Much better s/n from Manu spectra
    + Note that He II 5411 is hard to use since it is contaminated by [Fe III] 5412
  + DIB 5781
    + I had thought this was He II 5785 but the wavelength is way off
    + Peak in Dark Bay (EW = 0.4 \AA) and SW Cloud (EW = 0.2 \AA)
    + Correlates very well with the reddening
    + Note that the He_II-5785 map actually looks better than the DIB-5781 one
      + Maybe I should try and re-do it, or just average them
    + There is also a DIB-6278 but the maps are much noisier
      + This is because it is strongly impacted by the telluric O_2 \gamma band absorption at 6280 \AA
      + DIB itself is actually closer to 6283
        + apparent in some of the Manu spectra
        + such as [[file:/Users/will/Dropbox/RubinWFC3/Tsquared/manu-region-specplot-r-6200-6400-x+600-y+300-w0600-h0600.jpg]]
        + Also can be seen well in [[file:~/Dropbox/dib-scatter-hii/data/orion-muse/muse-hr-data-wavsec23-rebin16x16-cont-div.fits]]
  + C IV 5801, 5812
    + This is quite weak and noisy, but shows broad peak around Trapezium
    + Maximum is about 0.1 \AA
    + [X] We should look at how deep they should be in the spectrum of Trapezium - use the POWR models
  + Measure line EW from MUSE datacube
    + From the cont-div datacube, I measure the following
      | Region, line       |    lam1 |    lam2 |  cont1 |    min |  cont2 |     W |
      |--------------------+---------+---------+--------+--------+--------+-------|
      | Orion S, 5801      |  5798.6 |  5805.4 |  0.986 |  0.975 |  0.991 | 0.046 |
      | Orion S, 5812      |  5808.1 |  5815.6 |  0.994 |  0.981 |  0.990 | 0.042 |
      | th1C, 5801         | 5797.75 |  5805.4 |  0.956 |  0.922 |  0.957 | 0.138 |
      | th1C, 5812         |  5808.8 | 5816.45 |  0.966 |  0.928 |  0.974 | 0.166 |
      |--------------------+---------+---------+--------+--------+--------+-------|
      | th2A, 4686         |  4678.3 |  4690.2 |  76724 |  70511 |  76406 | 0.470 |
      | Around th2A, 4686  |    4680 | 4692.75 |   8676 |   8282 |   8745 | 0.314 |
      | th1d, 4686         |  4681.7 |  4690.2 | 513329 | 478244 | 515699 | 0.300 |
      | th2A, 4886 Simon-D |  4682.0 |  4689.8 |    1.0 |  0.865 |    1.0 | 0.527 |
      | th1d, 4686 Simon-D |  4684.0 |  4687.8 |    1.0 |   0.87 |    1.0 | 0.247 |
      #+TBLFM: $7=0.5 ($3 - $2) (0.5 ($4 + $6) - $5 ) / 0.5 ($4 + $6);f3
    + This uses a triangle approximation to the area.
    + So sum is
      + W = 0.304 \AA for the star
      + W = 0.082 \AA for Orion S
    + This gives a dilution factor of 0.276
  + There is also N III 5896.1, which is seen in all the Trapezium stars
    + But it is affected by a strong sky line to the blue
  + Plot of theoretical spectrum of the Trapezium stars
    + [[file:powr-trapezium-optical.pdf]]
*** Combining EW from multiple sources
+ The EW, W_\lambda is the \lambda-integral of the absorption depth:
  + A_\lambda = (F_c - F_\lambda )/ F_c
  + A_\lambda = 1 - (F_\lambda / F_c)
+ So what happens if we combine with a diluting continuum: F_d?
+ Now we would have
  + A_\lambda' = (F_c + F_d - (F_\lambda + F_d)) / (F_c + F_d)
  + A_\lambda' = (F_c - F_\lambda ) / (F_c + F_d)
  + A_\lambda' = A_\lambda  F_c / (F_c + F_d)
+ The star's EW, W^\star_\lambda is proportional to A_\lambda
+ The observed EW W^obs_\lambda is proportional to A_\lambda
+ The fraction of scattered continuum is f_scat = F_c / (F_c + F_d)
+ So W^obs_\lambda = f_scat W^\star_\lambda
+ If we have multiple stars with W^\star,k_\lambda and f_scat,k:
  + So W^obs_\lambda = \sum_k f_scat,k W^\star,k_\lambda 
  
** Maps of different absorption features
#+name: raman-multi-absorption-features
#+header: :var STARS=star-coords
#+begin_src python :return figfile :results file
  from pathlib import Path
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy.convolution import convolve_fft, Gaussian2DKernel

  figfile = "raman-multi-absorption-features.jpg"
  datapath = Path("../data/orion-muse")
  datapath2 = Path("../../OrionMuse/LineMaps")

  # (d) The Raman wing over continuum ratio
  hdu = fits.open(datapath / f"ratio-raman-wing-to-continuum-6634.fits")["SCALED"]
  w = WCS(hdu.header)
  fig, axes = plt.subplots(
      2, 3,
      figsize=(12, 8),
      subplot_kw=dict(projection=w),
      sharex=True, sharey=True,
  )

  # Style of color bars
  cbkws = dict(orientation="horizontal", shrink=0.8, pad=0.08)
  # Style of subfigure labels
  tkws = dict(
      ha="left",
      va="top",
      bbox=dict(facecolor="white", alpha=0.5, edgecolor="none"),
      fontweight="black",
      fontsize="xx-large",
  )

  label = "Raman wing / continuum"
  ax = axes[1, 0]
  im = ax.imshow(hdu.data, vmin=0, vmax=0.14,
                 origin="lower", cmap="viridis")
  fig.colorbar(im, ax=ax, label=label, **cbkws)
  ax.text(20, 1450, "d", **tkws)

  # (a) The 6633 absorption equivalent width
  label = "6633 Å Absorption Equivalent Width, Å"
  ax = axes[0, 0]
  hdu = fits.open(datapath / f"ew-N_III-6634-multibin-SN0005.fits")["SCALED"]
  im = ax.imshow(-hdu.data, vmin=0.0, vmax=0.5,
                  origin="lower", cmap="gray_r")
  fig.colorbar(im, ax=ax, label=label, **cbkws)
  ax.text(20, 1450, "a", **tkws)


  # (b) The He II line
  label = r"He II 4686 Å Absorption Equivalent Width, Å"
  ax = axes[0, 1]
  hdu = fits.open(datapath2 / f"ew-He_II-4686-multibin-SN0007.fits")["SCALED"]
  im = ax.imshow(-hdu.data, vmin=0.0, vmax=0.5,
                 origin="lower", cmap="gray_r")
  fig.colorbar(im, ax=ax, label=label, **cbkws)
  ax.text(20, 1450, "b", **tkws)

  # (e) The C IV line
  label = r"C IV 5801, 5812 Å Absorption Equivalent Width, Å"
  ax = axes[1, 1]
  hdua = fits.open(datapath2 / f"ew-C_IV-5812-multibin-SN0005.fits")["SCALED"]
  hdub = fits.open(datapath2 / f"ew-C_IV-5812-multibin-SN0007.fits")["SCALED"]
  hduc = fits.open(datapath2 / f"ew-C_IV-5801-multibin-SN0007.fits")["SCALED"]
  data = np.nanmedian(
      np.stack( (hdua.data, hdub.data, hduc.data) ),
      axis=0,
  )
  # Sum the two doublet components
  im = ax.imshow(-2*data, vmin=0.0, vmax=0.25,
                 origin="lower", cmap="gray_r")
  fig.colorbar(im, ax=ax, label=label, **cbkws)
  ax.text(20, 1450, "e", **tkws)



  # (f) The extinction
  label = r"Dust Extinction, $C(\mathrm{H}\beta)$"
  ax = axes[1, 2]
  hdu = fits.open(datapath / f"C_H_beta-bin001.fits")["SCALED"]
  im = ax.imshow(hdu.data, vmin=0.0, vmax=1.5,
                 origin="lower", cmap="magma_r")
  fig.colorbar(im, ax=ax, label=label, **cbkws)
  ax.text(20, 1450, "f", **tkws)

  # (c) The DIB feature
  label = r"DIB 5781 Å Absorption Equivalent Width, Å"
  ax = axes[0, 2]
  hdua = fits.open(datapath / f"ew-DIB-5781-bin032.fits")["SCALED"]
  hdub = fits.open(datapath2 / f"ew-He_II-5785-multibin-SN0005.fits")["SCALED"]
  hduc = fits.open(datapath2 / f"ew-He_II-5785-multibin-SN0007.fits")["SCALED"]
  data = np.nanmedian(
      np.stack( (hdua.data, hdub.data, hduc.data) ),
      axis=0,
  )
  im = ax.imshow(-data, vmin=0.0, vmax=0.4,
                 origin="lower", cmap="gray_r")
  fig.colorbar(im, ax=ax, label=label, **cbkws)
  ax.text(20, 1450, "c", **tkws)


  for ax in axes.flat:
      # lon, lat = ax.coords
      # lon.set_axislabel("")
      # lat.set_axislabel("")
      for _, ra, dec, size in STARS:
          ax.scatter(ra, dec,
                     transform=ax.get_transform("icrs"),
                     s=0.6*size, ec="red", fc="none")
      # ax.set(xlabel="RA (J2000)", ylabel="Dec (J2000)")
      ax.set(xlabel=" ", ylabel=" ", xlim=[0, 1740], ylim=[0, 1460])
  for ax in axes[:, 1:].flat:
      lon, lat = ax.coords
      lat.set_ticklabel_visible(False)

  ny, nx = hdu.data.shape
  fig.tight_layout(
      rect=[0.05, 0.0, 1.0, 1.0],
      h_pad=0.3, w_pad=0,
  )
  fig.savefig(figfile, dpi=200)
#+end_src

#+RESULTS: raman-multi-absorption-features
[[file:raman-multi-absorption-features.jpg]]


** Correlation of EW(6633) with R_wing
#+begin_src python :return figfile :results file
  from pathlib import Path
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.io import fits
  from astropy.wcs import WCS
  from numpy.random import default_rng
  import regions as rg
  import seaborn as sns
  sns.set_color_codes()

  figfile = "correlation-6633-Rwing.pdf"
  datapath = Path("../data/orion-muse")
  datapath2 = Path("../../OrionMuse/LineMaps")

  fig, ax = plt.subplots(figsize=(5,5))



  # Read in Rwing
  xlabel = r"Raman wing to continuum ratio, $R_\mathrm{wing}$"
  hdu = fits.open(datapath / f"ratio-raman-wing-to-continuum-6634-bin032.fits")["SCALED"]
  xdata = hdu.data

  # Read in the 6633 equivalent widths
  ylabel = r"Absorption Equivalent Width, $W_\lambda^\mathrm{obs}(6633)$, Å"
  hdu = fits.open(datapath / f"ew-N_III-6634-multibin-SN0007.fits")["SCALED"]
  #hdu = fits.open(datapath / f"ew-N_III-6634-bin064.fits")["SCALED"]
  ydata = -hdu.data

  #Read in continuum intensity for weights
  hdu = fits.open(datapath / f"continuum-N_III-6634-bin032.fits")["SCALED"]
  wdata = hdu.data

  # Calculate mask before adding noise
  m = np.isfinite(xdata) & np.isfinite(ydata) & (xdata > 0.0) & (ydata > 0.0)

  # Set up regions
  regions = rg.read_ds9("../data/raman-extract-boxes.reg")
  regions2 = rg.read_ds9("../data/raman-faint2-boxes.reg")
  ny, nx = hdu.data.shape
  w = WCS(hdu.header)
  xreg, yreg, labreg = [], [], []
  for region in regions + regions2:
      mask = region.to_pixel(w.celestial).to_mask().to_image((ny, nx))
      labreg.append(region.meta["label"])
      xreg.append(np.average(xdata[m], weights=wdata[m]*mask[m]))
      yreg.append(np.average(ydata[m], weights=wdata[m]*mask[m]))

  ymean = np.average(ydata[m], weights=wdata[m])
  xmean = np.average(xdata[m], weights=wdata[m])
  gradient = ymean / xmean

  rng = default_rng()
  ynoise = 0.005*rng.standard_normal(ydata.shape)
  # ydata += ynoise

  # Calculate joint histogram
  xmin, xmax = 0.0, 0.15
  ymin, ymax = 0.0, 0.55

  H, xedges, yedges = np.histogram2d(
      xdata[m],
      ydata[m],
      30,
      [[xmin, xmax], [ymin, ymax]],
      weights=wdata[m],
  )
  gamma = 1.3
  ax.imshow(H.T**(1/gamma),
            extent=[xmin, xmax, ymin, ymax],
            cmap="magma_r",
            origin="lower",
            )

  xgrid = np.linspace(xmin, xmax)
  ax.plot(xgrid, xgrid * gradient, ls="--", color="k")
  ax.plot(xgrid, 0.5 * xgrid * gradient, ls=":", color="k")
  ax.plot(xgrid, 2.0 * xgrid * gradient, ls=":", color="k")
  angle = np.degrees(np.arctan(gradient * (xmax - xmin) / (ymax - ymin)))
  ax.text(
      0.14,
      0.14*gradient - 0.02,
      fr"$W_\lambda = {gradient:.2f} \, R_\mathrm{{wing}} $",
      ha="right",
      va="top",
      rotation=angle,
  )
  angle = np.degrees(np.arctan(0.5 * gradient * (xmax - xmin) / (ymax - ymin)))
  ax.text(
      0.13,
      0.13*0.5*gradient - 0.01,
      fr"50%",
      ha="right",
      va="top",
      rotation=angle,
  )
  angle = np.degrees(np.arctan(2.0 * gradient * (xmax - xmin) / (ymax - ymin)))
  ax.text(
      0.09,
      0.09*2*gradient - 0.03,
      fr"200%",
      ha="right",
      va="top",
      rotation=angle,
  )


  # Finally, plot the regions
  ax.scatter(xreg, yreg, marker="o", color="k", facecolor="w", zorder=100)
  for x, y, s in zip(xreg, yreg, labreg):
      color = "w" if s in ["Bar", "Big Arc", "Dark Bay"] else "k"
      ha, sign = ("right", -1) if s in ["Big Arc",] else ("left", 1)
      ax.annotate(s, (x, y),
                  xytext=(sign*3, 3),
                  textcoords="offset points",
                  color=color,
                  fontweight="bold",
                  ha=ha,
                  )

  ax.set(
      xlabel=xlabel,
      ylabel=ylabel,
      xlim=[xmin, xmax],
      ylim=[ymin, ymax],
  )
  ax.set_aspect( (xmax - xmin) / (ymax - ymin) )
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:correlation-6633-Rwing.pdf]]



** Correlation of EW(DIB 5781) with reddening E(B-V)
+ This is discussed in [[id:0E12E121-C1E6-453E-ACD5-B7A0BBAD92F6][Correlation between reddening and DIB]]
+ We found E(B - V) = 0.3845 C(Hb)
+ We will read in the data files the same as when generating the maps

#+begin_src python :return figfile :results file
  from pathlib import Path
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.io import fits
  from numpy.random import default_rng
  import seaborn as sns
  sns.set_color_codes()

  figfile = "correlation-DIB-reddening.pdf"
  datapath = Path("../data/orion-muse")
  datapath2 = Path("../../OrionMuse/LineMaps")

  fig, ax = plt.subplots(figsize=(5,5))



  # Read in the extinction
  xlabel = r"Reddening, $E(B - V)$"
  hdu = fits.open(datapath / f"C_H_beta-bin004.fits")["SCALED"]
  #hdu = fits.open(datapath / f"C_H_beta_9229-bin004.fits")["SCALED"]
  # Convert from C(Hb) to reddening E(B - V)
  xdata = 0.3845*hdu.data

  # Read in the DIB equivalent widths
  ylabel = r"DIB Equivalent Width $W_\lambda(5780)$, Å"
  hdua = fits.open(datapath / f"ew-DIB-5781-bin032.fits")["SCALED"]
  hdub = fits.open(datapath2 / f"ew-He_II-5785-multibin-SN0005.fits")["SCALED"]
  hduc = fits.open(datapath2 / f"ew-He_II-5785-multibin-SN0007.fits")["SCALED"]
  ydata = -np.nanmedian(
      np.stack( (hdua.data, hdub.data, hduc.data) ),
      axis=0,
  )
  rng = default_rng()
  ynoise = 0.01*rng.standard_normal(ydata.shape)
  ydata += ynoise

  #Read in continuum intensity for weights
  hdu = fits.open(datapath / f"continuum-DIB-5781-bin032.fits")["SCALED"]
  wdata = hdu.data


  # Calculate joint histogram
  xmin, xmax = ymin, ymax = 0.0, 0.55
  m = np.isfinite(xdata) & np.isfinite(ydata)
  H, xedges, yedges = np.histogram2d(
      xdata[m],
      ydata[m],
      30,
      [[xmin, xmax], [ymin, ymax]],
      weights=wdata[m],
  )
  gamma = 1.5
  ax.imshow(H.T**(1/gamma),
            extent=[xmin, xmax, ymin, ymax],
            cmap="magma_r",
            origin="lower",
            )
  #ax.scatter(xdata[m], ydata[m], s=2, marker=".", alpha=0.002)
  xgrid = np.linspace(xmin, xmax)
  for m, c, dm, dc, ls in [
          [0.813, -0.0032, 0.073, 0.0034, "--"],
          [0.5058, -0.0142, 0.0503, 0.0315, ":"],
  ]:
      yspread = np.stack(
          (
              (m + dm)*xgrid + (c + dc),
              (m - dm)*xgrid + (c + dc),
              (m + dm)*xgrid + (c - dc),
              (m - dm)*xgrid + (c - dc),
          )
      )
      ytop = np.max(yspread, axis=0)
      ybot = np.min(yspread, axis=0)
      # ax.fill_between(xgrid, ybot, ytop, color="c", alpha=0.2, lw=0.0)
      ax.plot(xgrid, ybot, ls=ls, color="0.5")
      ax.plot(xgrid, ytop, ls=ls, color="0.5")
      ax.plot(xgrid, m*xgrid + c, ls=ls, color="k")

  # Values for th1B and th1C from Friedman:2011a
  #ax.errorbar(0.54, 61/1000, 6/1000)
  ax.scatter(0.34, 76/1000, s=200, marker="*", color="c", ec="k")

  ax.set(
      xlabel=xlabel,
      ylabel=ylabel,
      xlim=[xmin, xmax],
      ylim=[ymin, ymax],
  )
  ax.set_aspect("equal")
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS:
[[file:correlation-DIB-reddening.pdf]]

* Absorption at 6634 \AA in other regions
** TODO RCW 49
+ Illuminated by the massive cluster Westerlund 2, supposedly second most massive in Milky Way
+ Zeidler:2018a
+ They seem to have a lot of MUSE data - including deep fields
  + Now downloading to [[file:~/Work/Muse-Hii-Data/RCW49/][file:~/Work/Muse-Hii-Data/RCW49/]]
+ We see the 6614 absorption line, but that seems to be scattered stellar
  + Or DIB - see below
+ [2019-08-06 Tue 22:10] I don't see any evidence of the Raman scattering or the 6634 line in what I have looked at so far
** 30 Doradus: Tarantula
+ I see absolutely nothing
+ Files are at
  + [[file:~/Work/Muse-Hii-Data/30Dor]]
+ [2019-08-01 Thu]  *I do see the line!!*
+ Much weaker than Orion, but it looks very similar
+ We are looking in an 8x8 arcsec box
+ A good place is centered on 84.642977 -69.10802
+ Minimum absorption is at observed wavelength of 6638.74 and 6637.49 - about halfway between them, so 6638.1 \AA
+ So is rest wavelength is 6633.9 then V = +190 km/s, whereas [N II] is at +250
  + From below, we have a DIB with 6632.85, which would give 5.25 \AA or +240, which is much better
+ Absorption depth:
  + Mean: (193.36 - 188.56)/193.36 = 0.0248
  + Median: (186.45 - 181.59)/186.45 = 0.026
  + So less than 3%, whereas in Orion S it is up to 8%
*** Other lines with different behavior
+ Si III 5740 is seen in emission and absorption (in some stars)
+ DIB 5781 is seen in absorption everywhere - need to check if depth scales with reddening
+ 
+ He II 4686 broad emission line is seen everywhere
  + Can be used to track scattered starlight from the WR stars (there are about 3 of them in the A field)
  + Some stars have absorption in this line, but that doesn't seem to be imprinted on the nebula much
  + There is an artefact at 4688 \to 4691 \AA in the top center of field A
    + At first I thought there was some narrow absorption, but it is in bizarre horizontal stripes
    + Also around 6252 \AA in same region
*** Calculate 6634 absorption map for Tarantula

#+begin_src python
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS

  datadir = "/Users/will/Work/Muse-Hii-Data/30Dor"

  hdu = fits.open(f"{datadir}/ADP.2016-07-14T14:17:17.826.fits")["DATA"]

  slice_6634 = slice(1630, 1631)
  slice_cont = slice(1634, 1638)

  map_6634 = hdu.data[slice_6634, :, :].mean(axis=0)
  map_cont = hdu.data[slice_cont, :, :].mean(axis=0)

  ab_depth = 1.0 - map_6634/map_cont

  wcs = WCS(hdu.header).celestial
  for name, data in [
          ["6634-abs-depth", ab_depth],
          ["6634-line-map", map_6634],
          ["6634-cont-map", map_cont],
          ["6634-line-minus-cont-map", map_6634 - map_cont],
  ]:
      fits.PrimaryHDU(
          header=wcs.to_header(),
          data=data,
      ).writeto(f"../data/30-Dor-A-{name}.fits", overwrite=True)
#+end_src

#+RESULTS:
: None
** Carina
+ The cube I got was in a stupid place - need to get a better one
** TODO Other LMC regions
+ N44 and N180
  + See McLeod:2019a
  + Neither of these are the same as the Dopita ones

* Characteristics of Orion PDRs
+ Bright Bar
  + Edge on
+ Orion S

* Absorption line profile
+ Can we get a good handle on how broad it is
+ Make a mask that includes the best points (do this for each object)
+ Adjust the wavelengths according to the velocities maybe
  + This would give better sampling of the profile
  + But which line do we use? No guarantee that absorbing medium shares kinematics of the emitting gas, although in Carina this will probably be true
+ If width is not too small, could be DIB
  + The 6614 \AA DIB (which we don't see) has a width of 50 km/s or 1.1 \AA, which we would not well resolve (see Krelowski:2018a, pronounced KreWoVski because it is a ł)
  + In fact, Galazutdinov:2000a show a DIB at 6632.85, which might possibly be our feature
    + It isn't listed as new, so it must be in previous papers too
    + It is only seen in highly reddened stars, not in HD 23180
** DONE [#A] Co-adding Keck spectra to get a less noisy profile
CLOSED: [2019-08-24 Sat 22:09]
+ I could go through all the steps I did for the proplyd spectra
  + This would give a nicely calibrated, rectified spectrum
  + See [[id:46ACEA74-2E70-473B-9344-DF20000DB765][Extracting each line]] in Keck notes




* Antecedents for Raman scattering
** Raman scattering theory
+ Hubeny & Mihalas book
  + 
*** Terminology
+ Configuration is n, l for each electron
+ Term is n, S, L
+ Level is n, S, L, J
+ State is n, S, L, J, M_J
*** Wavelength mapping between Ly\beta and H\alpha domain
+ Let \nu_0 be pre-scattered and \nu_1 be post-scattered frequency
  + \Delta\nu_1 = \Delta\nu_0 for Raman scattering
  + \lambda_1 = c/\nu_1 => d\lambda_1/d\nu_1 = -c / \nu_1^2 = -\lambda_1^2 / c 
  + \Delta\lambda_1 = d\lambda_1/d\nu_1 \Delta\nu_1 = -\lambda_1^2 \Delta\nu_1 / c
  + \Delta\lambda_0 = -\lambda_0^2 \Delta\nu_0 / c
  + \Delta\lambda_1 / \Delta\lambda_0 = (\lambda_1^2 / \lambda_0^2) (\Delta\nu_1 / \Delta\nu_0) = (\lambda_1 / \lambda_0)^2
+ So wavelength differences \Delta\lambda transform as \lambda^2
+ And velocity differences \Delta{}u = c \Delta\lambda / \lambda scale as \lambda
+ Velocity-scale factor between Ly\beta and H\alpha is \lambda_1 / \lambda_0 = (1 - 1/9) / (1/4 - 1/9) = 6.4
+ Wavelength-scale factor is 40.96
*** Redo everything in vacuum wavenumbers
+ This is the only way that makes sense
**** DONE Mean wavelengths of Ly\beta and H\alpha
CLOSED: [2019-08-25 Sun 19:55]
Ly\beta - calculating wavnum from wav since it has much higher precision than 0.01 cm^-1
| J_k |  g_k |            wav |     wavnum |
|-----+------+----------------+------------|
| 1.5 |   4. | 1025.721824823 | 97492.3196 |
| 0.5 |   2. | 1025.722965425 | 97492.2112 |
|-----+------+----------------+------------|
|     | Mean | 1025.722205020 | 97492.2835 |
#+TBLFM: $2=2 $1 + 1::$4=1e8/$3;f4::@4$2=Mean::@4$3=(@2 @2$2 + @3 @3$2) / (@2$2 + @3$2);f9::@4$4=(@2 @2$2 + @3 @3$2) / (@2$2 + @3$2);f4

Average frequency and wavenumber of H\alpha (2s \to 3p)
|                            |   |               | freq, cm^-1 | check freq |
|----------------------------+---+---------------+-------------+------------|
| H I H\alpha 2s 2S_{1/2 }\to 3p 2P_{1/2} | 2 | 6564.58439369 |    15233.26 | 15233.2568 |
| H I H\alpha 2s 2S_{1/2 }\to 3p 2P_{3/2} | 4 | 6564.53767551 |    15233.37 | 15233.3652 |
|----------------------------+---+---------------+-------------+------------|
| H I H\alpha 2s \to 3p             | 6 | 6564.55324823 |    15233.33 | 15233.3291 |
#+TBLFM: $5=1e8/$3 ; f4::@4$3=(2 @2  + 4 @3) / 6 ; f8::@4$4=(2 @2  + 4 @3) / 6 ; f2

Comparison with Clegg:1999a

Clegg reference wavelengths
| Ly\alpha | 1215.6841 | vac |
| Ly\beta  | 1025.7335 |     |
| H\alpha  | 6562.8812 | air |

Fine-structure components are in his Tab 2a, but he has higher level first.  So for H\alpha fluoresced by Ly\beta, we want 3p \to 2s, which is indices 3 and 4. 

These have \Delta\lambda = -0.110 and -0.157 \AA respectively with respect to the reference wavelength (Tab 3). 

So, we have for H\alpha
| Index |                     |      \Delta\lambda |         \lambda | g |
|-------+---------------------+--------+----------+---|
|     3 | 3p 2P_{1/2} \to 2s 2S_{1/2} | -0.110 | 6562.771 | 2 |
|     4 | 3p 2P_{3/2} \to 2s 2S_{1/2} | -0.157 | 6562.724 | 4 |
|-------+---------------------+--------+----------+---|
|       |                     |        | 6562.740 |   |
#+TBLFM: $4=6562.8812 + $3;f3::@4$4=(2 @2  + 4 @3) / 6 ; f3

This is /exactly/ the same as the 6562.7404 that I derive below for the air wavelength. 


Note that Clegg says:
: We further assume that b_nlj = b_nl, with the values of b_nl being calculated as described above. This is equivalent to the assumption that the j-levels associated with a particular nl are populated according to their statistical weights (2j + 1).



**** DONE Application to the O I lines
CLOSED: [2019-08-24 Sat 22:12]

Compare O I lines with Ly \beta (average of doublet)
| Line                                        |     Wav, \AA | Freq, cm^-1 |   d freq |
|---------------------------------------------+------------+-------------+----------|
| H I Ly \beta  1s 2S_{1/2 }\to 3p 2P_{1/2,3/2}            | 1025.72220 |   97492.283 |    0.000 |
|---------------------------------------------+------------+-------------+----------|
| O I 2s^2 2p^4 3P_0 \to 2s^2 2p^3 (4S) 3d 3D_1 | 1028.15729 |   97261.383 | -230.900 |
|---------------------------------------------+------------+-------------+----------|
| O I 2s^2 2p^4 3P_1 \to 2s^2 2p^3 (4S) 3d 3D_1 | 1027.43139 |   97330.100 | -162.183 |
| O I 2s^2 2p^4 3P_1 \to 2s^2 2p^3 (4S) 3d 3D_2 | 1027.43077 |   97330.159 | -162.124 |
|---------------------------------------------+------------+-------------+----------|
| O I 2s^2 2p^4 3P_2 \to 2s^2 2p^3 (4S) 3d 3D_1 | 1025.76339 |   97488.369 |   -3.914 |
| O I 2s^2 2p^4 3P_2 \to 2s^2 2p^3 (4S) 3d 3D_2 | 1025.76276 |   97488.429 |   -3.854 |
| O I 2s^2 2p^4 3P_2 \to 2s^2 2p^3 (4S) 3d 3D_3 | 1025.76170 |   97488.530 |   -3.753 |
|---------------------------------------------+------------+-------------+----------|
#+TBLFM: $4=$3 - @2$3;f3::




O I Line transformed to H\alpha domain
|   H\alpha freq | d freq             | O I freq            | O I wav              |
|-----------+--------------------+---------------------+----------------------|
| 15233.329 | -230.900 +/- 0.008 | 15002.429 +/- 0.008 | 6665.5873 +/- 0.0036 |
| 15233.329 | -162.183 +/- 0.008 | 15071.146 +/- 0.008 | 6635.1955 +/- 0.0035 |
| 15233.329 | -162.124 +/- 0.008 | 15071.205 +/- 0.008 | 6635.1695 +/- 0.0035 |
| 15233.329 | -3.914 +/- 0.008   | 15229.415 +/- 0.008 | 6566.2404 +/- 0.0034 |
| 15233.329 | -3.854 +/- 0.008   | 15229.475 +/- 0.008 | 6566.2145 +/- 0.0034 |
| 15233.329 | -3.753 +/- 0.008   | 15229.576 +/- 0.008 | 6566.1710 +/- 0.0034 |
#+TBLFM: $3=$1 + $2;f3::$4=1e8 / $3;f4

Now convert back to air wavelengths
+ vac/air = 1 + 8.06051e-5 + 2.480990e-2 / (132.274 - (1e4/wav)**2) + 1.74557e-4 / (39.32957 - (1e4/wav)**2)
+ That is from Morton:2003b who cite Peck & Reeder (1972)

| Line             | vac                  | n                            | air                  |
|------------------+----------------------+------------------------------+----------------------|
| H\alpha 2s \to 3p       | 6564.553248          | 1.00027624                   | 6562.7404            |
| O I 3P_0 \to  3D_1 | 6665.5873 +/- 0.0036 | 1.00027612 +/- 3.5811244e-12 | 6663.7473 +/- 0.0036 |
| O I 3P_1 \to  3D_1 | 6635.1955 +/- 0.0035 | 1.00027616 +/- 3.5308534e-12 | 6633.3636 +/- 0.0035 |
| O I 3P_1 \to  3D_2 | 6635.1695 +/- 0.0035 | 1.00027616 +/- 3.5308959e-12 | 6633.3376 +/- 0.0035 |
| O I 3P_2 \to  3D_1 | 6566.2404 +/- 0.0034 | 1.00027623 +/- 3.5418312e-12 | 6564.4271 +/- 0.0034 |
| O I 3P_2 \to  3D_2 | 6566.2145 +/- 0.0034 | 1.00027623 +/- 3.5418741e-12 | 6564.4012 +/- 0.0034 |
| O I 3P_2 \to  3D_3 | 6566.1710 +/- 0.0034 | 1.00027623 +/- 3.5419462e-12 | 6564.3577 +/- 0.0034 |
#+TBLFM: $3=1 + 8.06051e-5 + (2.480990e-2 / (132.274 - (1e4/$2)**2)) + (1.74557e-4 / (39.32957 - (1e4/$2)**2)) ;f8::$4=$2/$3;f4

Accuracy in wavelength (0.003 to 0.004 \AA) corresponds to:
+ 0.16 km/s in H\alpha domain
+ 0.025 km/s in Raman domain !

Note that H\alpha is -2.27 km/s shifted with respect to the recombination value, which includes the 3d-2p, 3s-2p transitions. 



Mean wavelengths of blended components
|       wav | J_k | g_k |
|-----------+-----+-----|
| 6633.3636 |   1 |   3 |
| 6633.3376 |   2 |   5 |
|-----------+-----+-----|
| 6633.3474 |     |   1 |
#+TBLFM: $3=2 $2 + 1::@4$1=(@2$1 @2$3 + @3$1 @3$3)/(@2$3 + @3$3)

|       wav | J_k | g_k |
|-----------+-----+-----|
| 6564.4271 |   1 |   3 |
| 6564.4012 |   2 |   5 |
| 6564.3577 |   3 |   7 |
|-----------+-----+-----|
| 6564.3861 |     |   1 |
#+TBLFM: $3=2 $2 + 1::@5$1=(@2$1 @2$3 + @3$1 @3$3 + @4$1 @4$3)/(@2$3 + @3$3 + @4$3)


Final table
| Transition          |         \lambda_1 | \nu_1, cm^-1 |       d \nu |        \nu_2 |        \lambda_2 |      \lambda_air |
|---------------------+------------+-----------+----------+-----------+-----------+-----------|
| H I {1,2}s \to 3p     | 1025.72220 | 97492.283 |    0.000 | 15233.329 |  6564.553 |  6562.740 |
|---------------------+------------+-----------+----------+-----------+-----------+-----------|
| O I J = 0 \to 1       | 1028.15729 | 97261.383 | -230.900 | 15002.429 |  6665.587 |  6663.747 |
| O I J = 1 \to 1       | 1027.43139 | 97330.100 | -162.183 | 15071.146 |  6635.196 |  6633.364 |
| O I J = 1 \to 2       | 1027.43077 | 97330.159 | -162.124 | 15071.205 |  6635.170 |  6633.338 |
| O I J = 2 \to 1       | 1025.76339 | 97488.369 |   -3.914 | 15229.415 |  6566.240 |  6564.427 |
| O I J = 2 \to 2       | 1025.76276 | 97488.429 |   -3.854 | 15229.475 |  6566.215 |  6564.401 |
| O I J = 2 \to 3       | 1025.76170 | 97488.530 |   -3.753 | 15229.576 |  6566.171 |  6564.358 |
|---------------------+------------+-----------+----------+-----------+-----------+-----------|
| Si II J = 1/2 \to 1/2 |  1020.6989 | 97972.086 |  479.803 | 15713.132 | 6364.1036 | 6362.3446 |
| Si II J = 1/2 \to 3/2 |  1023.7001 | 97684.859 |  192.576 | 15425.905 | 6482.6018 | 6480.8110 |

Scale factors:
+ \nu_1/\nu_2 = 97492.283/15233.329 = 6.3999329 +/- 0.0000004
+ (\nu_1/\nu_2)^2 = 40.959141 +/- 0.000005


***** Lines in the blue wing
****** Possibility at air wavelength of 6494.75

| Air             | n                            | Vac              | FUV                |
|-----------------+------------------------------+------------------+--------------------|
| 6494.75 +/- 0.5 | 1.00027632 +/- 5.3868098e-10 | 6496.54 +/- 0.50 | 1024.047 +/- 0.012 |
#+TBLFM: $2=1 + 8.06051e-5 + (2.480990e-2 / (132.274 - (1e4/$1)**2)) + (1.74557e-4 / (39.32957 - (1e4/$1)**2)) ;f8::$3=$1 $2;f2::$4=1/(1/$3 - 1/6564.553 + 1/1025.72220);f3

This looks like it is the Si II line, *if* that is really at 1024.03, as Cloudy says
****** Si II lines at 102X \AA
+ Peter has
#+begin_example

  Atomic Line List version: 2.05b21   Constructed: 2017-11-07 13:41 GMT
  Wavelength range: 0 - inf   Unit: Angstrom   Type: Vacuum
  Radial velocity: 0 km/s
  Element/Spectrum: Si II

  -LAB-WAVL-ANG-VAC-|-DLAM--|-SPC--|TT|CONFIGURATION|-TERM--|-J_i-J_k-|--A_ki--|--f_ik--|---S----|-TPF-|--LVL-EN--CM-1---|-REF---|
     1020.6989       6.6E-04  Si II E1 3s2.3p-3s2.5s 2Po-2S  1/2 - 1/2 9.67E+07 1.51E-02 1.01E-01     3   0.00 - 97972.09 029,ASD
     1023.7001       6.6E-04  Si II E1 3s2.3p-3s2.5s 2Po-2S  3/2 - 1/2 1.92E+08 1.51E-02 2.03E-01     3 287.23 - 97972.09 029,ASD

  gk*Aki weighted average wavelength:    1022.6938      
#+end_example
+ STOUT has wavenumber of "3s2.3p 2P*3/2" being 287.240 instead of 287.23
+ And 97972.090 for "3s2.5s 2S1/2"
+ This gives a wavelength of 1e8/(97972.090 - 287.240) = 1023.70019507
+ Observed wavelength is 1023.693
+ In ~LineLabels.txt~ there is 1024.03
  + This corresponds to wavenumber of 97653.3890609
  + In ~level2.dat~ there is 
    : 14  2  6  2  9.04E-02 9.76534E+04   2.0
  + This would give 1e8/9.76534E+04 = 1024.02988529 so this is clearly the same one
  + The gf value of 9.04E-02 is consistent with 1.51E-02 (2 + 4) = 0.0906
  + *This was just a bad wavelength from Opacity Project* I have the line with STOUT now

|        \lambda_1 |        \nu_1 |     \nu(Lyb) |      d \nu |      \nu(Ha) |        \nu_2 |        \lambda_2 |          n |     \lambda(air) |
|-----------+-----------+-----------+---------+-----------+-----------+-----------+------------+-----------|
| 1020.6989 | 97972.086 | 97492.283 | 479.803 | 15233.329 | 15713.132 | 6364.1036 | 1.00027647 | 6362.3446 |
| 1023.7001 | 97684.859 | 97492.283 | 192.576 | 15233.329 | 15425.905 | 6482.6018 | 1.00027633 | 6480.8110 |
#+TBLFM: $2=1e8/$-1::$4=$2 - $3::$6=$4 + $5::$7=1e8/$6::$8=1 + 8.06051e-5 + (2.480990e-2 / (132.274 - (1e4/$7)**2)) + (1.74557e-4 / (39.32957 - (1e4/$7)**2)) ;f8::$9=$7/$8;f4
******* Optical Si II lines that are pumped via 5s
Vacuum wavelengths
#+begin_example
  LAB-WAVL-ANG-VAC-|-SPC--|TT|CONFIGURATION|-TERM--|-J_i-J_k-|--A_ki--|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
     1020.6989        Si II E1 3s2.3p-3s2.5s 2Po-2S  1/2 - 1/2 9.67E+07     3     0.00 - 97972.09 029,ASD
     1023.7001        Si II E1 3s2.3p-3s2.5s 2Po-2S  3/2 - 1/2 1.92E+08     3   287.23 - 97972.09 029,ASD
     5959.21          Si II E1 3s2.4p-3s2.5s 2Po-2S  1/2 - 1/2 4.31E+07     3 81191.34 - 97972.09 ASD
     5980.59          Si II E1 3s2.4p-3s2.5s 2Po-2S  3/2 - 1/2 8.52E+07     3 81251.32 - 97972.09 ASD
#+end_example

Air wavelengths
#+begin_example
  -LAB-WAVL-ANG-AIR-|-SPC--|TT|CONFIGURATION|-TERM--|-J_i-J_k-|--A_ki--|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
     5957.56          Si II E1 3s2.4p-3s2.5s 2Po-2S  1/2 - 1/2 4.31E+07     3 81191.34 - 97972.09 ASD
     5978.93          Si II E1 3s2.4p-3s2.5s 2Po-2S  3/2 - 1/2 8.52E+07     3 81251.32 - 97972.09 ASD
#+end_example

So these are the 5979 and 5958 lines, where the first should be stronger.

The 5958 line is blended with O I 5958.39, which explains why their ratio is not 2!


**** DONE Data from Peter's Atomic Line List with energies in wave numbers
CLOSED: [2019-08-24 Sat 22:12]
Ly \beta (vacuum)
: -LAB-WAVL-ANG-VAC-|-DLAM--|SPC-|TT|CONF-|-TERM--|-J_i-J_k-|--A_ki--|-TPF-|-LVL-EN--CM-1--|-REF---|
:    1025.721824823  1.0E-08  H I E1 1s-3p  2S-2Po 1/2 - 3/2 1.67E+08    28 0.00 - 97492.32 007
:    1025.722965425  1.0E-08  H I E1 1s-3p  2S-2Po 1/2 - 1/2 1.67E+08    28 0.00 - 97492.21 007

H \alpha (vacuum too)
: -LAB-WAVL-ANG-VAC-|-DLAM--|SPC-|TT|CONF-|-TERM--|-J_i-J_k-|--A_ki--|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
:    6564.52254639   3.9E-08  H I E1 2p-3d 2Po-2D  1/2 - 3/2 5.39E+07    28 82258.92 - 97492.32 007
:    6564.53767551   5.7E-08  H I E1 2s-3p  2S-2Po 1/2 - 3/2 2.24E+07    28 82258.95 - 97492.32 007
:    6564.56466153   4.1E-08  H I E1 2p-3s 2Po-2S  1/2 - 1/2 2.10E+06    28 82258.92 - 97492.22 007
:    6564.58439369   5.7E-08  H I E1 2s-3p  2S-2Po 1/2 - 1/2 2.24E+07    28 82258.95 - 97492.21 007
:    6564.66464918   3.9E-08  H I E1 2p-3d 2Po-2D  3/2 - 5/2 6.47E+07    28 82259.29 - 97492.36 007
:    6564.68022207   3.9E-08  H I E1 2p-3d 2Po-2D  3/2 - 3/2 1.08E+07    28 82259.29 - 97492.32 007
:    6564.72233922   4.1E-08  H I E1 2p-3s 2Po-2S  3/2 - 1/2 4.21E+06    28 82259.29 - 97492.22 007

+ So, with two decimal places in the wave numbers, we get for the first H\alpha component: 6564.52269355 +/- 4.30929581942e-3
  + This is much less precise than the 4e-8 \AA claimed on the wavelengths, but does this matter?
  + 4e-3 is only 0.2 km/s, which is small
  + For Ly lines the wavelength precision is greater: 1025.72182096 +/- 1.05210525399e-4, which gives 0.03 km/s

O I 
: -LAB-WAVL-ANG-VAC-|-DLAM--|SPC-|TT|---CONFIGURATION----------|-TERM--|J_i-J_k|--A_ki--|-TPF-|--LVL-EN--CM-1---|
:    1025.76161      9.4E-05  O I E1   2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  2 - 3  7.40E+07    15   0.00 - 97488.54 
:    1025.76256      9.4E-05  O I E1   2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  2 - 2  1.84E+07    15   0.00 - 97488.45 
:    1025.76330      9.4E-05  O I E1   2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  2 - 1  2.05E+06    15   0.00 - 97488.38 
:    1027.43051      9.4E-05  O I E1   2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  1 - 2  5.52E+07    15 158.26 - 97488.45 
:    1027.43125      9.4E-05  O I E1   2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  1 - 1  3.06E+07    15 158.26 - 97488.38 
:    1028.15710      9.4E-05  O I E1   2s2.2p4-2s2.2p3.(4So).3d  3P-3Do  0 - 1  4.08E+07    15 226.98 - 97488.38 



*** References for atomic physics
+ O I lines
  + Tayal:2009a theoretical calculations
  + Cashman:2017a and Morton:2003b compilations of data
  + Ivanov:2008a actual measurements of the line wavelengths from UV laser metrology
    + These are the results for our lines of interest
      | Initial \to Final     | Freq, cm^-1 | Wav, nm     |
      |---------------------+-------------+-------------|
      | 3P_0 \to (4S) 3d 3D_1 | 97 261.383  | 102.815 729 |
      | 3P_1 \to (4S) 3d 3D_1 | 97 330.100  | 102.743 139 |
      | 3P_1 \to (4S) 3d 3D_2 | 97 330.159  | 102.743 077 |
      | 3P_2 \to (4S) 3d 3D_1 | 97 488.369  | 102.576 339 |
      | 3P_2 \to (4S) 3d 3D_2 | 97 488.429  | 102.576 276 |
      | 3P_2 \to (4S) 3d 3D_3 | 97 488.530  | 102.576 170 |
    + Strangely, the motivation seems to be measuring cosmic evolution of fine structure constant
    + They get accuracies of \pm 8e-6 nm or \pm 0.008 cm^-1 (relative accuracy better than 1 part in 1e7 or 0.03 km/s)
  + The relative splitting of the ground state 3P_0,1,2 is known even more accurately
    + \pm 0.00001 cm^-1
    + From IR spectroscopy, Zink:1991a
    + Transitions at 63.227 and 145.626 microns
+ H I lines
  + 


*** Column densities
:PROPERTIES:
:ID:       B644E1CC-212F-4A30-9924-04DB7BAADF00
:END:
+ Lee:2009a say that Raman optical depth /is what?/
+ Nussbaumer:1989a have cross sections
  + \sigma = 2e-25 at 1000 \AA and at 1050 \AA, so d\lambda_0 = 25 \AA
  + So at d\lambda_0 = 1 \AA, \sigma = 1.25e-22
  + d\lambda_1 = 40.96 d\lambda_0 => \sigma = 1.25e-22 40.96**2 = 2.1e-19 at d\lambda_1 = 1 \AA
  + Clean regions
    - R007 \Delta\lambda_1 = +(6 \to 8) : \lambda_1 = [6568.7, 6571.25]
    - R011 \Delta\lambda_1 = +(9 \to 12) : \lambda_1 = [6572.1, 6574.65]
    - R040 \Delta\lambda_1 = +(31 \to 48) : \lambda_1 = [6594.2, 6611.2]
    - R057 \Delta\lambda_1 = +(49 \to 65) : \lambda_1 = [6612.05, 6628.2]
    - R087 \Delta\lambda_1 = +(76 \to 98) : \lambda_1 = [6638.4, 6660.5]
    - B006 \Delta\lambda_1 = -(5 \to 7) : \lambda_1 = [6555.95, 6557.65]
    - B009 \Delta\lambda_1 = -(8 \to 10) : \lambda_1 = [6552.55, 6555.1]
  + Regions that need lines removing
    - R136 \Delta\lambda_1 = +(126 \to 146) : \lambda_1 = [6688.55, 6708.95]
      - Moderate contamination
    - B033 \Delta\lambda_1 = -(22 \to 44) : \lambda_1 = [6518.55, 6540.65]
      - Light contamination
    - B054 \Delta\lambda_1 = -(45 \to 63) : \lambda_1 = [6499.85, 6517.7]
      - Light contamination
    - B080 \Delta\lambda_1 = -(66 \to 94) : \lambda_1 = [6469.25, 6496.45]
      - Heavy contamination
  + Table of ones used
    | B133 | -132.78 | [6414.85, 6445.45] |
    | B080 |  -80.08 | [6469.25, 6496.45] |
    | B054 |  -54.16 | [6499.85, 6517.70] |
    | B033 |  -33.33 | [6518.55, 6540.65] |
    | R040 |   39.77 | [6594.2, 6611.2]   |
    | R058 |   57.19 | [6612.05, 6628.2]  |
    | R087 |   86.52 | [6638.4, 6660.5]   |
    | R136 |  135.82 | [6688.55, 6708.95] |
    #+TBLFM: $2=vmean($3 - 6562.74 (1 + (25-16.2)/3e5));f2
    + Rest wavelength is 6562.74, which is 6562.39 in topocentric frame, accounting for -16.2 km/s heliocentric correction
    + But we also want a +25 km/s shift to get to rest frame of Trapezium
  + Mapping variations in \sigma onto typical column densities (assume \tau=1)
    + 10 \AA => \sigma = 2.1e-21 cm^2 => N(H_0) = 5e20 /cm^2
      + Can't really say much about A_V here since dust will be in ionized gas too
    + 100 \AA => \sigma = 2.1e-23 cm^2 => N(H_0) = 5e22 /cm^2
      + => A_V = 24 if \sigma_d = 5e-22 cm^2/H but could be less if dust-gas ratio is low
    + But the total H_0 column a PDR will be limited since the H turns molecular eventually
  + /Most recent Raman cross sections/
    + Chang:2015a
    + Define \Delta V_1 as velocity scale around Ly\beta (and \Delta V_2 around Ly\gamma)
    + Total cross section = 1e-22 @ \Delta V_1 = [-1264, +930] km/s
      + Wavs at Ha are 6563 (1 + 6.4 [-1264, +930]/3e5) = [6386, 6693]
        + \Delta\lambda = [-177, +130] \AA
      + More values in Tab 2, but they don't go to higher cross sections (smaller columns)
    + H\alpha branching ratio is 0.2 \to 0.3 in this range
    + 1027.43 \AA (6634 \AA) corresponds to V_1 = +500 km/s, so \sigma = 3.4596e-22 cm^2
  + Dust extinction should be an important limiting factor
    + Source function, S = j/k

***** Measurements from Chang:2015a figure

****** Summary
+ Define x = \Delta\lambda_2/100 \AA
  + Fits are accurate for x = -2 \to +2
+ H\alpha branching ratio is approx:
  + 0.2238 + 0.0363 x + 0.0024 x^2
+ Blue flank \sigma / 1e-21 is approx
  + (0.2186 - 0.0344 x - 0.0054 x^2) x^-2
  + Application to Blue bands
    |      |         |      x |     f | \sigma_-21 |   f \sigma |
    |------+---------+--------+-------+-------+-------|
    | B133 | -132.78 | -1.328 | 0.180 | 0.144 | 0.026 |
    | B080 |  -80.08 | -0.801 | 0.196 | 0.378 | 0.074 |
    | B054 |  -54.16 | -0.542 | 0.205 | 0.802 | 0.164 |
    | B033 |  -33.33 | -0.333 | 0.212 | 2.069 | 0.439 |
    #+TBLFM: $3=$2/100;f3::$4=0.2238 + 0.0363 $3 + 0.0024 $3**2 ;f3::$5=(0.2186 - 0.0344 $3 - 0.0054 $3**2)/$3**2;f3::$6=$4 $5;f3
+ Red flank \sigma / 1e-21 is approx
  + 0.2367 - 0.0187 x + 0.0041 x^2
  + Application to Red bands
    |      |        |     x |     f | \sigma_-21 |   f \sigma |
    |------+--------+-------+-------+-------+-------|
    | R040 |  39.77 | 0.398 | 0.238 | 1.451 | 0.345 |
    | R058 |  57.19 | 0.572 | 0.244 | 0.695 | 0.170 |
    | R087 |  86.52 | 0.865 | 0.255 | 0.299 | 0.076 |
    | R136 | 135.82 | 1.358 | 0.274 | 0.119 | 0.033 |
    #+TBLFM: $3=$2/100;f3::$4=0.2242 + 0.0344 $3 + 0.0019 $3**2 ;f3::$5=(0.2367 - 0.0187 $3 + 0.0041 $3**2)/$3**2;f3::$6=$4 $5;f3
+ These have now been recalculated with ~np.polyfit~
+ Note that f \sigma, which should be proportional to the wing intensity, is well matched between equivalent blue and red bands
+ The \sigma itself, proportional to optical depth, is about 20% higher on the blue side
+ For larger \Delta\lambda_2, the red side bias becomes more prominent
  + Seen at larger colummns

****** Branching ratio
+ x-axis : 0.62 in = 1000 km/s (zero-point: x = 10 in)
  |     in | \Delta V_1 | in/1000 km/s |
  |--------+-------+--------------|
  |  7.528 | -4000 |        -0.62 |
  |     10 |     0 |            0 |
  | 12.479 |  4000 |         0.62 |
  #+TBLFM: $3=($1-10)/4;f2
+ y axis : 2.33 in per unit (zero-point: y = 4.503 )
  |    in |   f |           |
  |-------+-----+-----------|
  | 4.503 | 0.0 |   0. / 0. |
  | 3.802 | 0.3 | 2.3366667 |
  | 3.101 | 0.6 | 2.3366667 |
  #+TBLFM: $3=(4.503 - $1)/$2
+ Measurements
  #+name: branch-ratio
  |  x, in | y, in |  \Delta V_1 |    \Delta\lambda_2 |      f | Model f |     Err | % Rel Err |
  |--------+-------+--------+--------+--------+---------+---------+-----------|
  |  7.528 | 4.291 | -3987. | -558.2 | 0.0907 |  0.0960 | -0.0053 |      -5.5 |
  |  8.007 | 4.247 | -3215. | -450.1 | 0.1096 |  0.1090 |  0.0006 |       0.6 |
  |  8.551 | 4.191 | -2337. | -327.2 | 0.1335 |  0.1307 |  0.0028 |       2.1 |
  |  9.018 | 4.133 | -1584. | -221.8 | 0.1583 |  0.1551 |  0.0032 |       2.1 |
  |  9.510 | 4.065 |  -790. | -110.6 | 0.1874 |  0.1866 |  0.0008 |       0.4 |
  | 10.001 | 3.979 |     2. |    0.3 | 0.2243 |  0.2239 |  0.0004 |       0.2 |
  | 10.570 | 3.872 |   919. |  128.7 | 0.2700 |  0.2745 | -0.0045 |      -1.6 |
  | 11.001 | 3.770 |  1615. |  226.1 | 0.3137 |  0.3181 | -0.0044 |      -1.4 |
  | 11.622 | 3.595 |  2616. |  366.3 | 0.3886 |  0.3890 | -0.0004 |      -0.1 |
  | 12.021 | 3.469 |  3260. |  456.4 | 0.4425 |  0.4395 |  0.0030 |       0.7 |
  #+TBLFM: $3=1000 ($1 - 10.0) / 0.62;f0::$4=6562.74 6.4 $3 / 3e5 ;f1::$5=(4.503 - $2)/2.3366667;f4::$6=0.2238 + 0.0363 ($4/100) + 0.0024 ($4/100)**2 ;f4::$7=$-2 - $-1;f4::$8=100 $-1/$-2;f1
****** Total cross section
+ y axis: log_10 \sigma = -20 - (y/in)
  
+ Blue flank Measurements
  #+name: blue-flank
  | x, in | y, in |  \Delta V_1 |    \Delta\lambda_2 |         \sigma | 1e22 \sigma (\Delta\lambda_2/100)^2 | Model |  error | % Rel Err |
  |-------+-------+--------+--------+-----------+--------------------+-------+--------+-----------|
  | 8.996 | 2.280 | -1619. | -226.7 | 5.248e-23 |              2.697 | 2.688 | -0.009 |     -0.33 |
  | 9.052 | 2.234 | -1529. | -214.1 | 5.834e-23 |              2.674 | 2.675 |  0.001 |      0.04 |
  | 9.098 | 2.193 | -1455. | -203.7 | 6.412e-23 |              2.661 | 2.663 |  0.002 |      0.08 |
  | 9.139 | 2.154 | -1389. | -194.5 | 7.015e-23 |              2.654 | 2.651 | -0.003 |     -0.11 |
  | 9.205 | 2.091 | -1282. | -179.5 | 8.110e-23 |              2.613 | 2.629 |  0.016 |      0.61 |
  | 9.340 | 1.935 | -1065. | -149.1 | 1.161e-22 |              2.581 | 2.579 | -0.002 |     -0.08 |
  | 9.392 | 1.869 |  -981. | -137.3 | 1.352e-22 |              2.549 | 2.557 |  0.008 |      0.31 |
  | 9.430 | 1.813 |  -919. | -128.7 | 1.538e-22 |              2.547 | 2.539 | -0.008 |     -0.32 |
  | 9.480 | 1.740 |  -839. | -117.5 | 1.820e-22 |              2.513 | 2.516 |  0.003 |      0.12 |
  | 9.525 | 1.667 |  -766. | -107.2 | 2.153e-22 |              2.474 | 2.493 |  0.019 |      0.76 |
  | 9.565 | 1.589 |  -702. |  -98.3 | 2.576e-22 |              2.489 | 2.472 | -0.017 |     -0.69 |
  | 9.607 | 1.509 |  -634. |  -88.8 | 3.097e-22 |              2.442 | 2.449 |  0.007 |      0.29 |
  | 9.640 | 1.429 |  -581. |  -81.3 | 3.724e-22 |              2.461 | 2.430 | -0.031 |     -1.28 |
  | 9.684 | 1.326 |  -510. |  -71.4 | 4.721e-22 |              2.407 | 2.404 | -0.003 |     -0.12 |
  | 9.716 | 1.239 |  -458. |  -64.1 | 5.768e-22 |              2.370 | 2.384 |  0.014 |      0.59 |
  | 9.747 | 1.134 |  -408. |  -57.1 | 7.345e-22 |              2.395 | 2.365 | -0.030 |     -1.27 |
  | 9.767 | 1.075 |  -376. |  -52.6 | 8.414e-22 |              2.328 | 2.352 |  0.024 |      1.02 |
  | 9.782 | 1.015 |  -352. |  -49.3 | 9.661e-22 |              2.348 | 2.342 | -0.006 |     -0.26 |
  | 9.787 | 1.000 |  -344. |  -48.2 |     1e-21 |              2.323 | 2.339 |  0.016 |      0.68 |
  #+TBLFM: $3=1000 ($1 - 10.0) / 0.62;f0::$4=6562.74 6.4 $3 / 3e5 ;f1::$5=10**(-20 - $2);s4::$6=1e22 ($4/100)**2 $5 ;f3::$7=2.186 - 0.344 ($4/100) - 0.054 ($4/100)**2 ;f3::$8=$-1 - $-2;f3::$9=100 $-1/$-2;f2
+ Red flank measurements
  #+name: red-flank
  |  x, in | y, in | \Delta V_1 |   \Delta\lambda_2 |         \sigma | Norm \sigma | Model |  Error |       |
  |--------+-------+-------+-------+-----------+--------+-------+--------+-------|
  | 10.212 | 1.000 |  342. |  47.9 |     1e-21 |  2.294 | 2.278 | -0.016 | -0.70 |
  | 10.229 | 1.071 |  369. |  51.7 | 8.492e-22 |  2.270 | 2.271 |  0.001 |  0.04 |
  | 10.250 | 1.151 |  403. |  56.4 | 7.063e-22 |  2.247 | 2.263 |  0.016 |  0.71 |
  | 10.274 | 1.234 |  442. |  61.9 | 5.834e-22 |  2.235 | 2.253 |  0.018 |  0.80 |
  | 10.304 | 1.321 |  490. |  68.6 | 4.775e-22 |  2.247 | 2.241 | -0.006 | -0.27 |
  | 10.331 | 1.399 |  534. |  74.8 | 3.990e-22 |  2.232 | 2.229 | -0.003 | -0.13 |
  | 10.363 | 1.480 |  585. |  81.9 | 3.311e-22 |  2.221 | 2.217 | -0.004 | -0.18 |
  | 10.397 | 1.560 |  640. |  89.6 | 2.754e-22 |  2.211 | 2.203 | -0.008 | -0.36 |
  | 10.433 | 1.640 |  698. |  97.7 | 2.291e-22 |  2.187 | 2.188 |  0.001 |  0.05 |
  | 10.472 | 1.718 |  761. | 106.5 | 1.914e-22 |  2.171 | 2.172 |  0.001 |  0.05 |
  | 10.514 | 1.794 |  829. | 116.1 | 1.607e-22 |  2.166 | 2.155 | -0.011 | -0.51 |
  | 10.541 | 1.844 |  873. | 122.2 | 1.432e-22 |  2.138 | 2.144 |  0.006 |  0.28 |
  | 10.570 | 1.889 |  919. | 128.7 | 1.291e-22 |  2.138 | 2.133 | -0.005 | -0.23 |
  | 10.686 | 2.061 | 1106. | 154.8 | 8.690e-23 |  2.082 | 2.087 |  0.005 |  0.24 |
  | 10.732 | 2.122 | 1181. | 165.3 | 7.551e-23 |  2.063 | 2.069 |  0.006 |  0.29 |
  | 10.791 | 2.193 | 1276. | 178.6 | 6.412e-23 |  2.045 | 2.046 |  0.001 |  0.05 |
  | 10.847 | 2.256 | 1366. | 191.2 | 5.546e-23 |  2.027 | 2.024 | -0.003 | -0.15 |
  | 10.905 | 2.319 | 1460. | 204.4 | 4.797e-23 |  2.004 | 2.001 | -0.003 | -0.15 |
  | 10.998 | 2.412 | 1610. | 225.4 | 3.873e-23 |  1.968 | 1.966 | -0.002 | -0.10 |
  #+TBLFM: $3=1000 ($1 - 10.0) / 0.62;f0::$4=6562.74 6.4 $3 / 3e5 ;f1::$5=10**(-20 - $2);s4::$6=1e22 ($4/100)**2 $5 ;f3::$7=2.367 - 0.187 ($4/100) + 0.004 ($4/100)**2 ;f3::$8=$-1 - $-2;f3::$9=100 $-1/$-2;f2
****** Fitting polynomials to \sigma and branching ratio
#+name: fit-poly
#+header: :var INTAB=blue-flank XCOL=3 YCOL=5
#+begin_src python :return rslt :results verbatim
  import numpy as np
  arr = np.array(INTAB)
  x = arr[:, XCOL].astype(float)/100.0
  y = arr[:, YCOL].astype(float)

  rslt = list(zip(x, y))

  rslt = np.poly1d(np.polyfit(x, y, deg=2))
#+end_src

#+RESULTS: fit-poly
:           2
: -0.05381 x - 0.3435 x + 2.186

#+call: fit-poly(INTAB=red-flank)

#+RESULTS:
:           2
: 0.004068 x - 0.1866 x + 2.367

#+call: fit-poly(INTAB=branch-ratio, YCOL=4)

#+RESULTS:
:           2
: 0.002363 x + 0.03631 x + 0.2238

**** Transition from optically thick to thin
+ This should happen when N \sigma = 1
+ From our figure, this seems to happen on the red side at around 70 \AA
+ This is x = +0.7
  + \sigma = 0.46e-21 cm^2
  + f_Ha = 0.2504
+ So if this is total \tau = 1, then we get N(H^0) = 2.17e21 atom/cm^2
  + This is almost universal across the different regions (slight evidence that it might be more optically thick in Bar)
+ If we use f_Ha \tau = 1, then we will get a 4 times higher N(H^0) = 8.68e21 atom/cm^2
  + Translating these into extinction, using A_V/N_H = 3e-22 mag cm^2 gives A_V = 0.65 and A_V = 2.6, which are a bit on the high side
+ In the R040 band, mean \Delta\lambda = 36 \AA => x = 0.36
  + \sigma = 1.779e-21 cm^2
  + f_Ha = 0.237
  + \tau is about 1.779/0.46 = 3.87 times larger


***** Spectrum of Trapezium
      :PROPERTIES:
      :ID:       D379B5F6-E638-4F59-960B-5D0BA61F3495
      :END:
+ [[file:~/Work/OrionNI/git-paper/models/individual/th1C.cont][file:~/Work/OrionNI/git-paper/models/individual/th1C.cont]]
+ This was generated for a radius of 1e17 cm
+ Ly\beta is 0.8897 Ryd, where flux is 5.115e3, down from 6.2e3 either side
+ This supposedly is \nu F_\nu, which is same as \lambda F_\lambda
+ So \nu L_\nu = 4 pi 1e17**2 5.115e3 = 6.42769e38 = 1.68264e5 Lsun
  + That seems about right
+ Adding together the other Trapezium stars
  |     |      \nu F_\nu | L / Lsun |
  |-----+-----------+----------|
  | A   | 7.475e+02 | 10**4.45 |
  | B   | 2.213e+00 | 10**3.25 |
  | C   | 5.115e+03 | 10**5.31 |
  | C2  | 2.563e+02 | 10**4.20 |
  | D   | 8.320e+02 | 10**4.47 |
  |-----+-----------+----------|
  | Sum |   6.953e3 | 2.795e5  |
#+TBLFM: @7$2..@7$3=vsum(@I..@II);s4
+ Flux at i-fronts/PDRs
  + Bar is at 0.21 pc => \lambda F_\lambda = (1e17 / 0.21 3.085677582e18)**2 = 0.0238 times Cloudy value = 166 erg/s/cm^2
    + Compare with MMP83 and Habing values
      + Total luminosity of Trapezium stars is 2.8e5 Lsun
      + U = 14.7 L_4 / R_pc**2 = 1e4
      + G_0 \approx 7 U = 7e4
+ Draine \chi normalization
  + (\lambda u_{\lambda})_{1000 \AA} = 4e-14 \chi erg/cm^3
  + c (\lambda u_{\lambda})_{1000 \AA} =1.199e-3 \chi erg/s/cm^2
  + 1000 \AA = 0.912 Ryd, where Cloudy thC model has 6e3, so 17% higher - not worth worrying much about the difference.
  + Anyway, this implies for the bar \chi = 166 1.17 / 1.199e-3 = 1.6e5
+ We can also look at so-called maps of G_0 derived from FIR fluxes

*** Absorption profile of Ly\beta
+ \lambda_0 = 1025.7222 \AA \pm 0.0005 according to Atomic Line List
  + Rest frequency = c/\lambda_0 = 2.92274514484e15 Hz
  + Fine structure has 2 components, both 3p \to 1s
    + 1025.721824823 2P3/2 \to 2S1/2
    + 1025.722965425 2P1/2 \to 2S1/2
    + Difference = 1.140602e-3 \AA = 0.33 km/s, so negligible
+ Natural width \Gamma
  + A_3\to1 = 5.58E+07 Hz
    + Each component 3p \to 1s has A = 1.67E+08
    + But total multiplicity (of 3s, 3p, 3d) is 2 n^2 = 18
    + Multiplicity of 3p is \sum (2 J + 1) = 4 + 2 = 6
    + So effective A is 1.67e8 (6/18) = 5.55e7, close enough
      + Assumes LTE distribution over the \ell levels
      + And the 3s, 3d levels have A = 0 since they cannot decay to 1s
  + But also need to include H\alpha with A = 4.41E+07 Hz
  + So \Gamma = 1e8 Hz almost exactly
  + No, I think we should use the 1.672E+08 + 2.245e7 = 1.897e8
  + So c \Gamma/\nu_0 = \lambda_0 \Gamma = 0.01 km/s, so also negligible even when converted to H\alpha domain
  + Width at H\alpha is 0.64 km/s = 0.014 \AA
  + If Doppler width is 10 km/s,
    + then a = \Gamma / 4\pi \Delta\nu_D 
    + where \Delta\nu_D = v \nu_0/c = 9.75e10 Hz
    + a = 8e-5
**** Compare broadening profiles with Rayleigh/Raman cross section
***** Conclusions on Rayleigh vs Natural damping
+ Rayleigh/Raman scattering and natural broadening (radiation damping) seem to be the same thing seen in different limits (and so is Thomson scattering)
+ A treatment in the classical limit is in Hubeny:2015a leading up to eq (6.16)
+ \[ \sigma(\omega) = \frac{(8\pi e^{4} \omega^{4 }/ 3 m^{2} c^{4})} {(\omega^{2} - \omega_{0}^{2})^{2} + \gamma^{2} \omega^{2}} \]
+ Where we can make use
  + Classical cross section: \(\sigma_{0} = \pi e^{2} / m c\)
  + Classical damping constant: \(\gamma = 2 e^{2} \omega_{0}^{2} / 3 m c^{3}\)
+ So we can re-write the denominator in terms of \(\sigma_{0} \gamma\):
  + \( (8\pi e^{4} \omega^{4}/ 3 m^{2} c^{4}) = 4 \sigma_{0} \gamma \omega^{4} / \omega_{0}^{2}\)
+ But we can also use the Thomson scattering cross section: \(\sigma_{T} = 8\pi e^{4} / 3 m^{2} c^{4}\)
  + Which is found from setting \(\omega_{0} = 0\) and \(\gamma \to 0\)
  + So \(\sigma_{T} = 4 \, \sigma_{0} \, \gamma / \omega_{0}^{2}\)
  + Actually this looks weird since it is \gamma that depends on \(\omega_{0}\) not the other way round: \(\gamma = \omega_{0}^{2} \sigma_{T} / 4 \sigma_{0}\)
  + Remember that \sigma_0 has units of cm^2 Hz so the units work out fine
***** Workings
+ Classical cross section
  + \sigma_0 = \pi e^2 / m c = 0.02654 cm^2 Hz
  + So, this would give a peak cross section of 0.02654/9.75e10 = 2.72e-13 cm^2
  + So with N(H_0) = 1e20, we would get \tau = 2.7e7
  + In fact we have 3.77e6, suggesting f = 0.14
    + Kramers value is (32/3 \pi 3^1/2) (1/1 - 1/9)^-3 (1/(1 27)) = 0.103, close enough
  + So, using natural broadening only
+ Also, possibly, the pressure broadening
  + Except that the densities might not be large enough
  + Note that quasi-static broadening dominates in the wings
    + And this has x**-1.5 dependence, so how come this doesn't beat Raman?
    + This comes from H plus charged particle, so probably irrelevant in PDR
  + More important may be resonance broadening (H with H), but that seems to give a Lorentzian profile
    + From Hubeny+Mihalas, eq 8.54
    + QM calculation gives line width \Gamma_3 = 4 n_1 e^2 f_1n / 3 m \nu_1n
      + n_1 is density of level 1
      + Note that velocity drops out for resonance broadening
      + Check units:
        + e^2 / m c is cm^2 Hz => e^2 / m \nu is cm^3 Hz
      + e^2 / m = c \sigma_0 / \pi => \Gamma_3 = 4 n_1 \lambda_1n \sigma_0 f_1n / 3 \pi
      + So, with n = 1e5 we have  \Gamma_3 = 4 1e5 1025 1e-8 0.02654 0.1 / 3 pi = 1.15455239851e-3 Hz
      + Very small!!! I guess it would be bigger if n = 1e15
+ Doppler broadening
  + In the neutral gas this will be dominated by the turbulent width of 5 km/s
  + So \Delta\nu_D = (5 km/s) / (1025 \AA) = (5 1.0e5 / 1025 1e-8) = 4.878e10 Hz 
+ Natural broadening
  + Taking \Gamma = 1.897e8, then a = \Gamma / 4\pi \Delta\nu_D = 3.1e-4
  + Which means that wings start to become important when \tau > 1e4
  + But we don't really need to use the Doppler width at all
+ Thomson cross section
  + \sigma_T = 6.65e-25 cm^2
+ Simple form for Rayleigh scattering cross section
  + \sigma_Ray = \sigma_T [ \sum_j f_1j \omega^2 / (\omega_1j^2 - \omega^2) ]^2
  + This is what gives \propto \omega^4 for \omega \ll \omega_1j
  + For the near-wing limit (\omega \approx \omega_1j) we can write
    + \omega = \omega_1j (1 + x)
    + [\omega_1j^2 - \omega^2]2 = [(\omega_1j - \omega) (\omega_1j + \omega)]^2 = 4 \omega_1j^4 x^2 (1 + x/2)^2
    + \omega^4 = \omega_1j^4 (1 + x)^4
    + [\omega^2 / (\omega_1j^2 - \omega^2)]^2 = 0.25 (1 + x)^4 / [x^2 (1 + x/2)^2] \approx 1 / 4 x^2
  + This would give \sigma_Ray(x) \approx 0.025 \sigma_T x^-2 for Lyman-\beta
  + For \Delta\lambda_2 = 100 \AA, we have \Delta\lambda_1 = 100/41  = 2.439 \AA => x = 2.38e-3 => \sigma_Ray = 4400 \sigma_T = 2.926e-21
  + Strangely, this is 10 x higher than what we get from Chang:2015a 
*** Fine structure of H\alpha
+ I have been using 6562.79 for wavelength, but should only use the 3p \to 2s components
  + (6562.72481820 4 + 6562.77152383 2) / (4 + 2) = 6562.74038675
  + 2.27 km/s to the blue of where I thought
  + So this will make things worse with the O I line
+ But on other hand, velocity multiplier is now 6562.74038675/1025.7222 = 6.39816549427
  + Which is slightly less
+ Or wav multiplier of 40.9365216921
**** H\alpha multiplet results from Atomic Line List
|     wav (air) |    dwav | lower      | upper      |     A_ki |
|---------------+---------+------------+------------+----------|
| 6562.70969315 | 3.9E-08 | 2p 2Po 1/2 | 3d 2D  3/2 | 5.39E+07 |
| 6562.72481820 | 5.7E-08 | 2s 2S  1/2 | 3p 2Po 3/2 | 2.24E+07 |
| 6562.75179697 | 4.1E-08 | 2p 2Po 1/2 | 3s 2S  1/2 | 2.10E+06 |
| 6562.77152383 | 5.7E-08 | 2s 2S  1/2 | 3p 2Po 1/2 | 2.24E+07 |
| 6562.85175775 | 3.9E-08 | 2p 2Po 3/2 | 3d 2D  5/2 | 6.47E+07 |
| 6562.86732645 | 3.9E-08 | 2p 2Po 3/2 | 3d 2D  3/2 | 1.08E+07 |
| 6562.90943229 | 4.1E-08 | 2p 2Po 3/2 | 3s 2S  1/2 | 4.21E+06 |
|---------------+---------+------------+------------+----------|

g_k*A_ki weighted average wavelength:    6562.79521921  

*** Red-blue asymmetry in wings
+ Variation of Balmer conversion ratio
*** Excitation from continuum versus lines
+ O VI 1032,38 \to 6827,7088 in symbiotic stars
+ 
** Symbiotic stars
+ Lots of work
  + Schmid:1989a
    + O VI lines Raman scatter off Ly\beta to give 6830, 7088 \AA bands
    + This is much further from resonance, so requires much larger column densities than for the H\alpha wings
    + E.g, 6830 - 6563 = 267 \AA
    + Whereas, our wings go out to 6700 - 6563 = 137 \AA
    + So they have 4 times lower cross section for that
    + Also, they have flux ratio 6830/6563 of about 0.05
    + We have 3e4/1.5e9 = 2e-5
      + 3e4 is measured around 6700 \AA, d\lambda = 137 \AA
      + 2.2e5 at 6600 \AA gives Raman/Core of 1.5e-4 for d\lambda = 37 \AA
      + So we would expect 14 times higher, whereas we observe 2.2e5/3e4 = 7.3 /probably the 6700 region is contaminated with weak lines/
    + So, our prediction for 6830/6563 would be 1.5e-4 (37/267)**2 = 2.9e-6
      + This is 6e-5 times what is observed in symbiotic stars
      + So, if this were all down to column density, we would require a *1e4 times smaller column*
      + Although there will also be a dependence on F(Ly\beta) / F(H\alpha), where Ly\beta is measured in the neutral slab
** AGN
+ Nussbaumer:1989a
+ Chang:2015a
  + [CHD+15] Seok-Jun Chang, Jeong-Eun Heo, Francesco Di Mille, Rodolfo Angeloni, Tali Palma, and Hee- Won Lee. Formation of Raman Scattering Wings around H alpha, H beta, and Pa alpha in Active Galactic Nuclei. ApJ, 814(2):98, Dec 2015.
  + Theory but no observations
+ Chang:2017a
  + [CLY17] Seok-Jun Chang, Hee-Won Lee, and Yujin Yang. Polarization of Rayleigh scattered Lyα in active galactic nuclei. MNRAS, 464(4):5018–5027, Feb 2017.
  + This is /Rayleigh/ scattering rather than /Raman/ but presumably would be similar for Raman


** H II regions
Most of these I found from the intro of the Dopita:2016a paper
*** NGC 2363
+ Giant H II region
+ Roy:1992a
  + [RAMD92] Jean-Rene Roy, Martin Aube, Marshall L. McCall, and R. J. Dufour. The Origin of Broad Emission Lines in the Extragalactic Giant H II Region NGC 2363. ApJ, 386:498, Feb 1992.
  + They see wings up to 40 \AA or 2400 km/s, but in H\alpha *and [O III]*
  + This would tend to rule our Raman in this case
+ Binette:2009b
  + [BDU+09] L. Binette, L. Drissen, L. Ubeda, A. C. Raga, C. Robert, and Y. Krongold. The broad Hα, [O III] line wings in stellar supercluster A of NGC 2363 and the turbulent mixing layer hypothesis. A&A, 500(2):817–826, Jun 2009.
  + Ascribe to mixing layer

*** NGC 5471
+ Giant H II region
+ Castaneda:1990a
  + [CVC90] Hector O. Castaneda, J. M. Vilchez, and Marcus V. F. Copetti. A Remarkable Feature in the Giant Extragalactic H II Region NGC 5471. ApJ, 365:164, Dec 1990.
  + Not as broad as in Orion
  + Ascribed to SNR


** PNe

*** Ring Nebula
+ I had high hopes, but I found nothing
+ [[file:~/Dropbox/dib-scatter-hii/data/ring-nebula/]]




* Distance to Orion
+ Bob uses 383 +/- 3 pc from Kounkel:2017a
  + They actually give 388 +/- 5 for ONC and Trapezium
+ GAIA distances to ONC are larger than this:
  + 407 pc Grossschedl:2018a
  + 403 pc Kuhn:2018a
  + (399 \pm 2) pc Stutz:2018b
  + Difference between these is that Stutz includes the zero point correction, while Grossschedl:2018a does not
+ Kounkel:2018a give 389 +/- 3 for the ONC
  + (from parallax of 2.540 +/- 0.001, which naively give 393.70 +/- 0.15)
  + So looks like systematic shift is -5 pc
  + But that is with a very broad definition of ONC
  + Looks like onc-6 is the one around the Huygens region, with parallax of 2.5079 +/- 0.186902 = 398.7 +/- 29.8
+ ONC is at a sharp local maximum in D, and is 20 pc behind other nearby regions of the Orion molecular filament, which are about 10 pc nearer to us
+ *Conclusion* I should use 390 pc

* Location of H^0 that does the Raman scattering
+ Bar
  + Separation is 112 arcsec = 0.21 pc
  + TOTAL brightness jump of 800 (1200 \to 2000)
+ Orion S
  + SW minibar is at 31.77 arcsec = 0.06 pc
  + 3.5 times smaller distance than Bar (if same inclination)
  + So 12.43 times larger flux
  + TOTAL brightness jump of 3000 (3000 \to 6000)
+ General OMC
+ Veil
  + This is probably too far away to worry about
    + III(B) from Abel:2019a notation is the nearest H^0 along the line of sight
    + This is 2pc in front of Trapezium
    + So FUV intensity is 100 times smaller than at the Bar
  + Foreground layers are summarized in Abel:2019a
  + Has N(H^0) = 1.6e21 and 3.2e21 cm^-2 in Comp A and B
  + A_V/N_H = 3.3e-22 mag.cm^2
  + So A_V = 1.584
  + N(H_2) = 1e15 - very small!
  + N(C_I) = 3e13 in Comp B, so 1e-8 H^0, which means most C is C^+


** Observed brightness of Raman wings



** Thickness of different tracers in Bar
:PROPERTIES:
:ID:       BDB015A5-3CE6-4918-92C2-1AF56E4EC808
:END:

*** [O I] 6300
:PROPERTIES:
:ID:       5EFE2490-410C-4198-AC27-5EF41C787ABF
:END:

+ HST image (final631-radec.fits) shows [O I] widths at the Bar of 3 to 4 pixels for the sharp narrow component (more diffuse components are probably continuum or [S III])
+ So this is about 0.35 arcsec
+ Doing the correction for projection means that the [O I] layer has a true thickness of 0.35/1.3125 = 0.267 arcsec = 0.5 mpc = 1.558e15 cm
  + 

** Projected width of thin shells
+ I think this will work out to be of order h, but maybe not
+ Turns out to be observed h = (21/16) x real h, or 1.3125 times
+ See [[https://www.icloud.com/notes/0WgNopfDGdFUU6Md7cBQM9Zog#Apparent_thickness_of_shell][Apple Note "Apparent_thickness_of_shell"]]
*** Relationship between projected FWHM, \Delta, and real width, h, for spherical homogeneous shells
+ This is originally copied from [[file:~/Work/Bowshocks/Jorge/bowshock-shape/doc/analysis.org][file:~/Work/Bowshocks/Jorge/bowshock-shape/doc/analysis.org]]
+ Assuming the following:
  + spherical shell of outer radius R
  + and thickness H
  + constant emission coefficient, \eta 
+ Find surface brightness as function of projected radius, r
  + S(r) = \eta s(r)
  + s(r) is path length through shell
+ For r > R - H:
  + s_1(r) = 2 sqrt(R^2 - r^2)
+ For r < R - H:
  + s_2(r) = 2 {sqrt(R^2 - r^2) - sqrt[ (R - H)^2 - r^2 ]}
+ Maximum occurs at r = R - H: 
  + s_0 =  2 sqrt(R^2 - (R - H)^2 )= 2 sqrt((R^2 - (R^2 -2 R H + H^2)) = 2 sqrt[ H (2 R - H) ]
+ We can eliminate r in favour of X = R - r => r = R - X
+ {0 < X < H} : s_1(r) = 2 sqrt(R^2 - R^2 + 2R X - X^2) = 2 sqrt(X (2R - X))
+ {X > H} : s_2(r) = 2 sqrt(X (2R - X)) - 2 sqrt( R^2 - 2R H + H^2 - R^2 + 2R X - X^2)
  =  2 sqrt(X (2R - X)) - 2 sqrt( X (2R - X) - H (2R - H) )
+ Write h = H/R , x = X/H 
+ => s_1/s_0 = sqrt[ (X (2R - X) / H (2 R - H) ] = sqrt[ (X/H) (2 - X/R) / (2 - H/R)
+ => s_1/s_0 = sqrt[ x (2 - x h) / (2 - h) ]
+ and s_2/s_0 = sqrt[ x (2 - x h) / (2 - h) ] - sqrt{ [x (2 - x h) / (2 - h)] - 1 }
+ => s_2/s_0 =  sqrt[ x (2 - x h) / (2 - h) ] - sqrt( (x - 1) / (2 - h) ) = [sqrt(x(2 - xh)) - sqrt(x - 1)] / sqrt(2 - h)
  + Working: x (2 - x h) - (2 - h) = 2x - xh - 2 + h = -2 (1 - x) + h (1 - x) = (h - 2) ( 1 - x)  = (2 - h) (x - 1)
  + Remember x > 1 for s_2
+ Now, find half width
  + [sqrt(x(2 - xh)) - sqrt(x - 1)] / sqrt(2 - h) = 1/2
  + write x = 1 + y and h \ll 1
  + sqrt((1 + y) (2 - (1 + y) h))


** TODO Geometry of the Bright Bar

*** Physical structure of the Bar
+ As deduced from [[id:1C0DF123-344F-47BD-88B1-B3CBA8BF4EFA][Emission profiles of the Bar]] and other observations and physical principles
+ If we assume that Bar is cylinder with center at peak of 13CO (+55 mpc), then R_c = 1.7e17 cm
  * Thickness of mid-redshifted H\alpha and [O III] emission layer is 15 arcsec = 30 mpc
    * This is about 0.5 R_c, whereas we would expect more like 0.2 R_c
    * So perhaps R_c is larger - 100 mpc - squashed cylinder
      * This is what we might get from RDI
**** Ionization front
+ Sonic point occurs at x = 0.99 or so
+ Very similar to the HST10 proplyd model except scaled to lower densities
  + Proplyd has peak n_e = 1e5 pcc, so if we assume 4000 pcc in Bar, then absorption lengths (1/n\sigma) are scaled by 25 and recombination layer thickness (F / n^2 \alpha_B) are scaled by 625. (Although that is really set by R_c)
+ Density:
**** Neutral mantle
+ [O I] and [C II] far infrared lines
  + Bernard-Salas:2012a
  + Some [C II] comes from ionized gas (< 18%), but most comes from PDR
  + All [O I] comes from PDR
    + /[O I] is interesting since it is transitions between levels in ground configuration, same ones that absorb the FUV lines/
    + Supposedly [O I] 63/145 is diagnostic of opacity since 63 becomes optically thick at high column
  + [C ii]158 μm/[O i]145 μm ratio gives n = 1e4 to 1e5
  + Model has spatial peaks (offset from th1C):
    + [N II] at 111.5 arcsec (I have ionization front at 112)
    + [C II] and [O I] at 123.5 arcsec
  + So that is 12 arcsec = 24 mpc difference
    + This should be relative to my [O II] peak at -7 mpc
    + So that makes it at +17 mpc, as opposed to H_2 peak at +25
  + Needs depth of 0.35 pc
    + This is 3 times higher than the apparent diameter
  + 18% of [O I] and 38% of [C II] and [N II] has to come from a larger scale component (not the Bar)
  + [O I] 63 micron dominates the line cooling budget (72%) but what about the dust?
***** Looking at the Herschel [O I] and [C II] data
+ I have downloaded the dataset 1342191152
+ [[file:~/Work/Herschel-Orion-Data/anonymous1572017505/1342191152/level2/]]
+ There are several different versions of the spectra
  + Documentation is [[file:~/Work/Herschel-Orion-Data/PPE_HIPE14p2.pdf::13][here]] (see Table 2.2)
  + I have been looking at the ~hps3deqibs~ and ~hps3deqdrs~
  + Unfortunately, none are continuum-subtracted so I am going to have to that myself
+ Channels:
  + Blue 00 : [O I] 63.2 micron line
  + Blue 01 : 61 +/- 0.5 micron continuum
  + Red 00 : 189.5 +/- 0.5 micron continuum
  + Red 01 : [C II] 157.8 micron line
  + Red 02 : [O I] 145.5 and CO J = 18-17 144.8 (weak) micron lines
  + Red 03 : [N II] 121.9 micron line
****** Extract the [O I], [N II], and [C II] lines
#+begin_src python :return list_of_files :results list
  from pathlib import Path
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS

  datapath = Path(
      "~/Work/Herschel-Orion-Data/anonymous1572017505/1342191152/level2"
  ).expanduser()
  savedatapath = Path(
      "../data/orion-muse"
  )

  list_of_files = []

  for line_id, context, slice_id, krange in [
          ["oi-63mic", "HPS3DEQIB", "00", [190, 301, 0, 430]],
          ["cii-158mic", "HPS3DEQDR", "01", [120, 210, 0, 284]],
          ["oi-146mic", "HPS3DEQDR", "02", [114, 228, 56, 304]],
          ["co-145mic", "HPS3DEQDR", "02", [19, 58, 19, 112]],
          ["nii-122mic", "HPS3DEQDR", "03", [140, 240, 40, 358]],
  ]:
      pattern = f"{context}/*/*_*_{slice_id}_*.fits"
      # There should be only one file that fits the pattern
      fitspath = list(datapath.glob(pattern))[0]

      hdulist = fits.open(fitspath)
      hdu = hdulist["image"]
      w = WCS(hdu)

      # z-pixel ranges k1:k2 for line and kmin:kmax for all good data
      k1, k2, kmin, kmax = krange

      cont_cube = hdu.data.copy()
      cont_cube[:kmin, :, :] = np.nan
      cont_cube[kmax:, :, :] = np.nan
      cont_cube[k1:k2, :, :] = np.nan
      cont_map = np.nanmean(cont_cube, axis=0)
      cont_cube[k1:k2, :, :] = cont_map
      line_window = hdu.data[k1:k2, :, :] - cont_cube[k1:k2, :, :]
      # Original units of spectral cube are Jy/voxel, so simple sum gives Jy/spaxel
      line_map = np.nansum(line_window, axis=0)
      # Equivalent width 
      # Multiply by delta lambda per pixel to put in microns
      dlam = w.wcs.cdelt[-1]
      ew_map =  dlam * line_map / cont_map
      for band_id, band_map, bunit in [
              ["line", line_map, "Jy/pixel"],
              ["cont", cont_map, "Jy/pixel"],
              ["ew", ew_map, "micron"],
      ]:
          savepath = savedatapath / f"herschel-bar-{line_id}-{band_id}.fits"
          header = w.celestial.to_header()
          header["BUNIT"] = bunit
          fits.PrimaryHDU(
              header=header,
              data=band_map,
          ).writeto(savepath, overwrite=True)
          list_of_files.append(f"[[file:{savepath}]]")
#+end_src

#+RESULTS:
- [[file:../data/orion-muse/herschel-bar-oi-63mic-line.fits]]
- [[file:../data/orion-muse/herschel-bar-oi-63mic-cont.fits]]
- [[file:../data/orion-muse/herschel-bar-oi-63mic-ew.fits]]
- [[file:../data/orion-muse/herschel-bar-cii-158mic-line.fits]]
- [[file:../data/orion-muse/herschel-bar-cii-158mic-cont.fits]]
- [[file:../data/orion-muse/herschel-bar-cii-158mic-ew.fits]]
- [[file:../data/orion-muse/herschel-bar-oi-146mic-line.fits]]
- [[file:../data/orion-muse/herschel-bar-oi-146mic-cont.fits]]
- [[file:../data/orion-muse/herschel-bar-oi-146mic-ew.fits]]
- [[file:../data/orion-muse/herschel-bar-co-145mic-line.fits]]
- [[file:../data/orion-muse/herschel-bar-co-145mic-cont.fits]]
- [[file:../data/orion-muse/herschel-bar-co-145mic-ew.fits]]
- [[file:../data/orion-muse/herschel-bar-nii-122mic-line.fits]]
- [[file:../data/orion-muse/herschel-bar-nii-122mic-cont.fits]]
- [[file:../data/orion-muse/herschel-bar-nii-122mic-ew.fits]]

**** Dissociation front
+ See also [[id:2BFA19A3-2134-4D57-8914-2EE8D56DD0EC][H_2 emission zone]] in the Bar model notes
+ mmCRLs (Carbon recombination lines) and far-IR [^{13}C II] lines
  + Cuadrado:2019a
  + Trace dissociation front
  + Give T_e = 500 K (same as 21 cm lines!)
  + And n_e = 60 \to 100 pcc
  + Assuming electrons come from C+ gives P_th = 2 \to 4e8 cm^-3 K
+ H_2 2.12 micron line
  + Walmsley:2000a is what everyone uses, but this is a restricted region
  + Very filamentary and morphology changes along bar
    + Regions with curved arcs that look like knots or bow shocks
    + Strangely, they all point away from th1C
+ Other H_2 vibro lines
  + Kaplan:2017a
    + Many, many lines in the K-band mainly
  + Luhman:1998a
    + Claim that dense PDR (n = 1e5 to 1e6) explains all the line strengths
    + That is, they disagree with earlier claims that some lines come from low-density fluorescence or shocks 
+ High-J CO emission
  + Parikka:2018a
  + This is almost coincident with the [C I] 8727 and 9850 emission
  + It is offset by 5 arcsec (10 mpc) deeper than the H_2 2.12 micron line
  + There are bits where it is almost superimposed, but when you look in detail, the H_2 is always on the illuminated side of the CO clumps
+ Alma CO 3-2 and HCO+ observations plus other lines
  + Goicoechea:2016a in Nature
    + 345.7960 GHz (CO J =3-2) 0.8669633 mm = 866.9633 micron
    + 356.7342 GHz (HCO+ J =4-3) = 0.8403804 mm = 840.3805 micron
  + Goicoechea:2017a A&A has the other lines
    + H 13CO+, SH+, SO+, HOC+, SO
    + Their Fig 1 compares it with other tracers
      + CO 3-2 and HCO+ 4-3 from the same ALMA data (which they published in Goicoechea:2016a)
      + H_2 2.12 micron from Walmsley:2000a
      + [ ] PAH 8 micron from Spitzer (they cite Megeath:2012a, so should I)
    + They take average cuts through the Bar
    + Conclude that
      : 
  + Data now downloaded to [[file:~/Dropbox/OrionMolecular/Alma-OrionBar/]]
    + HCO plus
      + d\nu = -2.44156E+05 Hz = 0.00024 GHz => c d\nu/\nu = -0.20518 km/s
      + CO bar peak is at 345.784 GHz = +10.40 km/s (chan 53)
      + HCO+ is at 356.72 GHz = +11.9 km/s
      + CO bluer filament is at 345.786 GHz = 8.67 km/s
      + HCO+ bluer filament is at 356.723 GHz = 9.41 km/s
    + Spatial filtering
      + Baselines are from 12 m to 444 m
      + Using 1.22 \lambda / D, these are equivalent to 17.9 arcsec to 0.48 arcsec
        + Synthesized beam is 1 arcsec apparently
      + Goicoechea:2016a combine these with IRAM-30m single dish observations to fill in the missing baselines.
      + But in my maps I am missing emission on scales \ge 20 arcsec = 0.04 pc
  + These also show a small offset between H_2 and the other molecules
  + Measuring the channels where the Bar peaks
    + CO : 50 \to 58 (peak 54)
    + HCO+ : 50 \to 63 (various peaks)
***** Extract Alma channels
1. CO 3-2
2. HCO+
3. SO from dense gas *new* [2019-09-19 Thu]
   - This has a narrow velocity component that is extended (channels 8 to 13)
   - And an unresolved faint but broad source (channels 5 to 15)
     - Maybe a YSO?
#+begin_src python :results silent
  from astropy.io import fits
  from astropy.wcs import WCS
  indir = "../../OrionMolecular/Alma-OrionBar/2012.1.00352.S/science_goal.uid___A002_X6dddc4_X68/group.uid___A002_X6dddc4_X69/member.uid___A002_X6dddc4_X6a/product"
  outdir = "../data/orion-muse"

  hdu = fits.open(indir + "/Orion_Bar.COnocont.Clean.image.fits")[0]
  data = hdu.data[0, 49:58, :, :].sum(axis=0)
  header = WCS(hdu).celestial.to_header()
  fits.PrimaryHDU(header=header, data=data).writeto(
      outdir + "/alma-co32-chan50-58.fits", overwrite=True,
  )

  hdu = fits.open(indir + "/HCOpcont.Clean.image.fits")[0]
  data = hdu.data[0, 49:63, :, :].sum(axis=0)
  header = WCS(hdu).celestial.to_header()
  fits.PrimaryHDU(header=header, data=data).writeto(
      outdir + "/alma-hcoplus-chan50-63.fits", overwrite=True,
  )

  hdu = fits.open(indir + "/SOcont.Clean.image.fits")[0]
  data = hdu.data[0, 4:15, :, :].sum(axis=0)
  header = WCS(hdu).celestial.to_header()
  fits.PrimaryHDU(header=header, data=data).writeto(
      outdir + "/alma-so-chan05-15.fits", overwrite=True,
  )
#+end_src
***** Remove stars from H_2 image
#+begin_src python :results silent
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  from skimage.morphology import square, disk, dilation
  from skimage.filters.rank import modal

  indir = "../../dib-scatter-hii/data/orion-hawki/"
  outdir = "../data/orion-muse"

  hdu = fits.open(indir + "/Orion-Bar-H2-minus-045-Brg.fits")["CHIP1.INT1"]
  mask = (hdu.data > 2100.0) | (hdu.data < 0.0)
  # grow mask
  mask = dilation(mask.astype(np.uint8), disk(2)).astype(bool)

  hdu.data[mask] = np.nan
  hdu.writeto(
      outdir + "/Orion-Bar-H2-minus-045-Brg-nostars.fits", overwrite=True,
  )
#+end_src
***** Reproject H_2 onto Alma
#+begin_src python :results silent
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  from reproject import reproject_interp
  datadir = "../data/orion-muse"

  hdu = fits.open(datadir + "/Orion-Bar-H2-minus-045-Brg-nostars.fits")["CHIP1.INT1"]
  ahdu = fits.open(datadir + "/alma-co32-chan50-58.fits")[0]
  newdata, _ = reproject_interp(hdu, ahdu.header)
  # convert NaNs to zero while we are at it
  mask = ~np.isfinite(newdata)
  newdata[mask] = 0.0
  fits.PrimaryHDU(header=ahdu.header, data=newdata).writeto(
      datadir + "/Orion-Bar-H2-minus-045-Brg-reproject-alma.fits", overwrite=True,
  )
#+end_src
***** Make an RGB image of the H_2, CO, HCO+

#+name: rgb-natural-bar
#+header: :var TAB=rgb-limits-ifront SUFFIX="ifront" DATADIR="../data/orion-muse"
#+header: :var HDU=0
#+begin_src python :results file :return figfile
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.visualization import make_lupton_rgb
  from astropy.visualization.lupton_rgb import LinearMapping
  from astropy.io import fits
  from astropy.wcs import WCS

  # Unpack the channel info from the table
  [rf, r1, r2], [gf, g1, g2], [bf, b1, b2] = TAB


  def load_and_scale_image(fn, v1, v2, ihdu=HDU):
      data = fits.open(f"{DATADIR}/{fn}")[ihdu].data
      # Truncate data to [v1, v2] and deal with NaNs
      data[~np.isfinite(data) | (data < v1)] = v1
      data[(data > v2)] = v2
      return (data - v1) / (v2 - v1)


  w = WCS(fits.open(f"{DATADIR}/{rf}")[HDU].header)

  image_r = load_and_scale_image(rf, r1, r2)
  image_g = load_and_scale_image(gf, g1, g2)
  image_b = load_and_scale_image(bf, b1, b2)
  image_r += 0.5*image_g
  image_g += 0.5*image_b
  image = LinearMapping(0.0, 1.0).make_rgb_image(image_r, image_g, image_b)

  # Separately get the Alma field for contouring
  almim = fits.open(f"{DATADIR}/{gf}")[HDU].data
  # Set NaNs to large negative values so we can see the edge
  almim[~np.isfinite(almim)] = -1000.0

  figfile = f"rgb-natural-bar-{SUFFIX}.jpg"
  fig, ax = plt.subplots(figsize=(6.2, 5), subplot_kw=dict(projection=w))
  ax.imshow(image)
  ax.contour(almim, levels=[-999.0],
             linestyles="dashed", linewidths=1.0, alpha=0.4, colors="w")
  ax.set(xlabel="RA (J2000)", ylabel="Dec (J2000)")
  fig.tight_layout(rect=[0.08, 0.07, 1.0, 1.0])
  fig.savefig(figfile, dpi=200)
#+end_src



#+name: rgb-limits-alma-bar
| Orion-Bar-H2-minus-045-Brg-reproject-alma.fits | 1300 | 2000 |
| alma-hcoplus-chan50-63.fits                    | -0.2 |  8.5 |
| alma-co32-chan50-58.fits                       | -0.6 |   13 |

#+call: rgb-natural-bar(TAB=rgb-limits-alma-bar, SUFFIX="alma")

#+RESULTS:
[[file:rgb-natural-bar-alma.jpg]]

#+name: rgb-limits-alma-bar-variant
| alma-co32-chan50-58.fits                       | -0.6 |   15 |
| alma-hcoplus-chan50-63.fits                    | -0.2 |    9 |
| Orion-Bar-H2-minus-045-Brg-reproject-alma.fits | 1400 | 1750 |

#+call: rgb-natural-bar(TAB=rgb-limits-alma-bar-variant, SUFFIX="alma-variant")

#+RESULTS:
[[file:rgb-natural-bar-alma-variant.jpg]]

**** Molecular core (maybe best not to call it that)
+ Dense condensations
  + Qiu:2018a
  + 1mm continuum and line emission with SMA
  + Resolution 5 x 4 arcsec
+ Formaldehyde, para-H2CO
  + T \approx 50 \to 100 K
  + Seen more strongly in Orion S and BN/KL
+ Small hydrocarbons, C_{2}H, C_{3}H, C_{4}H, etc
  + Cuadrado:2015a
  + T_k \ge 150 K, n(H_2) > 1e5 pcc required
  + Abundance peak around A_V \approx 1.5
  + Constant density and isobaric models
  + Isobaric model has P = 1e8 K/cm^3 and \chi = 2e4 
    + This should be twice the gas pressure ar ionization front, so fits well with n = 5000 pcc, T = 1e4 K
  + A_V = 1.5 occurs at depth of about 3.2 arcsec = 6.5 mpc for the isobaric model
    + This does not seem consistent with observed offsets
  + For the constant density 4e4 pcc model, A_V = 1.5 is at 20 arcsec, or 40 mpc
    + This is more consistent 
**** Effects of gravity
*** Emission profiles of the Bar
:PROPERTIES:
:ID:       1C0DF123-344F-47BD-88B1-B3CBA8BF4EFA
:END:
+ Remember: 1 arcsec \approx 2 mpc
**** Our profile
+ [O III] peaks at -25 \to -50 mpc from i-front
  + This is really various substructures
+ [O II] peaks at -7 mpc with width of 12 mpc,
  + and then broader peak with width 20 mpc
+ [O I] peaks at -2 mpc with width of 10 mpc
+ O I peaks at 0 mpc with width of 6 mpc
+ IPAC 3.6, 5.8. 8 peak around +10 mpc with width around 25 mpc
+ H_2 2.12 micron peaks at +25 mpc
+ 12CO peaks at +40 mpc
+ 13CO peaks at +55 mpc
**** HST 
+ From Henney:2005a
  + This is a particularly sharp portion of the Bar
+ Shows that the i-front transition has width of about 0.5 arcsec = 1 mpc
  + From width of [O I] peak
  + This current paper shows a width of 10 mpc, but this is dominated by deviations of the i-front from a straight line over its 150 mpc length
  + Either that, or that the HST cut is in a special case
  + /See also/ [[id:BDB015A5-3CE6-4918-92C2-1AF56E4EC808][Thickness of different tracers in Bar]] where we find a thickness of 0.35 arcsec, which gets corrected to 0.267 arcsec = 0.5 mpc 
+ Singly ionized emission ([N II] in this case) has peak with width of 10 mpc (although narrower peak is superimposed)

**** Dust emission
+ Arab:2012a model the Herschel and Spitzer profiles
  + Geometry is naive plane-parallel (fine)
  + Power-law increase in density n = n_0 (z/z_0)^\alpha from 0 up to a depth z_0, then constant up to z_1, then symmetric fall on other side
    + See Fig 8 of their paper, which has molecular on left
    + Their origin is about 15 mpc to right of the 3.6 micron peak, which is about zero on my scale
    + Note that density goes to zero at the i-front!  Although this might be OK for the PAHs
  + Best-fit:
    + n_0 = 1.5e5 cm^{-3}
    + \alpha = 2
    + z_0 = 52.5 mpc
    + z_1 = 69.5 mpc
  + But they recognize that a convex cylinder would make mean line-of-sight depth L lower for the surface regions, which would help their model to work
+ Other work
  + Sellgren:1990a 3.3 micron PAH feature
  + Kassis:2006a have mid-IR slit spectra from 8 to 13 micron
  + Cesarsky:2000a have spectra from 5 to 17 micron
    + And maps as well
    + They say that all the UIB bands have the same distribution, but I suspect that this is not true
    + I am downloading the data from the archive
      + Now have the data
      + [[file:~/Dropbox/dib-scatter-hii/data/orion-iso/cvf82602505.fits]]
      + Note that the wavelength axis is strange
        + First, it goes from \lambda = 5 \micro{}m to \lambda = 17.34 \micro{}m, then back to 5 again
        + Second, there are little discontinuities at 9.6 micron, where the wavelength jumps back to 9.0
      + The FITS files have two components.  Everything is explained in App A.2 of Boulanger:2005a
        1. a table of images per wavelength pixel
           - Several versions: 'CUBE_CAL', 'SIGMA', 'CUBE_CAL_FLAT', 'CUBE_CAL_ZODI', 'CUBE'
           - These are all described in Boulanger:2005a
        2. and then an interpolated cube in RA and Dec
           - The interpolated cube is missing some rows, which is odd since the Cesarsky paper doesn't show any problems there
           - There was an online viewer in the java app that also showed the cube without interpolation - that was missing one row
      + In principle, we can use this data to work out what is contributing to the 5.8 ad 8.0 micron IRAC bands
        + 3.6 micron is 3.15 to 3.9
        + 4.5 micron is 3.9 to 5.0
        + 5.8 micron is 5.0 to 6.4
          + pixels 2-26 in cube
          + 6.2 micron UIB dominates
          + continuum probably second
          + minor contributions from 5.264 and 5.687, which look like UIB too
        + 8.0 micron is 6.4 to 9.3
          + pixels 27-80 and 87 to 89
          + 7.7 and 8.6 UIB dominate
          + plus continuum
          + also contribution from [Ar II] 7 micron and [Ar III] 9 micron, but only on the ionized side
  + Haraguchi:2012a have maps at 3.3 and 3.7 micron
  + Galliano:2008a analyze the ratios of PAH features in may objects
    + Including Orion Bar
    + They find that they are generally correlated and can be calibrated against the local G_0
      + Main ratio is 6.2/11.3, which varies from about 0.7 \to 3 in M82, and 1.1 \to 2 in Orion
      + 7.7/6.2 is about 3 or 2 (varies with method: Lorentzian or spline), while 8.6/6.2 is about 0.5 or 0.2 (again varying with method). In both cases, the ratio is roughly constant.
    + They show that PAH charge variation is the only possible explanation for this.
      + Other effects (temperature change with very high G_0 or due to size changes, extinction) would produce an anti correlation between 8.6/6.2 and 7.7/11.3, which is *not observed*
    + They estimate G_0 from the VSG continuum brightness (8 and 14 micron)
    + This varies from 1e-13 to 1e-12 W/m^2 in the Bar
    + Then they calibrate 6.2/11.3 against (G_0/n) sqrt(T/1000 K)
  + Hony:2001a don't do Orion, but find some interesting trends
    + 3.3/6.2 positively correlates with 11.2/6.2 (other way up from Galliano)
      + Gives constant value of 11.2/3.3 = 3 to 4
    + 6.2/11.2 positively correlates with 12.7/11.2
      + 6.2, 7.7, 8.6, 12.7 all vary together
    + 12.7/11.2 negatively correlated with PAH/TotalIR
    + So we have two groups of features
      1. 3.3 (neutral) and 11.2 (ionized+neutral?)
      2. 6.2, 7.7, 8.6 (all 3 ionized), 12.7 (this one is strange - should be ionized and neutral)
**** H_2 emission zone
:PROPERTIES:
:ID:       2BFA19A3-2134-4D57-8914-2EE8D56DD0EC
:END:
+ Kaplan:2017a have the most detailed H_2 observations (many vib-ro lines in near-infrared)
  + Extinction to H_2 emission is measured as A_K = 0.99 mag, which implies A_V = 8 mag for a standard extinction curve
  + Although Luhman:1998a find A_K = 2.3 to 2.6 for slightly different regions.
+ Density is constrained to be < 1e4 pcc (best-fit 5000 pcc), which is very odd
  + They do say that if they change their formation-pumping prescription, than densities as high as 5e4 cm^-3 can be fitted
+ Temperature is better constrained: T = 625 +/- 25 K
*** Dynamic models of the Bar
+ Because static models do not seem to explain the coincidence of H_2 and CO dissociation fronts
  + /But do they really?/ Check the implications of the separation that I measured
+ So there seems to be two kinds of non-steady models invoked:
  1. Photoablation flow
  2. Shock
+ Sometimes mentioned in the same breath, but they are distinct
+ Stages in globule photoevaporation
  1. RDI
  2. Max compression and bounce
  3. ECC
**** Kinematics of bar
+ Qiu:2018a Figure 10 shows a velocity gradient in H_2 CS that is perpendicular to the long axis of the bar
  + Also visible in the channel maps of Fig 5
  + And in CS (5-4) channel maps of Fig 4
  + The velocity varies from V(LSR) = +9.5 km/s near the mm peaks to V(LSR) = +11 km/s in the deeper molecular layers
  + Only really clear in the section of Bar to NE of th2A
  + CO has peak at +11.5 km/s
*** Figure showing hierarchy of models
+ Plane-parallel ::
  + I :: Naive plane-parallel
    + Good
  + I' :: Finite plane slab
    + Bad
    + Andree-Labsch:2017a is a recent example of this
+ Curvature ::
  + II :: Convex cylinder
    + Good
    + Walmsley:2000a
  + II' :: Concave barrel
    + Falsified
+ Nebular context ::
  + III :: escarpment
  + III' :: multiple components
         

*** Figure showing how thin the [O I] front is
#+name: orion-bar-oi-hst
#+begin_src python :return figfile :results file
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy.convolution import convolve_fft, Gaussian2DKernel

  figfile = "orion-bar-oi-hst.pdf"
  datapath = "/Users/will/Work/BobPC/2002"
  hdu = fits.open(f"{datapath}/final631-radec_sharp_16.fits")[0]
  w = WCS(hdu.header)

  fig, ax = plt.subplots(figsize=(6, 5), subplot_kw=dict(projection=w))
  # ax.imshow(hdu.data, vmin=1200, vmax=5000, origin="lower", cmap="viridis")
  ax.imshow(hdu.data, vmin=0.8, vmax=2.5, origin="lower", cmap="gray_r")
  ny, nx = hdu.data.shape
  ax.set(xlim=[20, 1020], ylim=[220, 1220], xlabel="RA (J2000)", ylabel="Dec (J2000)")
  fig.tight_layout(rect=[0.08, 0.07, 1.0, 1.0])
  fig.savefig(figfile, dpi=1200)
#+end_src

#+RESULTS: orion-bar-oi-hst
[[file:orion-bar-oi-hst.pdf]]

*** Model for 21 cm continuum and line 
:PROPERTIES:
:ID:       2AC0209C-557E-41B4-97C3-6E5D9EF0B103
:END:
+ Summary
  + Absorption component M shows bar is convex
    + Absorption clumps are seen outside the i-front
  + Emission feature shows that most free free beyond bar is foreground (theta 2 A nebula?)
    + T_b >= T_s, which would give absorption if it were behind
  + The null point between emission/absorption allows us to determine the spin temperature there
    + 


**** Final model for the T_b variation
+ Use T_fg = 600 K, f = 0.8 and \tau = 0.8 everywhere 
+ T_b = (1 - e^-\tau) (T_s - f (T_c - T_fg))
+ => T_s = 0.7 (T_c - 600) + 1.58 T_b
  |           | vdW, '' | pos, mpc |  T_c |  T_b | T_c/peak |    \tau |   f |  T_s |
  |-----------+---------+----------+------+------+----------+-----+-----+------|
  | H II peak |     -12 |      -18 | 3000 |    0 |        1 |   0 | 0.0 |  0/0 |
  | I-front   |      -3 |        0 | 2400 |    0 |     0.80 |   0 | 0.0 |  0/0 |
  | Comp M    |       0 |        6 | 2235 | -405 |     0.75 | 0.8 | 0.8 | 573. |
  | Crossover |       3 |       12 | 1500 |    0 |     0.50 | 0.8 | 0.8 | 720. |
  | H I peak  |      11 |       28 |  750 | +230 |     0.25 | 0.8 | 0.8 | 538. |
  | Mol peak  |      20 |       46 |  600 | +170 |     0.20 | 0.8 | 0.8 | 309. |
  #+TBLFM: $3=2 ($-1 + 3)::$6=$4/3000;f2::$9=$8 ($4 - 600) + $5 / (1 - exp(-$7)) ;f0
+ Alternatively, we can specify T_s and calculate T_b
  + \tau = 1, f = 0.8 (with new interpolated points)
    |           | vdW, '' | pos, mpc |  T_c | T_c/peak |    \tau |   f |  T_s |   T_b |
    |-----------+---------+----------+------+----------+-----+-----+------+-------|
    | H II peak |     -12 |      -18 | 3000 |        1 |   0 | 0.7 |    0 |   0e0 |
    | I-front   |      -3 |        0 | 2400 |     0.80 |   0 | 0.7 |    0 |   0e0 |
    | Comp M    |       0 |        6 | 2235 |     0.75 |   1 | 0.8 | 1000 | -195. |
    | Crossover |       3 |       12 | 1500 |     0.50 |   1 | 0.8 |  700 |  -13. |
    |           |       5 |       16 | 1250 |     0.42 |   1 | 0.8 |  650 |   82. |
    |           |       8 |       22 | 1000 |     0.33 |   1 | 0.8 |  600 |  177. |
    | H I peak  |      11 |       28 |  750 |     0.25 |   1 | 0.8 |  540 |  265. |
    | Mol peak  |      20 |       46 |  600 |     0.20 | 0.3 | 0.8 |  540 |  140. |
    #+TBLFM: $3=2 ($-1 + 3)::$5=$4/3000;f2::$9=(1 - exp(-$6)) ($8 - $7 ($4 - 600));f0
  + \tau = 1, f = 0.5 - has no absorption
    |           | vdW, '' | pos, mpc |  T_c | T_c/peak |    \tau |   f |  T_s |  T_b |
    |-----------+---------+----------+------+----------+-----+-----+------+------|
    | H II peak |     -12 |      -18 | 3000 |        1 |   0 | 0.7 |    0 |  0e0 |
    | I-front   |      -3 |        0 | 2400 |     0.80 |   0 | 0.7 |    0 |  0e0 |
    | Comp M    |       0 |        6 | 2235 |     0.75 |   1 | 0.5 | 1000 | 115. |
    | Crossover |       3 |       12 | 1500 |     0.50 |   1 | 0.5 |  700 | 158. |
    | H I peak  |      11 |       28 |  750 |     0.25 |   1 | 0.5 |  540 | 294. |
    | Mol peak  |      20 |       46 |  600 |     0.20 | 0.3 | 0.5 |  540 | 140. |
    #+TBLFM: $3=2 ($-1 + 3)::$5=$4/3000;f2::$9=(1 - exp(-$6)) ($8 - $7 ($4 - 600));f0
  + \tau = 1, f = 0.5, cooler T_s - does have absorption
    |           | vdW, '' | pos, mpc |  T_c | T_c/peak |    \tau |   f | T_s |   T_b |
    |-----------+---------+----------+------+----------+-----+-----+-----+-------|
    | H II peak |     -12 |      -18 | 3000 |        1 |   0 | 0.7 |   0 |   0e0 |
    | I-front   |      -3 |        0 | 2400 |     0.80 |   0 | 0.7 |   0 |   0e0 |
    | Comp M    |       0 |        6 | 2235 |     0.75 |   1 | 0.5 | 540 | -175. |
    | Crossover |       3 |       12 | 1500 |     0.50 |   1 | 0.5 | 540 |   57. |
    | H I peak  |      11 |       28 |  750 |     0.25 |   1 | 0.5 | 540 |  294. |
    | Mol peak  |      20 |       46 |  600 |     0.20 | 0.3 | 0.5 | 540 |  140. |
    #+TBLFM: $3=2 ($-1 + 3)::$5=$4/3000;f2::$9=(1 - exp(-$6)) ($8 - $7 ($4 - 600));f0

**** The issue of Galactic background H I emission
+ vdW includes this in eq (1), but at the velocities we are interested in (10 to 15 km/s LSR) this is not important
+ Green:1993a Fig 6b shows that T_b = 48 K at Orion A (l=209 on the curved line)
  + Also Green:1991a Fig 
+ But most of this is from Orion A itself and so at least partly FG
+ The general diffuse emission is about 16 K
+ Given that T_b of H I emission from Bar is at around 250 K, the Galactic emission is mostly negligible
**** Naive versus corrected \tau estimations
+ vdW uses T_b = -T_c (1 - e^-\tau)
  + This assumes that T_s is negligible compared with T_b, which is OK for Veil, since T_s < 160 K and vdw limits absorption calculations to T_c > 450 K
  + *And* it assumes that all the continuum comes from behind the H^0
+ For small \tau, this is \tau = -T_b / T_c
+ Remember that T_b is *after* subtracting continuum, sp -T_b / T_c is the absorption depth.
+ The true \tau should be given by T_b = (T_s - f_BG T_c) (1 - e^-\tau)
*** Measurement of H I 21 cm component M 
+ From Van-der-Werf:2013a
+ This is at 8 \to 11 km/s is absorption by H^0 in the Bar of ionized emission behind
+ Gives important clue to Bar geometry
  + If these are inside i-front, then implies convex geometry
  + If these are outside i-front, then implies concave geometry
+ Results are in - the absorption is /outside/ the ionization front
+ Optical depths can be also found from vdw fig 9 (channel maps) and fig 8 (average spectrum)
  + /But these are naive optical depth, assuming all continuum is behind HI and T_s = 0/
    + The real depths with be higher
  + Fig 8 shows that peak is about \tau = 0.03 at about 11 km/s, which is just the right velocity
    + This is over a 27 x 27 arcsec box
    + It includes knots M-II and M-III but they have a low covering fraction since they are much smaller - probably about 10-20%, which is consistent with M-II being about \tau = 0.2
  + Scale: blue=0.1, cyan=0.2, green=0.3, yellow=0.5, orange=0.7, red=0.8
  + M-I has \tau = 0.3 (green) at 9.7 km/s or even 0.7 (red) at 8.4 km/s (but that is a long way from Bar velocity and we are probably affected by wing of component A)
    + It does seem to peak at slightly bluer velocity than the others, so may not be bar-related
  + M-II, M-III, M-V, M-VI have \tau = 0.2
  + M-IV has \tau = 0.1
+ We can work backwards to get the cont-subtracted brightness temperatures
+ We need to measure the T_c too, which is given by contours of I_c (50, 100, 200, 300 400 mJy/beam) in vdw fig 9, together with conversion factor of 14.9 K / (mJy/beam)
+ Equation is T_b = -T_c (1 - e^-\tau)
  | Comp  | Naive \tau | I_c |   T_c |   T_b |
  |-------+--------+-----+-------+-------|
  | M-I   |    0.3 | 100 | 1490. | -386. |
  | M-II  |    0.2 | 150 | 2235. | -405. |
  | M-III |    0.2 | 150 | 2235. | -405. |
  | M-IV  |    0.1 | 150 | 2235. | -213. |
  | M-V   |    0.2 |  90 | 1341. | -243. |
  | M-VI  |    0.2 |  60 |  894. | -162. |
  #+TBLFM: $4=14.9 $3::$5=-$4 (1 - exp(-$2));f0
+ Then we can make different assumptions about f_BG
  + Just use M-II and M-III since they are at the bright part of bar
    + T_c = 2235
    + T_b = -405
  + We assume far foreground is constant at T_c = 600 K
    + So T_c = 2235 - 600 = 1635 K from Bar itself
  + Consider two orientation cases
    1. Side-illuminated Bar, so f_BG = 0.5 1635 / 2235 = 0.366
    2. Back-illuminated Bar, so f_BG = 1635 / 2235 = 0.732
    3. Mid-back illuminated bar, f_BG = 0.75 1635 / 2235 = 0.548
  + Consider two spin temperature cases
    1. T_s = 1000 K
    2. T_s = 500 K
+ Equation is (1 - e^-\tau) = T_b / (T_s - f_BG T_c)
  |           |  f_BG |  T_s | 1 - e^-\tau |               |
  |-----------+-------+------+---------+---------------|
  | Side/cool | 0.366 |  500 |    1.27 | (1.31, -3.14) |
  | Mid/cool  | 0.548 |  500 |    0.56 |          0.82 |
  | Back/cool | 0.732 |  500 |    0.36 |          0.45 |
  | Side/warm | 0.366 | 1000 |   -2.23 |         -1.17 |
  | Mid/warm  | 0.548 | 1000 |    1.80 | (0.22, -3.14) |
  | Back/warm | 0.732 | 1000 |    0.64 |          1.02 |
  | Min/warm  | 0.629 | 1000 |    1.00 |     -ln(0.00) |
  | Min/cool  | 0.405 |  500 |    1.00 |     -ln(0.00) |
  #+TBLFM: $4=-405 / ($3 - $2 2235);f2::$5=-ln(1 - $-1);f2
  + Only the real positive values in the last column make any sense
+ It might make more sense to assume \tau \to \infty and then find relation between T_s and f_Bg
  + So we actually have T_b \ge T_s - f_BG T_c
    + Where equality holds when \tau is large
    + The reason it is \ge not \le is that the RHS is negative
  + So if T_s = 0 then T_b = -f_BG T_c, which would give f_BG = 0.18 in our case
  + Or in general f_BG \ge (T_s - T_b) / T_c where T_b is negative
    + So if T_s > 500 K, as seems a reasonable lower limit, then f_BG \ge (500 + 405) / 2235 = 0.405
    + And if T_s = 1000 K, then f_BG \ge (1000 + 405) / 2235 = 0.629
  + So this puts a tight restriction on f_BG, that it must be in range [0.629 .. 0.732] if T_s = 1000 K at the position of M-II and M-III
  + This also implies that \tau > 1.02
+ Rather than use f_BG T_c, we could instead us T_c - T_FG
  + This would make more sense in the case of constant T_FG = 600 K
  + Then we could still have an f that is the fraction of the /Bar/ emission that is behind the H I
  + So that f_BG T_c \to f (T_c - T_fg)
  + Now we have -405 = (T_s - f (2235 - 600)) (1 - e^-\tau)
  + T_s = f 1635  - 405 / (1 - e^-\tau)
  + So upper limit to T_s if we but f = 1 and \tau \to \infty: T_s < 1635 - 405 = 1230 K
  + If we put \tau < 1, then T_s < 994 K
  + Also, we can write it as f = (T_s + 405 / (1 - e^-\tau)) / 1635
  + So if T_s > 500, then f > (500 + 405)/1635 = 0.55
  + And if T_s > 500 /and/ \tau < 1, then f > (500 + 405/(1 - 1/e))/1635 = 0.70
**** Sub-component positions
|       |       x |       y | RA           | Dec          |
|-------+---------+---------+--------------+--------------|
| M-I   | 139.294 | 321.595 | 5@ 35' 25.8" | -5@ 23' 57." |
| M-II  | 155.294 | 335.595 | 5@ 35' 23.7" | -5@ 24' 24." |
| M-III | 169.294 | 346.595 | 5@ 35' 21.9" | -5@ 24' 46." |
| M-IV  | 198.294 | 363.595 | 5@ 35' 18.1" | -5@ 25' 19." |
| M-Va  | 206.294 | 373.595 | 5@ 35' 17.1" | -5@ 25' 39." |
| M-Vb  | 220.294 | 375.595 | 5@ 35' 15.2" | -5@ 25' 43." |
| M-VI  | 234.294 | 375.595 | 5@ 35' 13.4" | -5@ 25' 43." |
#+TBLFM: $4=hms(5 + 35/60 + (20 + 10 (183.766 - $2)/76.5)/3600);f1::$5=hms(-5 - (23 + ($3 - 292.519)/30.6)/60);f0

+ Regions for DS9 are in [[file:~/Dropbox/dib-scatter-hii/data/van-der-Werf-HI-component-M.reg]]
**** Graph calibration done in Graphic.app
+ [[file:~/Dropbox/dib-scatter-hii/misc/vdW13-Fig9-measurements.idraw]]
+ Summary, (x, y) measured in pix
  + Dec = -5:(23 + (y - 292.519)/30.6)
  + RA = 5:35:(20 + 10 (183.766 - x)/76.5)
+ Declination axis
  | Dec, arcmin |  y, pix |
  |-------------+---------|
  |          23 | 292.519 |
  |          24 |  323.11 |
  |          25 |  354.11 |
  |-------------+---------|
  |             |    30.6 |
  #+TBLFM: @5$2=@3 - @2;f1
+ RA axis
  | RA, sec |  x, pix |
  |---------+---------|
  |      20 | 183.766 |
  |      22 | 168.294 |
  |      24 | 152.294 |
  |      26 | 137.294 |
  |      28 | 122.294 |
  |      30 | 107.294 |
  |---------+---------|
  |         |    76.5 |
  #+TBLFM: @8$2=@2-@7;f1
*** Measurements of Bar 21 cm emission component
+ This is in Fig 18 (spectrum), Fig 6 and 4 (PV diagram), Fig 3 (image with box), and Fig 2 (12.3 and 13.6 km/s channel images)
  + Fig 2 has continuum contours of 50 and 200 mJy/pix, or 745 and 2980 K
    + The H I emission seems to extend a far as the 200 contour, but only at N end of bar
    + Generally, there is a gap but it is hard to see exactly
  + Fig 3 has continuum contours at 15, 40, 70, 100, 150, 200, and 300 mJy/beam
    + [223.5, 596., 1043., 1490., 2235., 2980., 4470.] K
      + Where the Bar peak is around 3000 K (200 contour)
    + The H I emission definitely extends up to the 100 (1490 K) contour
    + But hard to see, since the grayscale is saturated
  + So it does seem to start immediately after the absorption
    + Say switch from abs-to-em is at the 100 (1500 K) contour
      + This is highest black contour in Fig 1, whereas M-II and M-III absorption components are at 150 (2235 K), which is the lowest white contour
      + From Fig 19 this should be at 0.5 x maximum of continuum profile, which coincides with the PAH peak (orgin of x-axis in Fig 19)
    + Then this should have T_b = 0
    + So T_s = f_BG T_c, which gives f_BG = T_s / 1500
    + Again, we assume constant BG of 600 and take the back-illuminated bar case, so that f_BG = (T_c - 600)/T_c = 0.6 at the crossover
      + This is consistent with Fig 19, which shows continuum bottoming out at 0.2 times peak
    + So this means bracket term is T_s - T_c + 600
    + So at crossover, T_s = T_c - 600 = 900 K - *yes! direct measure of spin T*
      + Uncertainties: +/- 200 K from variation in FG brightness
      + Possibility that some of Bar emission is also FG. For instance, using the f > 0.70 from the absorption zone, then T_s > 630 K
  + Peak of emission is at T_c = 0.25 x peak = 750 K
    + T_b = +230 K, but averaged over 36 arcsec (actual peak may be higher)
    + T_b = (1 - e^-\tau) (T_s - f (T_c - T_fg))
      + 230 = (1 - e^-\tau) (T_s - f 150)
    + So, taking f = 1 and \tau \to \infty gives T_s = 230 + 150 = 380 K
    + Taking T_s = T_kin = 540 km/s from vdw sec 6.1
      + (1 - e^-\tau) = 230 / (540 - 150 f) = {0.59, 0.53} for f = {1, 0.7}
      + => \tau = 0.89, 0.76
      + These are a bit higher than the \tau = 0.6 that vdW found, since they neglected the background f (T_c - T_fg) term
      + So, the BG absorption is not so important at the emission peak, whereas it dominates at the crossover point and the absorption peak
    + On the molecular side of the H I emission peak, it must be reduction in \tau and T_s that causes T_b to fall.  Mainly \tau falling as all the H becomes H_2.
      + Note that for \tau < 1 and negligible BG continuum, we have T_b \approx \tau T_s, which is independent of T_s since \tau \propto N(H^0) / T_s due to the stimulated emission correction
      + 1 - e^-h\nu/kT_s \approx h c / \lambda k T_s = 0.06816 K / T_s (\lambda = 21.10612 cm).
      + Since N(H_tot) \approx constant between the DF and the 18CO peak, this means that T_b \propto f(H^0) and /the fall in 21 cm T_b on the molecular side should be determined by the fall in the neutral H fraction/
    + But on the illuminated side, it is mainly the change in T_bg that drives the fall, since T_bg is increasing faster than T_s 
** TODO Geometry of Orion S region
+ This can be in much less detail
+ Orion S is at the bottom of the potential well in Orion A!
  + /Supposed/ Center of mass (gas+stars) of OMC-1 (/I am not so sure/)
  + Hacar:2017a IRAM N2H+ kinematics
  + Also Hacar:2018a Fig B3, adding in Alma data
  + Velocity gradient converges on Orion S
    + Maximum total blueshift of about 5 km/s (Vlsr = +5 at Orion-S, as opposed to +9 in N part of OMC-1 and +11 in OMC-2)
  + Model in Hacar:2017a Fig. 2 and Sec 5
    + Gravitational collapse along filament at angle \alpha to l.o.s.
    + V(R) \propto R^{-1/2} with projection factor so projected v(p) = cos \alpha (p/sin \alpha)^{-1/2} for impact parameter p
    + They show this works well with point mass of 1500 Msun and \alpha = 70 deg
  + /Possible problems with the model/
    + The acceleration continues down to scales < 50 arcsec
    + But the cluster density distribution is \rho(R) \propto R^-2
      + So mass enclosed in a radius R is M(R) \propto R
      + So gravitational potential is constant
    + See Henney:1998a sec 5.1
      + Also, the isothermality of the cluster velocity dispersion
      + 
    + This is approximately true true on scales from 10 to 700 arcsec,
      + which is more than the range of the Hacar:2017a data
+ Velocity measurements
+ From Tatematsu:2008a N2H+ measurements
  + Orion S is Core 19
  + R = 36 arcsec = 0.07 pc because low resolution
  + Vlsr = +6.58 km/s
  + \Delta V = 2 km/s (but this is probably internal sructure)
+ Gonzalez-Lobos:2019a
  + Global view of the velocity structure
  + Also, Stutz:2018b, where it is related to distance
  + Orion S is Peak 6 in their Appendix A
    + They say that there are regular peaks with spacing 0.44 pc
    + But this is cheating a bit, since many of the peaks are not on the ridgeline
    + α = 05h35m12s, δ = −05◦23′24′′, but width = 0.02 deg = 70 arcsec
+ Stutz:2018a
  * Stars density dominates over  gas for R < 1pc
    * At larger radii, it is the gas that dominates
    * But it is always gas that dominates the gravitational acceleration
      + Probably because of the rather flat potential profile of the cluster
  * Gives star center of mass, but this is some way off from the 
  * Star density follows Plummer sphere with core radius a \approx 0.36 pc
    * \rho = \rho_{0} [1 + (r/a)^{2}]^{-5/2}
      * where \rho_{0} = 5755 Msun/pc^3
      * note that \rho \propto r^-5 outside core
    * This comes from Megeath:2016a counts of mid-IR stars
    * And assumes mean mass of 0.5 Msun
    * But this is inconsistent with the peak in the center that we found in Henney:1998b
    * This has a core radius of a' = 0.016 pc and core density of about 10^5 Msun/pc^3
      * \rho = \rho_{0}' [1 + (r/a')^{2}]^{-1}
      * So our core radius is 22.5 times smaller and density is 17 times higher
      * Compare at r = a
        * we have \rho = \rho_{0}' [1 + (22.5)^{2}]^{-1} = \rho_{0}' / 507 = 200 Msun/pc^3
        * they have \rho_{0} [1 + (1)^{2}]^{-5/2} =  \rho_{0} / 5.66 = 1016 Msun/pc^3
        * So our model seriously underpredicts density at large scales - weird
        * In the 40 arcsec = 0.08 pc range of HA98 observations, their model predicts fall in density of
          * [1 + (0.08/0.36)^{2}]^{-2} = 1/1.1 = 0.91, whereas it actuall falls by a factor of 3
    * Hillenbrand:1998a uses King model (R^-3 outside core)
      * with a = 0.16 pc, which is half of what Stutz has
*** ALMA observations of Orion S
**** Continuum emission
***** High resolution 1.3 mm continuum from Palau:2018a
+ Has several regions of Orion S that are fragmented at small scales
+ I originally thought that there was 3mm continuum from Kainulainen:2017a, but this turns out to be only OMC 2/3
+ Several sources are seen in infrared
  + Mostly in E and W filament, suggesting they are less extinguished
  + Northern Region and Southern Filament may be more embedded 


**** Line emission
+ Filaments of N_{2}H^{+}
  + Hacar:2018a
+ They mainly extract the high column density filaments


***** Extract channel maps of N_2H+ from ALMA cubes
  + There are 3 main components, call them A, B, C
  + Looks like B is more optically thick
  + We will extract blue, peak, red sections of each one
  + Where peak is defined at center of the "mandrake" feature
  + A: 22; B: 102; C: 161
  + Component A goes up to 42, which is divisble by 3
    + 1 \to 14, 15 \to 28, 29 \to 42
    + This puts center at 21.5, which is fine
    + So ranges are 
      + Blue: [k0-21: k0-7]
      + Center: [k0-7:k0+7]
      + Red: [k0+7:k0+21]
  + Better to take narrower channels in Component C
    + This better shows the filament near SW minibar
    + A: 26 - 32
    + B: 104 - 123
    + C: 163 - 172 

#+begin_src python :results silent
  from astropy.io import fits
  from astropy.wcs import WCS
  indir = "../../OrionMolecular/Alma-OrionCore/2015.1.00669.S/science_goal.uid___A001_X2f7_X90/group.uid___A001_X2f7_X91/member.uid___A001_X2f7_X92/product"
  outdir = "../data/orion-muse"
  hdu = fits.open(indir + "/OMC-1_N2Hp.image.pbcor.fits")[0]
  header = WCS(hdu).celestial.to_header()
  for clabel, k0 in ["A", 21], ["B", 101], ["C", 160]:
      for vlabel, k1, k2 in [
              ["blue", k0-21, k0-7],
              ["green", k0-7, k0+7],
              ["red", k0+7, k0+21],
      ]:
          data = hdu.data[0, k1:k2, :, :].sum(axis=0)
          fits.PrimaryHDU(header=header, data=data).writeto(
              f"{outdir}/alma-filament-n2hp-{clabel}-{vlabel}.fits",
              overwrite=True,
          )

  for clabel, k1, k2 in [
          ["A", 25, 32],
          ["B", 105, 111],
          ["B", 116, 121],
          ["C", 164, 171],
          ["ALL", 0, -1],
  ]:
      data = hdu.data[0, k1:k2, :, :].sum(axis=0)
      fits.PrimaryHDU(header=header, data=data).writeto(
          f"{outdir}/alma-filament-n2hp-{clabel}-{k1:03d}-{k2:03d}.fits",
          overwrite=True,
      )

#+end_src

***** Extract channel maps of N_2H+ from Orion4D project cube
+ This is the ALMA combined with single-dish
+ https://sites.google.com/site/orion4dproject/data
+ https://dataverse.harvard.edu/dataverse/orion4d
+ Has lower resolution than the raw data
+ Channels 227 to 231 will be good

#+begin_src python :results silent
  from astropy.io import fits
  from astropy.wcs import WCS
  indir = "../../OrionMolecular/Alma-OrionCore/Orion4D"
  outdir = "../data/orion-muse"
  hdu = fits.open(indir + "/ISF_ALMA+IRAM30m_N2H+10_cube.fits")[0]
  header = WCS(hdu).celestial.to_header()
  for clabel, k1, k2 in [
          ["C", 226, 231],
  ]:
      data = hdu.data[k1:k2, :, :].sum(axis=0)
      fits.PrimaryHDU(header=header, data=data).writeto(
          f"{outdir}/alma-iram-filament-n2hp-{clabel}-{k1:03d}-{k2:03d}.fits",
          overwrite=True,
      )

#+end_src

That is the best image to contour ~alma-iram-filament-n2hp-C-226-231.fits~


***** Reproject mm continuum onto cm continuum and subtract
+ This won't work perfectly since the 20 cm has extended emission but the Alma data filters that out
#+begin_src python :results silent
  import numpy as np
  from astropy.io import fits
  from astropy.wcs import WCS
  from reproject import reproject_interp

  datadir = "../data/orion-muse"

  hdu1 = fits.open(f"{datadir}/radiotau-radec.fits")[0]
  hdu2 = fits.open(f"{datadir}/OMC-1_continuum.image.pbcor.fits")[0]
  hdu2.data = hdu2.data[0, 0, :, :]
  hdu2.header = WCS(hdu2).celestial.to_header()
  newdata, _ = reproject_interp(hdu2, hdu1.header)
  fits.PrimaryHDU(header=hdu1.header, data=newdata).writeto(
      f"{datadir}/alma-omc1-3mm-reproject-radiotau.fits",
      overwrite=True
  )

  newdata -= 0.01*hdu1.data
  fits.PrimaryHDU(header=hdu1.header, data=newdata).writeto(
      f"{datadir}/alma-omc1-3mm-minus-001x20cm.fits",
      overwrite=True
  )

#+end_src
***** Make an image of the N_2H+ in the SW minibar
+ Contours against the O I image
+ Add contours of the 1.3 mm continuum
+ And put points to show locations of the Palau:2018a sources

#+name: compare-oi-alma
#+header: :var STARS=star-coords MM=palau-2018-cores
#+begin_src python :return figfile :results file
  import numpy as np
  import matplotlib.pyplot as plt
  from astropy.io import fits
  from astropy.wcs import WCS
  from astropy.convolution import convolve_fft, Gaussian2DKernel
  from astropy.coordinates import SkyCoord
  import astropy.units as u
  import seaborn as sns
  sns.set_color_codes("bright")

  figfile = "orion-s-alma-contours-on-oi.jpg"
  datapath = "../data/orion-muse"
  hdu = fits.open(f"{datapath}/linesum-O_I-8446-multibin-SN0005.fits")["SCALED"]
  w = WCS(hdu)

  hdu_mol = fits.open(f"{datapath}/alma-iram-filament-n2hp-C-226-231.fits")[0]
  w_mol = WCS(hdu_mol)
  hdu_mm = fits.open(f"{datapath}/OMC-1_continuum.image.pbcor.fits")[0]
  w_mm = WCS(hdu_mm).celestial

  fig, ax = plt.subplots(figsize=(6.2, 5), subplot_kw=dict(projection=w))
  ax.imshow(hdu.data, vmin=0, vmax=3e5, origin="lower", cmap="inferno")
  ax.contour(hdu_mol.data,
             transform=ax.get_transform(w_mol),
             levels=[0.3, 0.6, 1.2, 2.4, 4.8],
             linewidths=0.5 + 0.3*np.arange(5),
             colors="w", alpha=0.7, 
  )
  ax.contour(hdu_mm.data[0, 0, :, :],
             transform=ax.get_transform(w_mm),
             levels=[0.02, 0.04, 0.08],
             linewidths=[0.5, 1.0, 1.5],
             colors="y", alpha=1.0,
  )

  for _, ra, dec, size in STARS:
      ax.scatter(ra, dec,
                 transform=ax.get_transform("icrs"),
                 s=size, ec="none", fc="c")

  for _, ra, dec, _, _, _, _, _, _, _, _ in MM[2:]:
      c = SkyCoord(ra, dec, unit=(u.hourangle, u.deg))
      ax.scatter(c.ra, c.dec,
                 transform=ax.get_transform("icrs"),
                 marker="+",
                 s=30, ec="g", fc="none", zorder=100)


  # New source from Aina
  ra = "5:35:14.1500"
  dec = "-5:23:40.000"
  c = SkyCoord(ra, dec, unit=(u.hourangle, u.deg))
  ax.scatter(c.ra, c.dec,
             transform=ax.get_transform("icrs"),
             marker="+",
             s=50, ec="c", fc="none", zorder=100)

  ny, nx = hdu.data.shape
  ax.set(
      xlim=[710, 1370], ylim=[500, 1100],
      xlabel="RA (J2000)", ylabel="Dec (J2000)",
  )
  fig.tight_layout(rect=[0.1, 0.07, 1.0, 1.0])
  fig.savefig(figfile, dpi=200)

#+end_src

#+RESULTS: compare-oi-alma
[[file:orion-s-alma-contours-on-oi.jpg]]



***** Small-scale 1.3mm cores from Palau:2018a
#+name: palau-2018-cores
|       |   Position^a |              |   n_1100 au^b |        |       |           |            |        |       | Tentative |
| Core  | alpha(J2000) | delta(J2000) | (x10^7 cm^-3) | N_mm^b | IR?^c | X-rays?^c | Outflow?^c | HMC?^c | cm?^c | Class^c   |
|-------+--------------+--------------+---------------+--------+-------+-----------+------------+--------+-------+-----------|
| N1    | 05:35:13.713 | -05:23:46.77 |            49 |      3 | N     | N         | SiO        | Y      | Y     | 0/I       |
| N2    | 05:35:13.998 | -05:23:45.86 |            27 |      2 | N     | N         | N          | N      | N     | 0/I       |
| N3    | 05:35:14.392 | -05:23:50.82 |           1.8 |      1 | Y     | Y         | HH         | N      | Y     | I/II      |
|-------+--------------+--------------+---------------+--------+-------+-----------+------------+--------+-------+-----------|
| EF1   | 05:35:13.878 | -05:23:57.21 |           2.5 |      1 | N     | N         | SiO?       | Y      | Y     | 0/I       |
| EF2   | 05:35:14.135 | -05:23:56.69 |           7.2 |      1 | N     | N         | SiO?       | Y      | Y     | 0/I       |
| EF3   | 05:35:14.238 | -05:23:57.38 |           4.8 |  >or=1 | N     | N         | N          | N      | N     | 0/I       |
| EF4   | 05:35:14.386 | -05:23:59.64 |            13 |  >or=1 | N     | N         | N          | N      | N     | 0/I       |
| EF5   | 05:35:14.520 | -05:23:57.97 |            25 |  >or=3 | N     | N         | N          | N      | N     | 0/I       |
| EF6   | 05:35:14.535 | -05:23:56.02 |            21 |      1 | Y     | N         | OOS        | N      | N     | I/II      |
| EF7   | 05:35:14.734 | -05:23:53.28 |           4.0 |  >or=1 | N     | N         | N          | N      | N     | 0/I       |
|-------+--------------+--------------+---------------+--------+-------+-----------+------------+--------+-------+-----------|
| WF1   | 05:35:13.578 | -05:23:52.50 |           9.9 |  >or=1 | N     | N         | N          | N      | N     | 0/I       |
| WF2^d | 05:35:13.580 | -05:23:55.25 |            32 |      3 | Y     | Y         | SiO        | Y      | Y     | I         |
| WF3   | 05:35:13.558 | -05:23:59.08 |            18 |      1 | Y     | Y         | CO         | Y      | Y     | I         |
|-------+--------------+--------------+---------------+--------+-------+-----------+------------+--------+-------+-----------|
| SF1   | 05:35:13.125 | -05:24:10.63 |            11 |  >or=1 | N     | N         | N          | N      | N     | 0/I       |
| SF2   | 05:35:13.204 | -05:24:12.57 |            38 |      2 | N     | N         | N          | N      | N     | 0/I       |
| SF3   | 05:35:13.374 | -05:24:11.43 |            37 |      3 | N     | N         | N          | Y      | Y     | 0/I       |
| SF4   | 05:35:13.631 | -05:24:09.11 |            35 |      3 | N     | N         | mas        | Y      | N     | 0/I       |
| SF5   | 05:35:13.752 | -05:24:07.56 |            50 |      5 | N     | N         | SiO        | N      | N     | 0/I       |
| SF6   | 05:35:13.917 | -05:24:08.80 |            28 |      3 | N     | Y         | mas        | Y      | Y     | 0/I       |

+ Notes.
  - ^a :: Core coordinates adopted as the geometric center of the sources belonging to the core.
  - ^b :: n_1100 au is the density of H_2 molecules within 1100 au (diameter), obtained after measuring the flux density in a region of diameter 1100 au (~3"), and converting this into a mass, adopting the same assumptions as in Table 1. N_mm is the number of millimeter sources within 1100 au including both ALMA and VLA data. Lower limits correspond to the ALMA sources that are too faint to be detected with the 7 mm VLA observations.
  - ^c :: References for compact infrared emission (IR): Smith et al. (2004) and this work; X-ray emission: Rivilla et al. (2013); outflows: in case of outflow detection, we give the outflow tracer: CO (Zapata et al. 2005), SiO (Zapata et al. 2006), HH (Herbig-Haro object, Smith et al. 2004), OOS: region from which at least six HH objects originate, with coordinates (J2000): R.A. 05^h35^m14.s56, decl. -05:23:54, with a position error of +or-1."5, O'Dell & Doi 2003), mas: water masers from Zapata et al. (2007); hot molecular core (HMC): Zapata et al. (2007) and A. Palau et al., in preparation; 1.3 cm centimeter emission (cm): Zapata et al. (2004). The tentative class assigned to each core has been estimated from a global assessment of the previous properties (see Section 4).
  - ^d :: For the case of core WF2, we give the properties associated with the strongest millimeter source, WF2b, but note that WF2c is also associated with centimeter emission. The hot molecular core is associated with WF2c.


***** TODO New source that Aina has found
+ This has now been moved to [[file:~/Dropbox/OrionMolecular/orion-south-molecular/README.org][orion-south-molecular/README.org]]
***** Sources in OOS from ODell:2015a
+ This is a lot of sources
+ Most are optically visible
+ Only one near minibar is COUP 602


Designation in Text	R.A. and Decl. Designation	Spectral Type	Other Designations^a

|---------------+-------------+--------------+----------------------------------------------------------------------------------|
| COUP 9        |          ^b | K3III-IVe    | JW 46, 2MASS, H 46                                                               |
| V2202 Ori     | 105.4-416.5 | K8-M0        | COUP 385, JW 349, MAX 9, MLLA 220, HC 146, HHH 349, LML 52                       |
| LQ Ori        | 107.3-344.6 | K2-M1        | COUP 394, DRS 21, HC 224, JW 352, MAX 12, MLLA 316, ZRK 4                        |
| d109.4-326.7  | 109.4-326.7 | cdots        | HC 286, MLLA 379                                                                 |
| COUP 419      | 113.1-426.5 | cdots        | HC 127, LML 77, MLLA 194                                                         |
| COUP 423      | 114.9-351.9 | cdots        | MAX 19, MLLA 289, HC 203, LML 80                                                 |
| COUP 443      | 117.0-351.3 | M0-M3        | BOM d117-352, COUP 443, JW 368, MLLA 290, HC 205, HHH 368, LML 91                |
| V1228 Ori     | 122.8-348.0 | K1-M0        | MAX 27, SB 8, HC 215, HHH378a                                                    |
| COUP 478      | 123.4-352.4 | cdots        | FBG 291, HC 206, LML 108, LR 3, MLLA 292                                         |
| COUP 480      | 124.6-404.1 | cdots        | MLLA 245, HC 169, LML 109                                                        |
| cdots         | 129.9-401.6 | cdots        | 2MASS                                                                            |
| cdots         | 133.6-359.6 | cdots        | 2MASS                                                                            |
| V1398 Ori     | 134.4-340.2 | <M0          | COUP 545, JWLR. 409, MAX 41, MLLA 327, HC 240, HHH409                            |
| COUP 554      | 135.6-355.3 | cdots        | MAX 43, MLLA 276, SB 4, HC 192, LML 139                                          |
| cdots         | 135.6-402.6 | cdots        | 2MASS                                                                            |
| EC 13         | 135.7-408.2 | cdots        | ZRK 137-408                                                                      |
| COUP 555      | 136.0-359.0 | cdots        | MAX 42, MLLA 263, HC 178, LML 138, SB 5, ZRK 136-359                             |
| COUP 564      | 136.8-345.3 | cdots        | EC-MM8, HC 222, MLLA 313, LML 141, ZRK 137-347                                   |
| EC 9          | 137.2-350.6 | cdots        | cdots                                                                            |
| MAX 46        | 137.8-340.0 | cdots        | MLLA 328, SB 1, LM 78, HC 242, LML 144, LR 32, PMF 35                            |
| COUP 582      | 138.6-407.1 | cdots        | cdots                                                                            |
| COUP 593      | 139.2-320.3 | cdots        | HC 314, LML 149, MAX 52, MLLA 413, OW 139-320                                    |
| EC 14         | 139.3-409.4 | cdots        | MM14, ZRK 139-409                                                                |
| COUP 602      | 140.4-338.3 | M0-M3        | JW 431, MLLA 336, TCC 1, HC 247, HHH 431, LML 152                                |
| cdots         | 140.9-351.2 | cdots        | F 053246.64-052544.72                                                            |
| COUP 607      | 141.7-357.0 | cdots        | cdots                                                                            |
| V1328 Ori     | 142.8-424.6 | cdots        | COUP 616, JW 437, MAX 57, MLLA 203, HC 135, LML 156                              |
| DR 1186       | 142.9-353.1 | cdots        | ZRK 15                                                                           |
| EC 16         | 143.6-354.6 | cdots        | cdots                                                                            |
| COUP 632      | 144.0-350.9 | cdots        | MAX 61, MLLA 293, SB 2, LM 1, LML 162                                            |
| H 20051       | 144.6-353.8 | cdots        | 2MASS                                                                            |
| HC193         | 145.3-355.1 | cdots        | MLLA 273B                                                                        |
| H 20045       | 145.6-349.4 | cdots        | cdots                                                                            |
| HC 209        | 145.7-350.8 | cdots        | FBG 421, LML 170, MLLA 295, ZRK 141-351                                          |
| H 20044       | 147.7-352.0 | cdots        | cdots                                                                            |
| COUP 666      | 148.0-346.0 | K6-M4        | HBJ 20030, JW 453, HHH 453, MLLA 306, TCC 14, DR 623, HC 220, LML 181, LR 72, SI 47 |
| H 20041/2     | 148.3-351.3 | cdots        | cdots                                                                            |
| H 20036       | 148.6-350.1 | cdots        | cdots                                                                            |
| COUP 679      | 150.1-354.0 | cdots        | HC 195, LML 193, LR 83, MLLA 280, MC 20                                          |
| H 20018       | 150.7-341.0 | cdots        | cdots                                                                            |
| ZRK 24        | 150.8-353.0 | cdots        | cdots                                                                            |
| H 20027       | 151.3-349.7 | cdots        | cdots                                                                            |
| ZRK 25        | 151.5-353.6 | cdots        | cdots                                                                            |
| EC 17         | 151.6-340.6 | cdots        | cdots                                                                            |
| cdots         | 152.3-340.4 | cdots        | H 20014                                                                          |
| COUP 691      | 152.5-349.9 | cdots        | MLLA 297, HC 211, LML 204, LR 92                                                 |
| DR 769        | 153.0-355.8 | cdots        | cdots                                                                            |
| MAX 77        | 154.9-352.3 | cdots        | cdots                                                                            |
| COUP 717      | 155.1-337.2 | K            | BOM d155-338, HC 251, MAX 79, LML 212, ZRK 34                                    |
| COUP 725      | 156.8-339.0 | cdots        | MLLA 334, TCC 37, HC 246, LM 49, LML 221, LR 114                                 |
| COUP 728      | 156.8-533.2 | K8e          | 2MASS, DR 241, JW 482, MLLA 56, V2274                                            |
| HC 236        | 157.0-341.9 | cdots        | LML 222, MLLA 38, LR 115                                                         |
| COUP 734      | 157.3-337.9 | cdots        | HC 248, LML 224, TCC 41                                                          |
| cdots         | 157.6-338.4 | cdots        | Discovered in this study.                                                        |
| theta^1 Ori E | 157.7-310.0 | mid-G giants | COUP 732, HC 344, MLLA 48, TCC 40                                                |
| LV 6          | 157.9-326.7 | G4-K5        | HC 287, HHH 489, JW 489, MAX 86, MLLA 381, TCC 42, ZRK 40                        |
| COUP 747      | 158.5-325.5 | cdots        | MLLA 385, TCC 47, HC 291, LML 232, ZRK 43                                        |
| COUP 757      | 158.7-337.6 | cdots        | DR 1007, HC 250, LML 237, LR 128, MLLA 339, TCC 50, ZRK 44                       |
| V2279 Ori^c   | 159.3-349.9 | G4-M2        | COUP 758, HC 455, JW 499, HHH 499, MAX 92, MLLA 296                              |
| AC Ori        | 159.8-352.7 | F2-K7        | COUP 768, JW 503, HC 202, HHH 503, MAX 94, MLLA 288, ZRK 47                      |
| LV 4          | 160.5-324.4 | cdots        | HC 296, LML 245, LR 134, MAX 98, MLLA 389, TCC 54, ZRK 48                        |
| COUP 769      | 160.7-353.3 | cdots        | LML 248                                                                          |
| LV 3          | 162.8-316.5 | cdots        | COUP 787, JW 512, MAX 105, MLLA 422, TCC 63, HC 322, OW 163-317, ZRK 52          |
| HC 292        | 163.2-325.3 | cdots        | LML 269, LR 154, MLL 386, TCC 66                                                 |
| HC 341        | 164.0-311.3 | cdots        | DOH 5, MLLA 445, TCC 67                                                          |
| COUP 820      | 166.1-316.1 | cdots        | MLLA 426, TCC 70, HC 325, OW 166-316, ZRK 58                                     |
| LV 2          | 167.2-316.6 | G5-K5        | theta^1 Ori G, COUP 826, JW 524, MAX 116, MLLA 424, HC 323, HHH 524              |
| COUP 827      | 167.6-328.0 | cdots        | MLLA 375, HC 284, OW 168-328, TCC 74, ZRK 60                                     |
| COUP 900      | 175.7-324.7 | >G6          | HC 295, LML 325, LR 207, MAX 131, MLLA 387, TCC 95                               |
| HC 271        | 180.4-330.9 | cdots        | LML 347, LR 234, MLLA 363, TCC 106, ZRK 74                                       |
| COUP 943      | 180.5-401.0 | cdots        | DR 458, JW 575, HC 177, LM 350, LR 235                                           |

Notes.
a Other Designations: 2MASS, Cutri et al. (2003); BOM, Bally et al. (2000); COUP, Getman et al. (2005); DOH, Doi et al. (2004); EC, Eisner & Carpenter (2006); DR, Da Rio et al. (2009); FBG, Feigelson et al. (2002); F, Felli et al. (1993); H, Rodriguez-Ledesma et al. (2009); HBJ, Herbst et al. (2002); HC, Hillenbrand & Carpenter (2000); HHH, Hillenbrand et al. (2013); JW, Jones & Walker (1988); LM, Lada et al. (2000); LML, Lada et al. (2004); LR, Luhman et al. (2000); LV, Laques & Vidal (1979); MAX, Robberto et al. (2005); MC, McCaughrean & Stauffer (1994); MLLA, Muench et al. (2002); NW, Nutter & Ward-Thompson (2006); OW, O'Dell & Wen (1994); SB, Smith et al. (2004); SI, Simon et al. (1999); PMF, Prisinzano et al. (2008); TCC, McCaughrean & Stauffer (1994); ZRK, Zapata et al. (2004a).
b Position 5:34:39.89, -5:26:42.1.
c Fainter companion 0."51 at 47deg.
* Column densities of O I lines
** Relation between Einstein-A and cross section
:PROPERTIES:
:ID:       EA7894C6-F3D9-4534-A222-767B47129164
:END:
+ \sigma_ik = (h\nu/4\pi) B_ik
+ g_k A_ki = (2h\nu^3/c^2) g_k B_ki = (2h\nu^3/c^2) g_i B_ik
+ => \sigma_ik = (h\nu/4\pi) g_k A_ki / [(2h\nu^3/c^2) g_i ] = (g_k/g_i) (c^2 / 8 \pi \nu^2) A_ki 
+ => \sigma_ik = (g_k/g_i) (\lambda^2 / 8 \pi) A_ki 
+ Why are units of \sigma in cm^2 Hz ?
  + Because the line-center cross-section does depend on the line width
  + \sigma(\nu_0) = \sigma_jk \phi(\nu_0) cm^2
  + Where \phi(\nu) is the absorption profile
  + And \phi(\nu_0) ~ 1/\Delta\nu and \Delta\nu = \nu_0 \Delta{}V/c = \Delta{}V / \lambda_0
  + => \phi(\nu_0) \approx \lambda_0 / \Delta{}V
+ So, taking the Hilborn version from below, we get
  + \sigma(\nu_0) = 1/4 (g_2/g_1) (\lambda_0^3 / \Delta{}V) A_ki 
*** Hilborn:2002a
+ Does things carefully but uses funny units (and atrocious typesetting)
+ \sigma_0 = 1/4 (g_2/g_1) \lambda_21^2 A_21
  + This is like the \sigma_jk above
  + It is larger by a factor of 2\pi - why?
** Application to our FUV lines

|        Wav | J_i | J_k |     A_ki |        \sigma |
|------------+-----+-----+----------+----------|
| 1025.76161 |   2 |   3 | 7.40E+07 | 2.80e-14 |
| 1025.76256 |   2 |   2 | 1.84E+07 | 4.96e-15 |
| 1025.76330 |   2 |   1 | 2.05E+06 | 3.32e-16 |
| 1027.43051 |   1 |   2 | 5.52E+07 | 2.49e-14 |
| 1027.43125 |   1 |   1 | 3.06E+07 | 8.30e-15 |
| 1028.15710 |   0 |   1 | 4.08E+07 | 3.33e-14 |
#+TBLFM: $5=0.25 $4 ((2 $3 + 1) / (2 $2 + 1) ) ($1 $ang)**3 / 10 $km ;s3

+ So they are all about 3e-14 cm^2
+ O abundance in gas phase is 8.5 to 8.65 depending whether using ORL or CEL
  + 10**(8.5 - 12) = 3.16e-4
  + 10**(8.65 - 12) = 4.46e-4
+ Take 4e-4 as an average
+ This means that \sigma per H atom is about 1.332e-17 cm^2/H^0, which is about the same as the H^0 photoionization cross section.
** DONE Summary of fluorescent O I spectrum
CLOSED: [2019-08-27 Tue 12:53]
*** Main route through 3p \to 3s 8446 \AA
1. All fluoresced excited levels considered are 2s2.2p3.(4So).nl 
2. The nd 3D^o and ns 3S^o terms are pumped by resonant transitions from the ground 2s2.2p4 3P term
   - Strict LS coupling E1 selection rules are \Delta S = 0, \Delta L = 0, \pm 1, \pi_f = -\pi_i
     - So the np 3P terms are not pumped (same parity as ground)
     - And the 5S, 5D terms require intermediate coupling (intercombination lines), which are weak
   - Lowest pumped terms are 3s 3S^o via 1304 \AA (UV 2) and 4s 3S^o via 1041 \AA (UV 3)
   - Then 3d 3D^o via 1026 \AA (our Raman line)
   - Then 5s, 4d, 6s, 5d, 7s, 6d, etc
   - Highest with observable consequence are 11s and 10d via 920 \AA (UV 21 and 22)
     - [ ] Comparing A-values: 
3. These then de-excite via a cascade of [nd 3D^o, ns 3S^o] \leftrightarrow n'p 3P transitions
   - Most emit IR lines
   - Most important transitions end in 3p 3P (86626 cm^-1 above ground, or 23211 cm^-1 = 4308 \AA below continuum)
   - Tne nd \to 3p and ns \to 3p transitions give the optical lines 7254, 7002, 6046, ... 4972
     - There are also the 3d \to 3p 1.128 micron and 4s \to 3p 1.316 micron lines, which accounting suggests represent > 50% of the total feeding of 3p
   - The only way out from 3p 3P is 8446 \AA \to 3s 3S^o followed by 1304 \AA \to ground 3P
*** Minor routes
1) There is a leakage of the cascade via {4,5,6,...}p \to 3s. For example 4p \to 3s which gives the 4368 line, but this is 20 times weaker (in photons) than 3p \to 3s
2) We see quintet lines too but 100 times weaker.  Must be populated  by intercombination lines. Two possiblities
   - Direct pumping from ground to quintet states
     - Unlikely to be important since A < 1000 s^-1 for these lines
     - Also, the UV 3.01 multiplet is not seen in the Raman-scattered spectrum
     - [ ] Should work out exact optical wavelengths
   - Decay from excited triplets to excited quintets
     - Maybe LS coupling breaks down more for the higher levels
3) We even see a line from a two-electron transition
   - 3p 3P - 3s' 3D 7982.40, 7987.33 multiplet 19
   - But very weak, about 26 times weaker than 7254 (Esteban:2004a)
   - A is of order 1e4, as opposed to 3e7 for the 8446 triplet line and 3e6 for the 7254 line
     - Ratio of A values: 300, so it must be more efficiently pumped than 5s 3S
*** Ly\beta pumping
+ This is discussed in detail in Kastner:1995a
  + Process is called PAR (photoexcitation by accidental resonance)
  + They have a 13-level atom
  + Only goes up to 4s
  + But it does include quintet as well as triplet levels
+ Important in novas
+ Also in Herbig Ae/Be stars (Mathew:2018a)
+ Requires H\alpha to be optically thick
+ Not the case for Orion, where continuum pumping has long been known to be the dominant mechanism - Grandi:1975a
  + See also Bautista:1999a
  + When Ly\beta pumping operates, then it is 3d 3D that is populated (via 1026 \AA), and then emits 1.1287 micron as it decays to 3p 3P, followed by the 8446
  + When it is continuum pumping that occurs, then in addition the 4s 3S is pumped by 1039,1041 and all the higher ns 3S and nd 3D levels are pumped by shorter wavelength lines down to 912
  + The 4s 3S \to 3p 3P emits 1.3160 micron, which in Orion is slightly stronger than 1.1287 (Walmsley:2000a, Table 1), which proves it is continuum excitation
  + As do all the other optical O I lines from ns (7254, 6046, 5555, etc) and nd (7002, 5958, 5513, etc)
** TODO Do the accounting for the cascades
+ Add up all ns \to 3p and nd \to 3p
  + (converted to photon units)
  + Use Esteban values
+ Compare with the 3p \to 3s 8446 to see how important the unobserved 3d \to 3p and 4s \to 3p are.
+ See table below
  + Column 3 ~n~ is the dereddened line intensity in /photon/ units on a scale of H\beta = 100
  + The sum for the {ns, nd} \to 3p lines is 0.597, or 40% of the 8446 3p \to 3s line
  + This implies that 60% of the pumping of 3p comes via 3d and 4s (or
    levels higher than 10d, 11s)

|  wav |     I |     n | upper |
|------+-------+-------+-------|
| 8446 | 0.882 | 1.525 |       |
|------+-------+-------+-------|
| 4980 | 0.012 | 0.012 | 11s   |
| 5147 | 0.040 | 0.042 | 9s    |
| 5275 | 0.011 | 0.012 | 7d    |
| 5299 | 0.031 | 0.034 | 8s    |
| 5513 | 0.024 | 0.027 | 6d    |
| 5555 | 0.030 | 0.034 | 7s    |
| 5958 | 0.038 | 0.046 | 5d    |
| 6046 | 0.089 | 0.110 | 6s    |
| 7002 | 0.086 | 0.123 | 4d    |
| 7254 | 0.106 | 0.157 | 5s    |
|------+-------+-------+-------|
|  Sum |       | 0.597 |       |
#+TBLFM: $3=$1 $2 / 4886;f3::@13$3=vsum(@II..@III);f3
** What about the observed O I lines?
+ Strongest is 8446.36, 8444.25, 8444.7

Data from Atomic Line List
: -LAB-WAVL-ANG-AIR-|-DLAM--|SPC-|TT|----------CONFIGURATION----------|-TERM--|J_i-J_k|--A_ki--|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
:    8446.247        6.4E-03  O I E1 2s2.2p3.(4So).3s-2s2.2p3.(4So).3p 3So-3P   1 - 0  3.18E+07    15 76794.98 - 88631.30 ASD
:    8446.359        6.4E-03  O I E1 2s2.2p3.(4So).3s-2s2.2p3.(4So).3p 3So-3P   1 - 2  3.18E+07    15 76794.98 - 88631.15 ASD
:    8446.758        6.4E-03  O I E1 2s2.2p3.(4So).3s-2s2.2p3.(4So).3p 3So-3P   1 - 1  3.18E+07    15 76794.98 - 88630.59 ASD

So upper level is ~2s2.2p3.(4So).3p 3So-3P~ term as opposed to the ~3D~ term that our FUV lines excite. 
*** Cascade from ~3d 3D~ term
+ There are some weak semi-forbidden intercombination transitions: 
  + \to 2s2.2p4 1D and 1S in the ground configuration with A values around 1000 /s
    + Excitation of 15867.86 and 33792.58 cm^-1 above ground, so 6300 and 2960 and 5577 forbidden lines will be pumped (presumably negligibly compared with collisions) 
  + \to 3p 5P excited term, all with A < 1000 /s as well
+ Apart from that, the only transitions are to 3p 3P and back to the ground 3P
  1. \to 3p 3P - \lambda = 1.129 \micro{}m - A = 2.8e7 from J=2, 2.8e7 from J=3, 2.8e7 from J=1
  2. \to ground 3P - \lambda = 1026-1028 \AA - A = 7.4e7 from J=3,2, or 1
+ So branching ratios are 27.5% and 72.5%
+ So after 4 absorptions of 1025, most has been converted to longer wavelengths
+ Only 0.003% go the intercombination route
+ After that, the only route is 8448 \AA \to 3s 3S followed by 1305 \AA back to the ground
+ So that makes a nice cycle
*** Other O I fluorescent lines
:PROPERTIES:
:ID:       6D6ABAF2-EFB7-4809-BE42-AB3B6AB5AAFD
:END:
+ 7982.40, 7987.33
  + Multiplet 19
  + 3p 3P - 3s' 3D
  + This has the inner shells in a different term: (2D^o) instead of (4S^o)
  + Very weak
  + [ ] How is 3s' 3D excited?
+ 7771.94,74.17,75.39
  + Multiplet 1
  + 3s 5S - 3p 5P
  + Sky contam, but real I think
  + Only evidence of intercombination pumping - this is the equivalent of 8446 but for the quintets (100 times weaker)
  + Although it could also be recombination (this would have a different spatial distribution)
  + Should be pumped indirectly via
    + Ground 3P \to 3d 5D^o (1026.476, 1028.145, 1028.870)
    + Then, 3d 5D^o \to 3p 5P (multiplet 8, 9260 to 9266 \AA)
      + *I seem to see this in MUSE spectra* although there may be some sky and also [Fe II] 9268
+ 7254.15,54.45,54.53
  + Multiplet 20
  + 3p 3P - 5s 3S
  + Strong, but still much weaker than 8446
+ 7001.92,2.23
  + Multiplet 21
  + 3p 3P - 4d 3D
  + A bit weaker than 7254
+ 6046.23,.44,.49
  + Multiplet 22
  + 3p 3P - 6s 3S
  + Weaker still
+ 5958
  + Multiplet 23
  + 3p 3P - 5d 3D
  + Blend with Si II
+ 5555.03
  + Multiplet 24
  + 3p 3P - 7s 3S
  + Even weaker
+ 5512.60,.77
  + Multiplet 25
  + 3p 3P - 6d 3D
+ 5299
  + Multiplet 26
  + 3p 3P - 8s 3S
+ 5275
  + Multiplet 27
  + 3p 3P - 7d 3D
  + Blended with [Fe III] 5270
+ 5147
  + Multiplet 28
  + 3p 3P - 9s 3S
+ 5131
  + Multiplet 29
  + 3p 3P - 8d 3D
+ 5038 and 5048
  + Heavy blends with He I, [Fe II], Si II
+ 4980
  + Multiplet ??
  + 3p 3P - 11s 3S
  + 
+ 4972
  + 3p 3P - 10d 3D
  + Marginally detected in wing of [O III] 4959
+ Limit is 4715 for the shortest lines ending in 3p 3P
  + The ns \to 3p transitions tend to have 3x higher A values than the (n-1)d \to 3p transitions that are near them in wavelength, which explains why they are brighter 
  + There is a possible detection of 4895 3p \to 13s in MUSE, but most of the higher lines are blends with other lines
  + 4867 and 4864 are in red wing of H\beta
  + 4842, 4845 (14d, 15s !!!) are in blue wing of H\beta and might even be detected in Orion S
  + 4825, 4827 are the next ones - in a clean bit of spectrum but not visible
*** Lines that aren't observed but might be useful
+ 4p (99680 - 99682) can decay to
  + 3s 4368 \AA
    + *but it is observed*
    + Esteban:2004a give I = 0.073 on H\beta = 100 scale
      + And Baldwin:2000a give I = 0.0147 on I/6678 scale, where Hb = 24.6 => 100 0.0147 / 24.6 = 0.06, so close enough
    + Whereas Esteban give - 4980: 0.012, 5147: 0.040, 5275: 0.011,  5299: 0.031, 5513: 0.024, 5555: 0.030, 5958: 0.038, 6046: 0.089, 7002: 0.086, 7254: 0.106, 8446: 0.882
      + And Baldwin (just the bright ones, and multiplying by 4 to put on same scale) - 7254: 0.094, 7002: 0.074, 6046: 0.074, 5958: 0.030, 5555: 0.024, 5513: 0.018,  5299: 0.025, 5275: 0.009, 5147: 0.028 (blend with Co I), 5131: 0.007 
    + Other (Mult #) - 6156 (10): 0.005, 6257 (50.01, 3p' \to 4d' MORE LIKELY C II line): 0.016, 7772 (1): 0.016 (sky contam), 7775 (1): 0.006, 7983 (19): 0.002, 7988 (19): 0.004
    + Bluer - 3511.10 (6p-7d? seems unlikely): 0.025, 4326.4 (also unlikely): 0.031, 4344.35 (intercomb? but very unlikely): 0.006
  + 4s 2.89 micron
  + 3d 4.56 micron
+ 4p can be decayed to from
  + 4d 30.983 micron
  + 5s 36.6 micron
  + Up to 10d and 11s at 11 micron
+ 4s (96225.05) can decay to
  + Ground 1041 \AA, A = 1.5e8
  + 3p 1.316 micron, A = 1.9e7
+ 4s can be decayed to from
  + 4p 28.9 micron
  + 5p 13.1 micron
  + 6p 10.3 micron
*** References for energy levels and IR lines
**** Civis:2018a has lines from 7700 \AA to 12.5 micron
Gives best estimate of energy levels.

**** Moore:1976a is a nice compendium
:PROPERTIES:
:ID:       AC2BBA8F-4C85-408E-B6B0-F08DFAFB3718
:END:
+ Multiplet Nos
  + UV 4 :: 2p4 3P \to 3d 3D
    + 1025-1028 \AA
    + Raman-scattered absorption
  + UV 2 ::  2p4 3P \to 3s 3S
    + 1302-1306 \AA
    + Final step back to ground after emission of 8448
  + UV 3.01 :: 2p4 3P \to 3d 5D
    + 1026-1029 \AA
    + Overlaps with UV 4 but presumably much weaker
    + Yes, A = 300 to 400 s^{-1} according to Peter
      + This is 1e5 times weaker than UV 4, which means that \sigma = 1e-22 cm^2/H instead of 1e-17, so A_V = 10
      + So would be optically thin in the PDR
  + UV 21 :: 2p4 3P \to 11s 3S
    + 2s2.2p4-2s2.2p3.(4So).11s 3P-3So
    + 920-922 \AA
      | 919.917 | 2 - 1 | 2.30E+06 | 3 | 0.00 - 108705.50   |
      | 921.258 | 1 - 1 | 1.37E+06 | 3 | 158.26 - 108705.50 |
      | 921.841 | 0 - 1 | 4.57E+05 | 3 | 226.98 - 108705.50 |
    + Note A values are about 30 times smaller than for 2p4 3P \to 3d 3D and 100 times smaller than for 2p4 3P \to 3s 3S
    + Upper 11s term is 108705.50 cm^-1
    + This is the shortest line that excites a term where we definitely see the fluorescence to 3p
  + UV 29 :: 2p4 3P \to 15s 3S
    + 915.2 \AA
    + No A values in Peter's database
    + Upper 15s term is 109265.90 cm^-1
    + This is the shortest line that excites a term where we might /possibly/ see the fluorescence to 3p (4845 \AA)
  + 4 :: 3s 3S \to 3p 3P
    + 8446 \AA air
    + Our strongest fluorescent line
  + 18.02 :: 3p 3P \to 3d 3D
    + 1.1287 micron air
    + Feeds upper level of 8446 after absorption of 1025
  + 18.01 :: 3p 3P \to 4s 3S
    + 1.316 micron air
    + Also feeds upper level of 8446 after absorption of 1041
  + Other multiplets :: 3p 3P \to ns 3S and nd 3D
    + Optical lines from 4972 to 7254 \AA
    + See [[id:6D6ABAF2-EFB7-4809-BE42-AB3B6AB5AAFD][Other O I fluorescent lines]] above
    + These are fed by resonant lines from the ground 3P term

      
*** Original data on downward transitions from 3d, 3p, 3s
Note that ionization energy from ground is 109837.02 cm^{-1}

**** From 2s2.2p3.(4So).3d 3D
Ionization limit: 12348.64 cm^-1 = 8098 \AA vac
|    WAV VAC | SPC  | CONFIGURATION    | TERM   | J_i-J_k |     A_ki | LEVEL ENERGY  CM^-1 |
|------------+------+------------------+--------+---------+----------+---------------------|
| 1025.76161 | O I  | 2s2.2p4          | 3P-3Do | 2 - 3   | 7.40E+07 | 0.00 - 97488.54     |
| 1025.76256 | O I  | 2s2.2p4          | 3P-3Do | 2 - 2   | 1.84E+07 | 0.00 - 97488.45     |
| 1025.76330 | O I  | 2s2.2p4          | 3P-3Do | 2 - 1   | 2.05E+06 | 0.00 - 97488.38     |
| 1027.43051 | O I  | 2s2.2p4          | 3P-3Do | 1 - 2   | 5.52E+07 | 158.26 - 97488.45   |
| 1027.43125 | O I  | 2s2.2p4          | 3P-3Do | 1 - 1   | 3.06E+07 | 158.26 - 97488.38   |
| 1028.15710 | O I  | 2s2.2p4          | 3P-3Do | 0 - 1   | 4.08E+07 | 226.98 - 97488.38   |
| 1225.17976 | O I] | 2s2.2p4          | 1D-3Do | 2 - 3   | 1.64E+03 | 15867.86 - 97488.54 |
| 1225.18111 | O I] | 2s2.2p4          | 1D-3Do | 2 - 2   | 4.10E+02 | 15867.86 - 97488.45 |
| 1225.18216 | O I] | 2s2.2p4          | 1D-3Do | 2 - 1   | 4.55E+01 | 15867.86 - 97488.38 |
| 1569.96235 | O I] | 2s2.2p4          | 1S-3Do | 0 - 1   | 3.80E+02 | 33792.58 - 97488.38 |
|   9205.822 | O I] | 2s2.2p3.(4So).3p | 5P-3Do | 1 - 2   | 1.33E+01 | 86625.76 - 97488.45 |
|   9205.881 | O I] | 2s2.2p3.(4So).3p | 5P-3Do | 1 - 1   | 1.02E+02 | 86625.76 - 97488.38 |
|   9207.459 | O I] | 2s2.2p3.(4So).3p | 5P-3Do | 2 - 3   | 9.48E+02 | 86627.78 - 97488.54 |
|   9207.535 | O I] | 2s2.2p3.(4So).3p | 5P-3Do | 2 - 2   | 1.26E+01 | 86627.78 - 97488.45 |
|   9207.594 | O I] | 2s2.2p3.(4So).3p | 5P-3Do | 2 - 1   | 7.39E+01 | 86627.78 - 97488.38 |
|   9210.576 | O I] | 2s2.2p3.(4So).3p | 5P-3Do | 3 - 3   | 2.78E-01 | 86631.45 - 97488.54 |
|   9210.653 | O I] | 2s2.2p3.(4So).3p | 5P-3Do | 3 - 2   | 3.95E+01 | 86631.45 - 97488.45 |
|  11289.407 | O I  | 2s2.2p3.(4So).3p | 3P-3Do | 1 - 2   | 2.12E+07 | 88630.59 - 97488.45 |
|  11289.496 | O I  | 2s2.2p3.(4So).3p | 3P-3Do | 1 - 1   | 1.18E+07 | 88630.59 - 97488.38 |
|  11290.005 | O I  | 2s2.2p3.(4So).3p | 3P-3Do | 2 - 3   | 2.82E+07 | 88631.15 - 97488.54 |
|  11290.120 | O I  | 2s2.2p3.(4So).3p | 3P-3Do | 2 - 2   | 7.05E+06 | 88631.15 - 97488.45 |
|  11290.209 | O I  | 2s2.2p3.(4So).3p | 3P-3Do | 2 - 1   | 7.83E+05 | 88631.15 - 97488.38 |
|  11290.409 | O I  | 2s2.2p3.(4So).3p | 3P-3Do | 0 - 1   | 1.57E+07 | 88631.30 - 97488.38 |


**** From 2s2.2p3.(4So).3p 3P
Ionization limit: 21206.43 cm^-1 = 4715.55 \AA vac
|  WAV VAC | SPC   | CONFIGURATION    | TERM   | J_i-J_k |     A_ki | LEVEL ENERGY  CM^-1 |
|----------+-------+------------------+--------+---------+----------+---------------------|
| 6728.141 | O  I] | 2s2.2p3.(4So).3s | 5So-3P | 2 - 2   | 1.04E+03 | 73768.20 - 88631.15 |
| 6728.394 | O  I] | 2s2.2p3.(4So).3s | 5So-3P | 2 - 1   | 4.99E+02 | 73768.20 - 88630.59 |
| 8448.568 | O  I  | 2s2.2p3.(4So).3s | 3So-3P | 1 - 0   | 3.18E+07 | 76794.98 - 88631.30 |
| 8448.680 | O  I  | 2s2.2p3.(4So).3s | 3So-3P | 1 - 2   | 3.18E+07 | 76794.98 - 88631.15 |
| 8449.079 | O I   | 2s2.2p3.(4So).3s | 3So-3P | 1 - 1   | 3.18E+07 | 76794.98 - 88630.59 |

**** From 2s2.2p3.(4So).3s 3S
|    WAV VAC | SPC  | CONFIGURATION | TERM   | J_i-J_k |     A_ki | LEVEL ENERGY  CM^-1 |
|------------+------+---------------+--------+---------+----------+---------------------|
| 1302.16848 | O I  | 2s2.2p4       | 3P-3So |     2-1 | 3.15E+08 |       0.00-76794.98 |
| 1304.85763 | O I  | 2s2.2p4       | 3P-3So |     1-1 | 1.87E+08 |     158.26-76794.98 |
| 1306.02861 | O I  | 2s2.2p4       | 3P-3So |     0-1 | 6.23E+07 |     226.98-76794.98 |
| 1641.30533 | O I] | 2s2.2p4       | 1D-3So |     2-1 | 1.75E+03 |   15867.86-76794.98 |
|  2325.4519 | O I] | 2s2.2p4       | 1S-3So |     0-1 | 6.54E-02 |   33792.58-76794.98 |


* Cloudy Models using high-resolution SEDs
:PROPERTIES:
:ID:       6F1F18E3-155F-4ABD-B9A8-2840A3FB2D2C
:END:
+ There are several reasons for these models:
  1. See the stellar spectrum around Ly\beta and how it varies with depth in PDR
  2. Predict the O I fluorescent line emissivity
  3. Depth to dissociation front, maybe
+ Spectra to use
  + POWR O star grid
  + Label is XX-YY where XX is T in kK and Y.Y is log10 g

** Trapezium stars
+ I have downloaded the following models
  + th1C - 39-40 and 39-42 (should be halfway between)
  + th1A - 30-40
  + th1D - 32-42
  + th1C2 - 25-38
+ I am not doing th1B since it has T=18000 and all the models have much smaller g
  + They only go down to 25,000 K on MS (8 Msun)
+ What about th2A?
  + th2A - 35-41
+ I have downloaded two sets of spectra
  + the coarse SEDs in [[file:../seds/powr-ob/coarse/]]
    + first column is log10(wav/angstrom)
  + fine spectra in FUV file:../seds/powr-ob/fine_fuv
    + first column is linear wav/angstrom
  + In both cases, second column is log10(F_\lambda) at a distance of 10 pc
*** Lines in the stellar spectra
**** P IV lines in FUV
#+begin_example
  Atomic Line List version: 2.05b21   Constructed: 2017-11-07 13:41 GMT
  Wavelength range: 0 - inf   Unit: Angstrom   Type: Vacuum
  Radial velocity: 0 km/s
  Element/Spectrum: P  IV

  -LAB-WAVL-ANG-VAC-|-SPC-|TT|-TERM--|J_i-J_k|--A_ki--|-TPF-|LEVEL-ENERGY--KELVIN|-REF---|
     1025.5615        P IV E1 3Po-3P   1 - 2  7.82E+08    17 98047.47 - 238338.92 ASD
     1028.0941        P IV E1 3Po-3P   0 - 1  1.04E+09    17 97718.78 - 237664.64 ASD
     1030.5145        P IV E1 3Po-3P   1 - 1  7.72E+08    17 98047.47 - 237664.64 ASD
     1030.5149        P IV E1 3Po-3P   2 - 2  2.31E+09    17 98721.80 - 238338.92 ASD
     1033.1116        P IV E1 3Po-3P   1 - 0  3.06E+09    17 98047.47 - 237313.65 ASD
     1035.5159        P IV E1 3Po-3P   2 - 1  1.26E+09    17 98721.80 - 237664.64 ASD

  gk*Aki weighted average wavelength:    1030.5150    
#+end_example
**** Lines in optical around H\alpha
+ Can't find anything that might explain the 6495 \AA absorption
+ There is a Ca I line
  #+begin_example
    Atomic Line List version: 2.05b21   Constructed: 2017-11-07 13:41 GMT
    Wavelength range: 0 - inf   Unit: Angstrom   Type: Air
    Radial velocity: 0 km/s
    Element/Spectrum: Ca I

    -LAB-WAVL-ANG-AIR-|-SPC-|TT|-TERM--|J_i-J_k|--A_ki--|-TPF-|LEVEL-ENERGY--CM^-1|-REF---|
       6439.075         Ca I E1  3D-3Fo  3 - 4  4.26E+07    17 20371.00 - 35896.89 ASD
       6462.567         Ca I E1  3D-3Fo  2 - 3  3.75E+07    17 20349.26 - 35818.71 ASD
       6471.662         Ca I E1  3D-3Fo  3 - 3  4.66E+06    17 20371.00 - 35818.71 ASD
       6493.781         Ca I E1  3D-3Fo  1 - 2  2.85E+07    17 20335.36 - 35730.45 ASD
       6499.650         Ca I E1  3D-3Fo  2 - 2  5.60E+06    17 20349.26 - 35730.45 ASD
       6508.850         Ca I E1  3D-3Fo  3 - 2  1.23E+05    17 20371.00 - 35730.45 ASD

    gk*Aki weighted average wavelength:    6458.822    
  #+end_example
+ That might be visible in the T Tauri stars, but shouldn't affect the nebula
*** Plot SEDS and spectra

Take average to get the 39-41 spectrum
#+begin_src python :results silent
  import numpy as np

  for template in [
          "../seds/powr-ob/coarse/ob-i_{}_sed.txt",
          "../seds/powr-ob/fine_fuv/ob-i_{}_line_calib.txt",
          "../seds/powr-ob/fine_vis/ob-i_{}_line_calib.txt",
  ]:
      for Tstring in "35", "39":
          sfile1 = template.format(f"{Tstring}-40")
          sfile2 = template.format(f"{Tstring}-42")
          try:
              wav1, flam1 = np.genfromtxt(sfile1, unpack=True)
              wav2, flam2 = np.genfromtxt(sfile2, unpack=True)
          except:
              continue
          if ~np.alltrue(wav1 == wav2):
              flam1 = np.interp(wav2, wav1, flam1)
          flam = 0.5*(flam1 + flam2)
          sfile = sfile2.replace("-42", "-41")
          np.savetxt(sfile, list(zip(wav2, flam)), fmt="%10.5f")

#+end_src


First SEDs

#+name: plot-powr-trapezium-seds
#+begin_src python :results file :return figfile
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns


  models = [
      "39-41",
      "32-42",
      "30-40",
      "25-38",
  ]

  figfile = "powr-trapezium-seds.pdf"
  fig, ax = plt.subplots()

  sed0 = None
  for model in models:
      sfile = f"../seds/powr-ob/coarse/ob-i_{model}_sed.txt"
      wav, flam = np.genfromtxt(sfile, unpack=True)
      wav = 10**wav
      flam = 10**flam
      sed = wav*flam
      if sed0 is None:
          sed0 = sed
      else:
          sed0 += sed
      ax.plot(wav, sed, label=model, lw=0.3)
  ax.plot(wav, sed0, color="k", lw=0.5, label="TOTAL")
  ax.legend()
  ax.set(
      xscale="log",
      yscale="log",
      xlabel="Wavelength, Å",
      ylabel="SED $\lambda F_\lambda$ at 10 pc",
      xlim=[1e2, 1e5],
      ylim=[1e-5, 1.0],
  )
  sns.despine()
  fig.savefig(figfile)
#+end_src

#+RESULTS: plot-powr-trapezium-seds
[[file:powr-trapezium-seds.pdf]]


Next, look at high-res optical spectra.  Potential absorption lines: He II 4686 to C IV 5801
#+name: plot-powr-trapezium-optical
#+begin_src python :results file :return figfile
  import numpy as np
  from astropy.convolution import convolve, Gaussian1DKernel
  from matplotlib import pyplot as plt
  import seaborn as sns


  models = [
      ["39-41", r"$\theta^1$ C"], 
      ["35-41", r"$\theta^2$ A"], 
      ["32-42", r"$\theta^1$ D"], 
      ["30-40", r"$\theta^1$ A"], 
      ["25-38", r"$\theta^1$ C$_2$"], 
  ]

  figfile = "powr-trapezium-optical.pdf"
  fig, ax = plt.subplots()

  wav1, wav2 = 4500, 7500
  margin = 10.0
  dwav = 0.05
  wav_grid = np.arange(wav1 - margin, wav2 + margin + dwav, dwav)
  FWHM_AA = 2.5
  inst_FWHM = FWHM_AA / (2.3 * dwav)
  inst_profile = Gaussian1DKernel(stddev=inst_FWHM)

  sed0 = None
  for model, label in models[::-1]:
      sfile = f"../seds/powr-ob/fine_vis/ob-i_{model}_line_calib.txt"
      wav, flam = np.genfromtxt(sfile, unpack=True)
      flam = 10**flam
      sed = wav**4 * flam
      # Remap onto uniform grid
      sed_grid = np.interp(wav_grid, wav, sed)
      # Smooth to 1 AA resolution
      sed_obs = convolve(sed_grid, inst_profile)
      # if sed0 is None:
      #     sed0 = sed
      # else:
      #     sed0 += sed
      ax.plot(wav_grid, sed_obs, label=label, lw=0.6)
  #ax.plot(wav, sed0, color="k", lw=0.5, label="TOTAL")
  ax.axvline(4686, lw=0.4, ls=":")
  ax.axvline(5801, lw=0.4, ls=":")
  ax.axvline(5812, lw=0.4, ls=":")
  ax.axvline(6563, lw=0.4, ls=":", color="r")
  ax.axvline(6633, lw=0.4, ls=":", color="r")
  ax.axvline(6664, lw=0.4, ls=":", color="r")
  ax.axvline(7200, lw=0.4, ls=":", color="r")
  ax.legend(ncol=5)
  ax.set(
      xscale="linear",
      yscale="linear",
      xlabel="Wavelength, Å",
      ylabel="$\lambda^4 F_\lambda$ at 10 pc",
      xlim=[wav1, wav2],
      ylim=[0.0, None],
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS: plot-powr-trapezium-optical
[[file:powr-trapezium-optical.pdf]]


Next fine FUV (/now using merged SEDs, see below/) 

#+name: plot-powr-trapezium-fine-fuv
#+header: :var WAVMIN=1000 WAVMAX=1050
#+begin_src python :results file :return figfile
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns


  models = [
      ["39-41", r"$\theta^1\,$C"], 
      ["32-42", r"$\theta^1\,$D"], 
      ["30-40", r"$\theta^1\,$A"], 
      ["25-38", r"$\theta^1\,$C$_2$"], 
  ]

  figfile = f"powr-trapezium-fine-fuv-{WAVMIN}-{WAVMAX}.pdf"
  fig, ax = plt.subplots()
  wavtot = None
  flamtot = None
  for model, label in models:
      # sfile = f"../seds/powr-ob/coarse/ob-i_{model}_sed.txt"
      # wav, flam = np.genfromtxt(sfile, unpack=True)
      # wav = 10**wav
      # flam = 10**flam

      sfile2 = f"../seds/powr-ob/merge/ob-i_{model}_sed.txt"
      wav2, flam2 = np.genfromtxt(sfile2, unpack=True)
      wav2 = 10**wav2
      flam2 = 1e4*10**flam2
      ax.plot(wav2, flam2, label=model, lw=0.3)
      # ax.plot(wav, flam, color="k", alpha=0.2, label="_nolabel_")
      mask = (wav2 <= WAVMAX) & (wav2 >= WAVMAX-10)
      ax.text(WAVMAX, np.median(flam2[mask]), label, fontsize="x-small")

      if wavtot is None:
          wavtot = wav2
          flamtot = flam2
      else:
          flamtot += np.interp(wavtot, wav2, flam2)

  ax.plot(wavtot, flamtot, color="k", lw=0.3)
  mask = (wavtot <= WAVMAX) & (wavtot >= WAVMAX-10)
  ax.text(WAVMAX, np.median(flamtot[mask]), "Total")

  # ax.legend()
  ax.set(
      xlabel="Wavelength, Å",
      ylabel="Flux $F_\lambda$ at 0.1 pc, erg s$^{-1}$ cm$^{-2}$ Å$^{-1}$",
      xlim=[WAVMIN, WAVMAX],
      ylim=[0.0, None],
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS: plot-powr-trapezium-fine-fuv
[[file:powr-trapezium-fine-fuv-1000-1050.pdf]]

There are various P IV lines that are quite deep. One of them coincides with our 1028.1 O I line


Around Ly alpha (seems to be a wind line at 1245)
#+call: plot-powr-trapezium-fine-fuv(1200, 1250)

#+RESULTS:
[[file:powr-trapezium-fine-fuv-1200-1250.pdf]]

Around 1304 A that pumps O I 3s - seems relatively clean
#+call: plot-powr-trapezium-fine-fuv(1280, 1330)

#+RESULTS:
[[file:powr-trapezium-fine-fuv-1280-1330.pdf]]

Around 920 A, which is where the highest observed ns and nd pumping lines are.  Unfortunately, only goes as far as 920, so uses coarse SED below that.  Lots of Lyman lines.  The Lyman jump is not that large

#+call: plot-powr-trapezium-fine-fuv(890, 940)

#+RESULTS:
[[file:powr-trapezium-fine-fuv-890-940.pdf]]


#+call: plot-powr-trapezium-fine-fuv(200, 750)

#+RESULTS:
[[file:powr-trapezium-fine-fuv-200-750.pdf]]

*** Combine fine and coarse and make them suitable for Cloudy
:PROPERTIES:
:ID:       534BA570-96A5-4014-9FFF-8450B46BFA0A
:END:
Combine fine and coarse:

#+name: merge-fine-coarse
#+begin_src python :var ID="39-41" :results silent
  import numpy as np


  f_coarse = f"../seds/powr-ob/coarse/ob-i_{ID}_sed.txt"
  f_fine = f"../seds/powr-ob/fine_fuv/ob-i_{ID}_line_calib.txt"
  f_merge = f_coarse.replace("/coarse/", "/merge/")

  wav_coarse, flam_coarse = np.genfromtxt(f_coarse, unpack=True)
  wav_fine, flam_fine = np.genfromtxt(f_fine, unpack=True)

  # Fine was on a linear wavelength scale
  wav_fine = np.log10(wav_fine)

  # limits of fine wavelength coverage
  wav1, wav2 = wav_fine.min(), wav_fine.max()

  # coarse wavs ouside fine coverage (below and above)
  mask1 = wav_coarse < wav1
  mask2 = wav_coarse > wav2

  # merge wavs and fluxes
  wav_merge = np.concatenate([wav_coarse[mask1], wav_fine, wav_coarse[mask2]])
  flam_merge = np.concatenate([flam_coarse[mask1], flam_fine, flam_coarse[mask2]])

  np.savetxt(f_merge, list(zip(wav_merge, flam_merge)), fmt="%12.7f")

#+end_src

And do the remaining stars too
#+call: merge-fine-coarse("25-38")
#+call: merge-fine-coarse("30-40")
#+call: merge-fine-coarse("32-42")

Now add them all together to make a Trapezium SED

#+begin_src python :results silent
  import numpy as np
  models = [
      "39-41", 
      "32-42", 
      "30-40", 
      "25-38",  
  ]
  wavtot = None
  for model in models:
      sfile = f"../seds/powr-ob/merge/ob-i_{model}_sed.txt"
      wav, flam = np.loadtxt(sfile, unpack=True)
      # Make sure to convert from log to linear before adding
      if wavtot is None:
          wavtot = wav
          flamtot = 10**flam
      else:
          flamtot += 10**np.interp(wavtot, wav, flam)
  # Back to log for consistency with other POWR SEDs
  flamtot = np.log10(flamtot)
  sfile = "../seds/powr-ob/merge/powr_trapezium_sed.txt"
  np.savetxt(sfile, list(zip(wavtot, flamtot)), fmt="%12.7f")

  # Make sure no repeated entries
  wav_unique = np.sort(list(set(wavtot)))
  flam_unique = np.interp(wav_unique, wavtot, flamtot)

  # Finally, write out a version to be used with Cloudy's "table SED" command

  # Energy in Rydbergs
  e_ryd = 1e8/(1.09737315685e5 * 10**wav_unique)
  # Use that Fnu = (lam/nu) Flam = (lam**2 / c) Flam and don't worry
  # about the normalization
  Fnu = 10**(flam_unique + 2*wav_unique)
  sfile = "../cloudy/models/trapezium_powr_fine_fuv.sed"
  header = f"{'E, Ryd':14s}{'F_nu':14s}"

  data = list(zip(e_ryd[::-1], Fnu[::-1]))
  np.savetxt(sfile, data, header=header, fmt="%14.7e")

#+end_src

*** Total luminosity of Trapezium
| star  | log L/Lsun | L, erg/s |
|-------+------------+----------|
| th1C  |       5.31 |  7.80e38 |
| th1A  |       4.45 |  1.08e38 |
| th1D  |       4.47 |  1.13e38 |
| th1B  |       3.25 |  6.79e36 |
| th1C2 |        4.2 |  6.05e37 |
|-------+------------+----------|
|       |            |    38.89 |
#+TBLFM: $3=$Lsun 10**$-1;s3::@7$3=log10(vsum(@I..@2));f2

+ Answer: 10^38.89 erg/s

*** Run cloudy models with this new SED
:PROPERTIES:
:ID:       AFF44F5A-6868-4ACF-9018-D6B055BECD2F
:END:
+ [X] Updated Cloudy to latest version
+ [X] Compiled Cloudy
  + [2019-09-25 Wed] Had to use llvm version again this time
  + ~Work/CLOUDY/cloudy/source/cloudy.exe~
+ [X] Test runs
  + This took a long time - turns out that ~continuum_mesh.ini~ cannot have any blank lines
  + Look at SED




**** Possible bugs in the Cloudy model
+ Need to bear in mind https://www.nublado.org/ticket/78

**** Changing default resolution
+ We need to edit ~continuum_mesh.ini~
  + *No blank lines in this file* or bad things happen
+ [[file:~/Dropbox/dib-scatter-hii/cloudy/coninuum_mesh_lybeta.ini]]
+ This has R=300 over most of range (same as Cloudy default)
+ But R=50,000 from 1000 \to 1050 \AA
  + \Delta\lambda_{1} = 0.02 \AA around Ly\beta
  + Or \Delta\lambda_{2} \approx 1 \AA when Raman scattered to H\alpha
  + This is comparable to the MUSE resolution
  + [ ] But much less than Keck HIRES, so we might want to revisit this later and run it at even higher resolution

#+begin_src sh
  cp -fv ../cloudy/continuum_mesh_lybeta.ini ~/Work/CLOUDY/cloudy/data/continuum_mesh.ini
#+end_src

#+RESULTS:
: ../cloudy/continuum_mesh_lybeta.ini -> /Users/will/Work/CLOUDY/cloudy/data/continuum_mesh.ini





**** Changing default set of lines
+ I needed to increase the number of Si II levels from the default of 15, since otherwise the 1023.70 line is taken from Opacity Project and is inaccurate wavelength (1024.03, which has no reliable provenance)
  + This is in [[file:~/Dropbox/dib-scatter-hii/cloudy/models/stout-extra-o1-si2.ini]]
  + I put it up to 50, which includes all the levels below the Lyman limit
  + We might need to increase that still further in order to predict fluorescent lines in the fully ionized gas
+ Also tried to increase O I levels to include up to Lyman limit (160 levels in this case)
  + But for some reason it trims it to 135
    : Spectrum O  1 (species: O) trimmed to 135 levels (original 160) to have positive Aul.
  + Which means we only go up to 8s 3S level, which gives the 5299 line
  + So, we are still missing the blue O I fluorescent lines
  + It seems to be because the ~o_1.tp~ has no entries for level 136 (10s 3S) and some others


**** Simple models
+ Need to evaluate code in [[id:BFADB49A-57C0-4D0F-B78A-3017B7CAAA55][An Emacs mode for cloudy input files]] in [[file:~/Dropbox/cloudy-dust-charging/][cloudy-dust-charging]] project to define ~cloudy-input-mode~

#+name: cloudy-trap-radiation
#+begin_src cloudy-input
  # Total trapezium SED from POWR OB models
  table SED "trapezium_powr_fine_fuv.sed"
  luminosity total 38.89
  # Add 1 L_sun of 1e6 K x-rays
  brems 6
  luminosity total 33.6
  # And general Milky Way backgrounds
  cmb
  table ism
  cosmic rays, background
#+end_src


These are some fluorescent O I lines
#+name: cloudy-blends
#+begin_src cloudy-input
  set blend 7254 quiet
  "O  1" 7254.15
  "O  1" 7254.45
  "O  1" 7254.53
  end
  set blend 5299 quiet
  "O  1" 5298.89
  "O  1" 5299.04
  "O  1" 5299.09
  end
#+end_src


+ Note we can't have ~H2   2.12125m~ since we don't have the big molecule
  + So we have the simple version ~H2 v 0~
+ CO 866.727m is J=3-2 I hope
+ ~save cooling each~ didn't work - caused code to crash
#+name: cloudy-saves
#+begin_src cloudy-input
  save overview last ".ovr"
  save continuum last ".cont"
  save pressure last ".pre"
  save cooling last ".cool"
  save heating last ".heat"
  save heat last ".heat"
  save physical conditions last ".phys"
  save hydrogen 21 cm last ".21cm"
  save hydrogen lya last ".lya" 
  save pdr last ".pdr"
  save fine continuum range 1000 1050 units Angstrom merge 1 last ".fcont" 
  save lines, emissivity last ".emis"
  BLND 8446
  BLND 11300
  BLND 7254
  BLND 5299
  O  1 6300.30
  O  2 7319.99
  O  2 7318.92
  O  3 5006.84
  H  1 6562.81
  Ca B 6562.81
  O  1 63.1679m
  C  2 157.636m
  H2 v 0
  CO   866.727m
  IRAC 3.60000m
  IRAC 4.50000m
  IRAC 5.80000m
  IRAC 8.00000m
  end of lines
  # UV pumping lines, mainly around Ly-b but see below for extras
  save lines optical depth some last ".linetau"
  H  1 1025.72A
  O  1 1025.76A
  O  1 1027.43A
  O  1 1028.16A
  S  2 1021.25A
  S  2 1021.55A
  S  3 1021.11A	
  S  3 1021.32A
  Si 2 1023.70A
  Si 2 1020.70A
  S  1 1024.64A
  O  1 1302.17A
  O  1 1304.86A
  O  1 1306.03A
  O  1 976.448A
  O  1 930.257A
  end of lines
  # Extra O I pumping lines
  # 1304 is from ground to 3s 3S
  # 976 is from ground to 5s 3S (pumps 7254 A)
  # 930 is from ground to 8s 3S (pumps 5299 A)
  save lines, array ".lina" last, units microns
#+end_src

#+name: cloudy-trap-physical
#+begin_src cloudy-input
  hden 4.00
  radius 17.5
  constant pressure
  magnetic field -5 gauss
  turbulence 5 km/s
  stop temperature off
  iterate
  init file="ism.ini"
  abundances hii region no grains
  grains orion no qheat
  grains PAH function 3
#+end_src



#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-NH0-19.in
  title Hi-res Ly-beta with N(H0) = 10^19
  <<cloudy-trap-radiation>>
  <<cloudy-trap-physical>>
  stop neutral column density 19
  <<cloudy-saves>>
#+end_src

And the same, but deeper: N(H_0) = 1e20 cm^-2

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-NH0-20.in
  title Hi-res Ly-beta with N(H0) = 10^20
  <<cloudy-trap-radiation>>
  <<cloudy-trap-physical>>
  stop neutral column density 20
  <<cloudy-saves>>
#+end_src

And even deeper, N(H_0) = 1e21 cm^-2

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-NH0-21.in
  title Hi-res Ly-beta with N(H0) = 10^21
  <<cloudy-trap-radiation>>
  <<cloudy-trap-physical>>
  stop neutral column density 21
  <<cloudy-saves>>
#+end_src

**** Also models for the Bar
+ This is a bit further away, 0.21 pc if in plane of sky
  + But could be more, say 0.42 pc => 10**18.11 pc
+ And lower density (4000)
+ And reduce dust opacity
  + But it turns out that if we reduce opacity by 10, then this also reduces the heating rate
  + Try reducing by 3

#+name: cloudy-trap-bar
#+begin_src cloudy-input
  hden 3.60
  radius 18.11
  constant pressure
  magnetic field -5 gauss
  turbulence 5 km/s no pressure
  stop temperature off
  iterate
  init file="ism.ini"
  database stout "stout-extra-o1-si2.ini"
  abundances hii region no grains
#+end_src

#+name: cloudy-trap-bar
#+begin_src cloudy-input
  hden 3.60
  radius 18.11
  constant pressure
  magnetic field -5 gauss
  turbulence 5 km/s no pressure
  stop temperature off
  iterate
  init file="ism.ini"
  database stout "stout-extra-o1-si2.ini"
  abundances hii region no grains
#+end_src

Various options for grains.   

What the orion models in the test suite have.  100% normal grains and 300% PAH in neutral gas.
#+name: cloudy-grains-100-300
#+begin_src cloudy-input
  grains orion
  grains PAH function 3.0
#+end_src

What Salgado suggest: 10% of normal grains (but we put the PAH 3x higher than ISM, as with the test suite)
#+name: cloudy-grains-10-300
#+begin_src cloudy-input
  grains orion 0.1
  grains PAH function 3.0
#+end_src

#+name: cloudy-grains-10-100
#+begin_src cloudy-input
  grains orion 0.1
  grains PAH function 1.0
#+end_src

#+name: cloudy-grains-10-30
#+begin_src cloudy-input
  grains orion 0.1
  grains PAH function 0.3
#+end_src

This is a compromise of 30% regular grains and 100% PAH (in neutral gas). 
#+name: cloudy-grains-30-100
#+begin_src cloudy-input
  grains orion no qheat 0.3
  grains PAH function 1.0
#+end_src

#+name: cloudy-em-saves
#+begin_src cloudy-input
save continuum emissivity 1024 ".em1024" last, units angstrom 
save continuum emissivity 1025 ".em1025" last, units angstrom 
save continuum emissivity 1026 ".em1026" last, units angstrom 
save continuum emissivity 1027 ".em1027" last, units angstrom 
save continuum emissivity 1028 ".em1028" last, units angstrom 
save continuum emissivity 1029 ".em1028" last, units angstrom 
#+end_src

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-19.in
  title Orion Bar to N(H0) = 10^19
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-30-100>>
  stop neutral column density 19
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-20.in
  title Orion Bar to N(H0) = 10^20
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-30-100>>
  stop neutral column density 20
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-21.in
  title Orion Bar to N(H0) = 10^21
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-30-100>>
  stop neutral column density 21
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-22.in
  title Orion Bar to N(H0) = 10^22
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-30-100>>
  stop neutral column density 22
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

Finally, a model that is guaranteed to go molecular
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH2-22.in
  title Orion Bar to N(H0) = 10^22
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-30-100>>
  stop H2 column density 22
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

And a model with more dust
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH2-22-full-dust.in
  title Orion Bar to N(H0) = 10^22
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-100-300>>
  stop H2 column density 22
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

And a model with only 10% dust, but still 3x PAH
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH2-22-low-dust.in
  title Orion Bar to N(H0) = 10^22 (10% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-10-300>>
  stop H2 column density 22
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

And fill in the lower column density models for the 10% and 100% dust
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-22-full-dust.in
  title Orion Bar to N(H0) = 10^22 (100% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-100-300>>
  stop neutral column density 22
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-21-full-dust.in
  title Orion Bar to N(H0) = 10^21 (100% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-100-300>>
  stop neutral column density 21
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-20-full-dust.in
  title Orion Bar to N(H0) = 10^20 (100% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-100-300>>
  stop neutral column density 20
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-19-full-dust.in
  title Orion Bar to N(H0) = 10^19 (100% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-100-300>>
  stop neutral column density 19
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-22-low-dust.in
  title Orion Bar to N(H0) = 10^22 (10% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-10-300>>
  stop neutral column density 22
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-21-low-dust.in
  title Orion Bar to N(H0) = 10^21 (10% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-10-300>>
  stop neutral column density 21
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-20-low-dust.in
  title Orion Bar to N(H0) = 10^20 (10% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-10-300>>
  stop neutral column density 20
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-19-low-dust.in
  title Orion Bar to N(H0) = 10^19 (10% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-10-300>>
  stop neutral column density 19
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src


And do some intermediate columns: 20.5, 21.5
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-205-low-dust.in
  title Orion Bar to N(H0) = 10^20.5 (10% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-10-300>>
  stop neutral column density 20.5
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-215-low-dust.in
  title Orion Bar to N(H0) = 10^21.5 (10% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-10-300>>
  stop neutral column density 21.5
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-205-full-dust.in
  title Orion Bar to N(H0) = 10^20.5 (100% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-100-300>>
  stop neutral column density 20.5
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH0-215-full-dust.in
  title Orion Bar to N(H0) = 10^21.5 (100% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-100-300>>
  stop neutral column density 21.5
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

And one with 10% normal grains and PAH at 100% instead of 300
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH2-22-low-dust-PAH.in
  title Orion Bar to N(H2) = 10^22 (10% grain opacity and only 100% PAH)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-10-100>>
  stop H2 column density 22
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-NH2-22-low-dust-low-PAH.in
  title Orion Bar to N(H2) = 10^22 (10% grain opacity and only 30% PAH)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-10-30>>
  stop H2 column density 22
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src


**** Testing the STOUT database
#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-print-stout.in
  title Orion Bar single zone test of STOUT
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar>>
  <<cloudy-grains-30-100>>
  stop zone 1
  database stout print
  save line labels ".linelabels"
  <<cloudy-blends>>
  <<cloudy-saves>>
#+end_src


**** Re-running the models
+ This is necessary now that I have fixed the Si II lines
+ I am running the ~low-dust~ models for all the columns
+ And for the "all-the-way-to-H_2" models I am running
  + ~full-dust~
  + ~low-dust~
  + ~low-dust-PAH~
  + ~low-dust-low-PAH~



**** Try to get a better bar model [2020-08-14 Fri]
+ None of the extant models have the right offset between the ionization front and dissociation front in the Bar
  + This is because the density is too high in the PDR
  + The deduced density from the Raman bands is 8.5e4 pcc @ a H0 column of 1.5e21
  + For instance, the ~low-dust-low-PAH~ has n = 4.7e5 pcc at that point
    + Long plateau with T \approx 120 K
    + n T = 4.7e5 120 = 5.64e7 cm^-3 K
    + Compare with ionized gas: T = 8900 K, n = 4000 pcc => 2 n T = 7.12e7 cm^-3 K
    + So not exactly the same, but close enough
  + From the upper limit on T from the linewidth, we have T <= 480 K
  + So combining that with the Raman-inferred density of 8.5e4 pcc gives:
    + n T = 4e7 cm^-3 K
  + So this is a bit lower than in the ionized gas, but not by much (especially given the uncertainties)
  + So, if T = 500 K, then the pressure in the PDR *could* be thermal
    + Although Cloudy models imply that T is less than this
  + ~full-dust~ has a higher T
+ Current models have B = 10 micro G, n = 4e4 at illuminated face
  + vA = B / sqrt(1.3 mp n) = 0.34 km/s
  + if B^{2} \propto \rho^{\gamma} then v_A \propto \rho^{(\gamma - 1) / 2}
  + Standard (tangled) value is \gamma = 4/3 so v_A ~ \rho^1/6
  + Density contrast PDR/H II is 8.5e4/4000 = 21.25 => v_A contrast = 1.66
  + So if we want 4 km/s in PDR, we get 2.41 km/s in H II region
  + Compared with the previous value, this is an increase by (2.41/0.34) = 7.088
  + So 71 micro G should do it


#+name: cloudy-trap-bar-BB
#+begin_src cloudy-input
  hden 3.60
  radius 18.11
  constant pressure
  magnetic field -4.15 gauss
  turbulence 5 km/s no pressure
  stop temperature off
  iterate
  init file="ism.ini"
  database stout "stout-extra-o1-si2.ini"
  abundances hii region no grains
#+end_src

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-BB-NH2-22-low-dust-low-PAH.in
  title Orion Bar (enhanced B field) to N(H2) = 10^22 (10% grain opacity and only 30% PAH)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar-BB>>
  <<cloudy-grains-10-30>>
  stop H2 column density 22
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src

#+begin_src cloudy-input :noweb yes :tangle ../cloudy/models/trap-bar-BB-NH2-22-full-dust.in
  title Orion Bar (enhanced B field) to N(H0) = 10^21.5 (100% grain opacity)
  <<cloudy-trap-radiation>>
  <<cloudy-trap-bar-BB>>
  <<cloudy-grains-100-300>>
  stop H2 column density 22
  <<cloudy-blends>>
  <<cloudy-saves>>
  <<cloudy-em-saves>>
#+end_src



**** Results for offsets i-front to H_2 peak to CO peak

+ These mainly depend on the density
+ From Sternberg:2014a, the important parameter is \alpha G
  + \alpha is H_2 dissoc/formation rate
  + G is average self-shielding factor
+ For standard value of formation rate (R = 3e-17 cm^3/s), we get
  + \alpha G = 1.54 (I_{UV} / n_{100}) [\phi_{g} / 1 + sqrt(2.64 \phi_{g} Z\prime)]
  + Where \sigma_g = 1.9e-21 \phi_{g} Z\prime cm^{2}
    + Z\prime is the metallicity in solar units
    + \phi_{g} is the dependence on dust composition and abundance
    + They are separated because R is also proportional to Z\prime
  + I_{UV} is the FUV radiation intensity, similar to G_0 and u(MMP83)
    + Estimates for Bar are given in [[id:D379B5F6-E638-4F59-960B-5D0BA61F3495][Spectrum of Trapezium]]
      + G_0 \approx 7e4, \chi = 1.6e5
    + I_{UV} is defined slightly differently, but it should be similar to \chi, except that we need to normalize only on the Lyman-Werner band
    + From the above,  \lambda F_\lambda = 6.2e3 (1e17 / 0.21 pc)**2 / 0.85 = 174 erg/s/cm^2
      + \lambda u_\lambda = 174 / c = 5.8e-09 erg/cm^3
    + Draine normalization is  4e-14 erg/cm^3 at for (\lambda u_{\lambda})_{1000 \AA}
      + => \chi = 5.8e-09/4e-14 = 1.45e+05
    + Sternberg say 6.8e-14 erg/cm^3, which is close enough
    + *Conclusion*: I_{UV} = 1.5e5 for the Bar
  + Density should be the PDR density, which Raman gives as 8.5e4 pcc => n_{100} = 850
  + => \alpha G = 1.54 (1.5e5 / 850) A_{dust} where A_{dust} = \phi_{g} / 1 + sqrt(2.64 \phi_{g} Z\prime)
  + Total optical depth of H I column is \tau_{1,tot} = ln(1 + \alpha G / 2)
  + This is also \tau_{1,tot} = N_1 \sigma_g
    - So that N_1 = 5.26e20 \tau_{1,tot} / \phi_{g} Z\prime
    - And distance to dissociation front is x_D = N_1 / n
  + Solar abundance is 10**-3.31 for O
    + 12 + log(O/H) = 8.69
    + O/H = 4.898e-4
    + Orion has O/H = 4e-4, so Z\prime = 0.82
+ Table of offset x_D to H I/H_2 interface as function of dust parameters
  |    \phi_{g} |   Z\prime | A_{dust} |   \alpha G | \tau_{1,tot} |    N_1 | x_D, mpc |
  |-------+------+-------+-------+-------+--------+----------|
  |   1.0 |  1.0 |  0.38 | 103.3 |  4.65 | 2.4e21 |      9.2 |
  |   0.5 |  1.0 |  0.23 |  62.5 |  4.15 | 4.4e21 |     16.8 |
  | 0.333 |  1.0 |  0.17 |  46.2 |  3.85 | 6.1e21 |     23.3 |
  |   0.1 |  1.0 |  0.07 |  19.0 |  3.00 | 1.6e22 |     61.0 |
  |   0.5 | 0.82 |  0.25 |  67.9 |  4.23 | 5.4e21 |     20.6 |
  |  0.41 | 0.82 |  0.21 |  57.1 |  4.06 | 6.4e21 |     24.4 |
  |   0.2 | 0.82 |  0.12 |  32.6 |  3.51 | 1.1e22 |     41.9 |
  #+TBLFM: $3=$1/(1 + sqrt(2.64 $1 $2));f2::$4=1.54 (1.5e5 / 850) $3;f1::$5=log($4 +1);f2::$6=5.26e20 $5 / $1 $2 ;s2::$7=$6 / 8.5e4 0.001 3.085677582e18 ;f1
  + The Z\prime = 0.82 column values are appropriate for Orion
+ The observed value is 24 mpc, at least from 2.12 micron peak
  + Best-fit with \phi_g = 0.41
  + This implies that \sigma_d = 1.9e-21 0.41 0.82 = 0.64e-21 cm^2/H
  + Or \kappa = 0.64e-21 / 1.3 mp = 294 cm^2/g




**** Plot the SED
#+name: cloudy-fuv-spectrum-plot
#+header: :var MODEL="trap-NH0-19"
#+begin_src python :return figfile :results file
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns
  sys.path.append("../../cloudy-dust-charging")
  from cloudytab import CloudyModel

  sns.set_color_codes()

  figfile = f"cloudy-fuv-spectrum-{MODEL}.pdf"
  prefix = f"../cloudy/models/{MODEL}"
  m = CloudyModel(prefix)

  Ryd = 1.09737315685e5
  data = m.data["cont"]
  wav = 1.e8/(data["Cont  nu"][::-1]*Ryd)
  Flam_inc = data["incident"][::-1]/wav
  Flam_trans = data["trans"][::-1]/wav
  Flam_tot = data["total"][::-1]/wav
  Flam_diffout = data["DiffOut"][::-1]/wav
  Flam_reflc = data["reflc"][::-1]/wav

  wavf = m.data["fcont"]["Energy/A"][::-1]
  fine = m.data["fcont"]["Transmitted"][::-1]
  fine *= np.interp(wavf, wav, Flam_inc)

  wav1, wav2 = 1020, 1030
  mask = (wav >= wav1) & (wav <= wav2)
  norm = np.median(Flam_inc[mask])

  fig, [ax1, ax2, ax3] = plt.subplots(3, 1, figsize=(10, 6), sharex=True)
  ax1.plot(wav, Flam_inc/norm, c="k", lw=0.5)
  ax1.fill_between(wavf, fine/norm, alpha=0.5, lw=0.5)

  ax2.plot(wav, Flam_inc/norm, c="k", lw=0.5)
  ax2.fill_between(wav, Flam_trans/norm, alpha=0.5, lw=0.5)
  #ax.plot(wav, Flam_tot/norm, lw=0.5)

  ax3.fill_between(wav, Flam_diffout/norm, alpha=0.7)
  ax3.fill_between(wav, Flam_reflc/norm, alpha=0.7)

  ax3.set(
      xlim=[wav1, wav2],
      ylim=[0, 3.5],
      xlabel="Wavelength, Å",
      ylabel=r"Flux, $F_\lambda$",
  )
  for ax in ax1, ax2:
      ax.set(
          ylim=[0, 1.5],
          ylabel=r"Flux, $F_\lambda$",
      )
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS: cloudy-fuv-spectrum-plot
[[file:cloudy-fuv-spectrum-trap-NH0-19.pdf]]


#+call: cloudy-fuv-spectrum-plot("trap-NH0-20")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-NH0-20.pdf]]

#+call: cloudy-fuv-spectrum-plot("trap-NH0-21")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-NH0-21.pdf]]

#+call: cloudy-fuv-spectrum-plot("trap-bar-NH0-21")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-bar-NH0-21.pdf]]

#+call: cloudy-fuv-spectrum-plot("trap-bar-NH0-22")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-bar-NH0-22.pdf]]

#+call: cloudy-fuv-spectrum-plot("trap-bar-NH2-22")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-bar-NH2-22.pdf]]

#+call: cloudy-fuv-spectrum-plot("trap-bar-NH2-22-low-dust")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-bar-NH2-22-low-dust.pdf]]

#+call: cloudy-fuv-spectrum-plot("trap-bar-NH2-22-low-dust-low-PAH")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-bar-NH2-22-low-dust-low-PAH.pdf]]


#+call: cloudy-fuv-spectrum-plot("trap-bar-NH0-21-low-dust")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-bar-NH0-21-low-dust.pdf]]

#+call: cloudy-fuv-spectrum-plot("trap-bar-NH0-215-low-dust")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-bar-NH0-215-low-dust.pdf]]

#+call: cloudy-fuv-spectrum-plot("trap-bar-NH0-22-low-dust")

#+RESULTS:
[[file:cloudy-fuv-spectrum-trap-bar-NH0-22-low-dust.pdf]]


And another version where we plot spectrum on a log scale for a sequence of column densities

+ [X] But we need to add in the Rayleigh/Raman scattering as well
  + *no* - this is already includes as the damping wings of Ly\beta
#+name: cloudy-fuv-spec-vs-colden-plot
#+header: :var PREFIX="trap-bar" SUFFIX="-full-dust"
#+begin_src python :return figfile :results file
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns
  sys.path.append("../../cloudy-dust-charging")
  from cloudytab import CloudyModel

  sns.set_color_codes("dark")

  colden_list = [f"NH0-{_}" for _ in ["19", "20", "205", "21", "215", "22"]] + ["NH2-22"]

  figfile = f"cloudy-fuv-spec-vs-colden-{PREFIX}{SUFFIX}.pdf"

  Ryd = 1.09737315685e5
  fig, ax = plt.subplots(1, 1, figsize=(8, 4), sharex=True)

  wav1, wav2 = 1018, 1032
  for i, colden_string in enumerate(colden_list):
      prefix = f"../cloudy/models/{PREFIX}-{colden_string}{SUFFIX}"
      m = CloudyModel(prefix)

      data = m.data["cont"]
      R0 = m.data["em1027"]["Radius"][0]
      # Change from luminosity to flux units
      dilution = 1/(4*np.pi*R0**2)
      wav = 1.e8/(data["Cont  nu"][::-1]*Ryd)
      # Put in units of erg/s/cm2/AA
      Flam_inc = dilution*data["incident"][::-1]/wav
      Flam_trans = dilution*data["trans"][::-1]/wav

      mask = (wav >= wav1) & (wav <= wav2)
      norm = np.nanmedian(Flam_inc[mask])
      if i == 0:
          ax.plot(wav[mask], Flam_inc[mask], c="k", lw=1, label="Incident")
      ax.fill_between(wav[mask], Flam_trans[mask], fc="r", ec="none", alpha=0.15)

  ax.set(
      yscale="linear",
      xlim=[wav1, wav2],
      ylim=[0.0, None],
      xlabel="Far ultraviolet wavelength: $\lambda_{1}$, Å",
      ylabel=r"Flux: $F_\lambda$, erg s$^{-1}$ cm$^{-2}$ Å$^{-1}$",
  )
  ax.minorticks_on()
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS: cloudy-fuv-spec-vs-colden-plot
[[file:cloudy-fuv-spec-vs-colden-trap-bar-full-dust.pdf]]

#+call: cloudy-fuv-spec-vs-colden-plot("trap-bar", "-low-dust")

#+RESULTS:
[[file:cloudy-fuv-spec-vs-colden-trap-bar-low-dust.pdf]]

And finally another version that just does the fine continuum to show the relative effect of the lines only

#+name: cloudy-fuv-fine-spec-vs-colden-plot
#+header: :var PREFIX="trap-bar" SUFFIX="-low-dust"
#+begin_src python :return figfile :results file
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns
  sys.path.append("../../cloudy-dust-charging")
  from cloudytab import CloudyModel

  

  colden_list = [f"NH0-{_}" for _ in ["19", "20", "205", "21", "215", "22"]] # + ["NH2-22"]

  bands = {
      "B133": [6414.85, 6445.45],
      "B080": [6469.25, 6496.45],
      "B054": [6499.85, 6517.7],
      "B033": [6518.55, 6540.65],
      "R040": [6594.2, 6611.2],
      "R058": [6612.05, 6628.2],
      "R087": [6638.4, 6660.5],
      "R136": [6688.55, 6708.95],
  }


  figfile = f"cloudy-fuv-fine-spec-vs-colden-{PREFIX}{SUFFIX}.pdf"

  Ryd = 1.09737315685e5
  fig, ax = plt.subplots(1, 1, figsize=(8, 2.5))

  #ax.axhline(1.0, color="k")

  # Add new axes for Ha wavelengths

  # But we have to be clever since the transformation is non-linear
  lamHa = 6564.553
  lamHa_air = 6562.74
  lamLyb = 1025.7222
  def lam1_from_lam2(lam2):
      return 1.0/(1.0/lamLyb + 1.0/lam2 - 1.0/lamHa)

  dlam2_ticks = np.array([-300.0, -250.0, -200.0, -150.0, -100.0, -50.0, 0.0, 50.0, 100.0, 150.0, 200.0, 250.0])
  lam1_ticks = lam1_from_lam2(lamHa + dlam2_ticks)
  dlam2_ticklabels = [f"${int(_):d}$" for _ in dlam2_ticks]

  alphas = iter([0.2, 0.4, 0.4, 0.6, 0.6, 0.4, 0.4, 0.2])
  bandcolors = iter(["c", "c", "b", "b", "m", "m", "r", "r"])
  for band, [lam2_lo, lam2_hi] in bands.items():
      lam1_lo = lam1_from_lam2(lam2_lo + lamHa - lamHa_air)
      lam1_hi = lam1_from_lam2(lam2_hi + lamHa - lamHa_air)
      ax.axvspan(lam1_lo, lam1_hi, 0.87, 1.0, facecolor=next(bandcolors), alpha=next(alphas), zorder=-10)
      ax.text((lam1_lo + lam1_hi)/2, 1.1, band, ha="center", fontsize="xx-small")

  wav1, wav2 = 1018, 1032
  sns.set_color_codes("dark")
  for i, colden_string in enumerate(colden_list):
      prefix = f"../cloudy/models/{PREFIX}-{colden_string}{SUFFIX}"
      m = CloudyModel(prefix)
      wavf = m.data["fcont"]["Energy/A"][::-1]
      fine = m.data["fcont"]["Transmitted"][::-1]

      mask = (wavf >= wav1) & (wavf <= wav2)
      ax.fill_between(wavf[mask], fine[mask], fc="r", ec="none", alpha=0.15)

  ax.set(
      yscale="linear",
      xlim=[wav1, wav2],
      xticks=lam1_ticks,
      xticklabels=dlam2_ticklabels,
      ylim=[0.0, 1.2],
      xlabel=r"Wavelength shift from H$\alpha$ after Raman scattering: $\Delta\lambda_2$, Å",
      ylabel=r"Relative flux: $F_\lambda / F_{\mathrm{cont}}$",
  )
  #ax.minorticks_on()
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)
#+end_src

#+RESULTS: cloudy-fuv-fine-spec-vs-colden-plot
[[file:cloudy-fuv-fine-spec-vs-colden-trap-bar-low-dust.pdf]]


**** Plot the emissivity structure
#+name: cloudy-emiss-plot
#+header: :var MODEL="trap-NH0-21"
#+begin_src python :return figfile :results file
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns
  sys.path.append("../../cloudy-dust-charging")
  from cloudytab import CloudyModel

  sns.set_color_codes()

  figfile = f"cloudy-emiss-{MODEL}.pdf"
  prefix = f"../cloudy/models/{MODEL}"
  m = CloudyModel(prefix)
  em = m.data["emis"]

  fig, ax = plt.subplots(figsize=(6, 6))
  depth = em["depth"]/(3.085677582e18/1000)
  labels = [
      "O  3 5006.84A", 
      "O  2 7319.99A", 
      "O  1 6300.30A", 
      "BLND 8446.00A", 
      # "BLND 1.13000m", 
      # "O  2 7318.92A", 
      # "H  1 6562.81A", 
      # "Ca B 6562.81A", 
      "O  1 63.1679m", 
      "C  2 157.636m", 
      "H2 v 0", 
      "CO 866.727m", 
      "IRAC 3.60000m", 
      "IRAC 4.50000m", 
      "IRAC 5.80000m", 
      "IRAC 8.00000m", 
  ]
  offset = 0.0
  i0 = np.argmax(em["BLND 8446.00A"])
  x = depth - depth[i0]
  x1, x2 = -x.max(), x.max()
  for label in labels:
      ax.axhline(offset, lw=0.2)
      ax.fill_between(x, offset + em[label]/em[label].max(), offset)
      ax.text(x1, offset, " " + label, va="center", fontsize="x-small")
      offset += 1.5
  #ax.legend(ncol=3, fontsize="x-small", loc="upper right")
  ax.set(
      yscale = "linear",
      xlim = [x2, x1],
      xlabel = "Depth, mpc",
      ylabel = "Emissivity",
  )
  ax.set_yticks(np.arange(len(labels))*1.5)
  ax.set_yticklabels([""]*len(labels))
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)

#+end_src

#+RESULTS: cloudy-emiss-plot
[[file:cloudy-emiss-trap-NH0-21.pdf]]

#+call: cloudy-emiss-plot("trap-bar-NH0-22")

#+RESULTS:
[[file:cloudy-emiss-trap-bar-NH0-22.pdf]]

#+call: cloudy-emiss-plot("trap-bar-NH2-22")

#+RESULTS:
[[file:cloudy-emiss-trap-bar-NH2-22.pdf]]

#+call: cloudy-emiss-plot("trap-bar-NH2-22-full-dust")

#+RESULTS:
[[file:cloudy-emiss-trap-bar-NH2-22-full-dust.pdf]]

#+call: cloudy-emiss-plot("trap-bar-NH2-22-low-dust")

#+RESULTS:
[[file:cloudy-emiss-trap-bar-NH2-22-low-dust.pdf]]

#+RESULTS:
[[file:cloudy-emiss-trap-bar-NH2-22-low-dust-PAH.pdf]]

#+call: cloudy-emiss-plot("trap-bar-NH2-22-low-dust-PAH")

#+call: cloudy-emiss-plot("trap-bar-NH2-22-low-dust-low-PAH")

#+RESULTS:
[[file:cloudy-emiss-trap-bar-NH2-22-low-dust-low-PAH.pdf]]

#+call: cloudy-emiss-plot("trap-bar-BB-NH2-22-low-dust-low-PAH")

#+RESULTS:
[[file:cloudy-emiss-trap-bar-BB-NH2-22-low-dust-low-PAH.pdf]]

#+call: cloudy-emiss-plot("trap-bar-BB-NH2-22-full-dust")

#+RESULTS:
[[file:cloudy-emiss-trap-bar-BB-NH2-22-full-dust.pdf]]

#+name: cloudy-emiss-vs-NH0-plot
#+header: :var MODEL="trap-NH0-21"
#+begin_src python :return figfile :results file
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns
  sys.path.append("../../cloudy-dust-charging")
  from cloudytab import CloudyModel

  sns.set_color_codes()

  figfile = f"cloudy-emiss-NH0-{MODEL}.pdf"
  prefix = f"../cloudy/models/{MODEL}"
  m = CloudyModel(prefix)
  em = m.data["emis"]

  fig, ax = plt.subplots(figsize=(6, 6))
  depth = em["depth"]/(3.085677582e18/1000)
  nH0 = m.data["ovr"]["hden"]*m.data["ovr"]["HI"]
  nzones = len(depth)
  NH0 = np.array([np.trapz(nH0[:i], em["depth"][:i]) for i in range(nzones)])
  labels = [
      "O  3 5006.84A", 
      "O  2 7319.99A", 
      "O  1 6300.30A", 
      "BLND 8446.00A", 
      # "BLND 1.13000m", 
      # "O  2 7318.92A", 
      # "H  1 6562.81A", 
      # "Ca B 6562.81A", 
      "O  1 63.1679m", 
      "C  2 157.636m", 
      "H2 v 0", 
      "CO 866.727m", 
      "IRAC 3.60000m", 
      "IRAC 4.50000m", 
      "IRAC 5.80000m", 
      "IRAC 8.00000m", 
  ]
  offset = 1.0
  i0 = np.argmax(em["BLND 8446.00A"])
  x = NH0
  x1, x2 = 1e16, 1e23
  for label in labels:
      ax.axhline(offset*0.01, lw=0.2)
      y = em[label]/em[label].max()
      m = y > 0.01
      ax.plot(x[m], offset*y[m], label=label)
      ax.text(x2, offset*0.01, " " + label, va="center", fontsize="x-small")
      offset *= 150.0
  #ax.legend(ncol=3, fontsize="x-small", loc="upper right")
  ax.set(
      xscale = "log",
      yscale = "log",
      xlim = [x1, x2],
      ylim = [None, None],
      xlabel = "H0 column, pcmsq",
      ylabel = "Emissivity",
  )
  #ax.set_yticks(np.arange(len(labels))*1.5)
  #ax.set_yticklabels([""]*len(labels))
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)

#+end_src

#+RESULTS: cloudy-emiss-vs-NH0-plot
[[file:cloudy-emiss-NH0-trap-NH0-21.pdf]]


#+call: cloudy-emiss-vs-NH0-plot("trap-bar-NH2-22-full-dust")

#+RESULTS:
[[file:cloudy-emiss-NH0-trap-bar-NH2-22-full-dust.pdf]]

#+call: cloudy-emiss-vs-NH0-plot("trap-bar-NH2-22-low-dust-low-PAH")

#+RESULTS:
[[file:cloudy-emiss-NH0-trap-bar-NH2-22-low-dust-low-PAH.pdf]]

#+call: cloudy-emiss-vs-NH0-plot("trap-bar-BB-NH2-22-low-dust-low-PAH")

#+RESULTS:
[[file:cloudy-emiss-NH0-trap-bar-BB-NH2-22-low-dust-low-PAH.pdf]]

**** Plot the model structure
#+name: cloudy-structure-plot
#+header: :var MODEL="trap-NH0-21"
#+begin_src python :return figfile :results file
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  from matplotlib.ticker import FixedLocator
  import seaborn as sns
  sys.path.append("../../cloudy-dust-charging")
  from cloudytab import CloudyModel

  sns.set_color_codes()

  figfile = f"cloudy-structure-{MODEL}.pdf"
  prefix = f"../cloudy/models/{MODEL}"
  m = CloudyModel(prefix)
  # Deal with case where some files are not the full length
  # Truncate to the shortest
  savefiles = "ovr", "21cm", "phys", "pdr", "pre", "lya", "linetau", "emis"
  nzones = min([len(m.data[_]) for _ in savefiles])
  for s in savefiles:
      m.data[s] = m.data[s][:nzones]

  depth = m.data["ovr"]["depth"]
  T = m.data["ovr"]["Te"]
  Ts = m.data["21cm"]["T(spin)"]
  ne = m.data["phys"]["n(e)"]
  nH0 = m.data["ovr"]["hden"]*m.data["ovr"]["HI"]
  nH2 = m.data["ovr"]["hden"]*m.data["ovr"]["2H_2/H"]
  NH0 = np.array([np.trapz(nH0[:i], depth[:i]) for i in range(nzones)])
  NH2 = np.array([np.trapz(nH2[:i], depth[:i]) for i in range(nzones)])
  NH =  m.data["pdr"]["H colden"]
  kB = 1.3806503e-16
  Pgas = m.data["pre"]["Pgas"]/kB
  Pmag = m.data["pre"]["P(mag)"]/kB
  Prad = m.data["pre"]["Pinteg"]/kB
  Pline = m.data["pre"]["Prad(line)"]/kB

  tauV = m.data["pdr"]["TauV(point)"]
  tau21 = m.data["21cm"]["tau(21cm)"]
  tauLya = m.data["lya"]["TauIn"]
  tauLyb = m.data["linetau"]["H  1 1025.72A"]
  tauOI = m.data["linetau"]["O  1 1028.16A"]

  kappa1027 = m.data["em1027"]["kappa_abs"]
  tau1027 = np.array([np.trapz(kappa1027[:i], depth[:i]) for i in range(nzones)])

  def sigRaman(x):
      if x > 0.0:
          sigma = 0.2367/x**2 - 0.0187/x + 0.0041
      else:
          sigma = 0.2186/x**2 - 0.0344/x - 0.0054
      return 1e-21*sigma

  tauR087 = sigRaman(0.87)*NH0

  varsets = {
      ("Temperature, K", 5.0, 2e4, "log", (10.0, 100.0, 1e3, 1e4)): [
          ["$T$",  T],
          [r"$T_{\mathrm{spin}}$", Ts],
      ],
      ("Density, cm$^{-3}$", 5.0, 2e6, "log", (100.0, 1e4, 1e6)): [
          ["$n_e$", ne],
          [r"$n(\mathrm{H}^0)$", nH0],
          [r"$2 \times n(\mathrm{H}_2)$", nH2],
      ],
      ("Column, cm$^{-2}$", 1e16, 1e23, "log", (1e18, 1e20, 1e22)): [
          [r"$N(\mathrm{H})$", NH],
          [r"$N(\mathrm{H}^0)$", NH0],
          [r"$2 \times N(\mathrm{H}_2)$", NH2],
      ],
      ("Pressure, cm$^{-3}$ K", 3000, 0.8e9, "log", (1e4, 1e6, 1e8)): [
          [r"$P_\mathrm{gas}/k$", Pgas],
          [r"$P_\mathrm{mag}/k$", Pmag],
          [r"$P_\mathrm{cont}/k$", Prad],
          [r"$P_\mathrm{line}/k$", Pline],
      ],
      ("Optical depth", 0.002, 15, "log", (0.01, 0.1, 1, 10)): [
          [r"$\tau_V$", tauV],
          [r"$\tau_{\mathrm{21\,cm}}$", tau21],
          [r"$\tau_{\mathrm{Ly\beta}} / 10^6$", tauLyb/1e6],
          [r"$\tau_{\mathrm{O\,I\,\lambda1028}}$", tauOI],
          [r"$\tau_{R087}$", tauR087],
          [r"$\tau_{1027}$", tau1027],
      ],
  }

  nvarsets = len(varsets)

  i0 = np.argmax(m.data["emis"]["BLND 8446.00A"])
  # Distance from max O I in mpc
  x = (depth - depth[i0])/(3.085677582e18/1000)

  fig, axes = plt.subplots(nvarsets, 1, figsize=(6, 6), sharex=True)
  x1, x2 = -x.max(), x.max()
  i1 = np.argmin(np.abs(x - x1))
  for [(setlabel, y1, y2, yscale, yticks), varset], ax in zip(varsets.items(), axes):
      for label, plotvar in varset:
          ax.plot(x, plotvar)
          if plotvar.max() > y2:
              xtext = np.max(x[plotvar < y2])
              ytext = 0.9*y2
          elif y1 < plotvar[i1] < y2:
              xtext, ytext = x1, plotvar[i1]
          else:
              try:
                  xtext = np.min(x[plotvar > y1])
                  ytext = 5*y1
              except:
                  xtext, ytext = None, None
          if xtext:
              ax.text(xtext, ytext, " " + label, va="center", fontsize="x-small")
      ax.set(ylabel=setlabel, yscale=yscale, ylim=[y1, y2])
      yaxis = ax.get_yaxis()
      yaxis.set_major_locator(FixedLocator(list(yticks)))
      yvals = list(yticks) + [y2]
      for ya, yb in zip(yvals[::2], yvals[1::2]):
          ax.axhspan(ya, yb, fc="k", ec="none", alpha=0.1)

  axes[-1].set(
      xlim = [x2, x1],
      xlabel = "Depth, mpc",
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)

#+end_src

#+RESULTS: cloudy-structure-plot
[[file:cloudy-structure-trap-NH0-21.pdf]]

#+call: cloudy-structure-plot("trap-bar-NH2-22")

#+RESULTS:
[[file:cloudy-structure-trap-bar-NH2-22.pdf]]

#+call: cloudy-structure-plot("trap-bar-NH2-22-full-dust")

#+RESULTS:
[[file:cloudy-structure-trap-bar-NH2-22-full-dust.pdf]]



#+call: cloudy-structure-plot("trap-bar-NH2-22-low-dust")

#+RESULTS:
[[file:cloudy-structure-trap-bar-NH2-22-low-dust.pdf]]

#+call: cloudy-structure-plot("trap-bar-NH2-22-low-dust-PAH")

#+RESULTS:
[[file:cloudy-structure-trap-bar-NH2-22-low-dust-PAH.pdf]]

#+call: cloudy-structure-plot("trap-bar-NH2-22-low-dust-low-PAH")

#+RESULTS:
[[file:cloudy-structure-trap-bar-NH2-22-low-dust-low-PAH.pdf]]

#+call: cloudy-structure-plot("trap-bar-BB-NH2-22-low-dust-low-PAH")

#+RESULTS:
[[file:cloudy-structure-trap-bar-BB-NH2-22-low-dust-low-PAH.pdf]]

#+call: cloudy-structure-plot("trap-bar-BB-NH2-22-full-dust")

#+RESULTS:
[[file:cloudy-structure-trap-bar-BB-NH2-22-full-dust.pdf]]

**** Same but versus electron fraction
#+name: cloudy-structure-efrac-plot
#+header: :var MODEL="trap-NH0-21"
#+begin_src python :return figfile :results file
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  from matplotlib.ticker import FixedLocator
  import seaborn as sns
  sys.path.append("../../cloudy-dust-charging")
  from cloudytab import CloudyModel

  sns.set_color_codes()

  figfile = f"cloudy-structure-efrac-{MODEL}.pdf"
  prefix = f"../cloudy/models/{MODEL}"
  m = CloudyModel(prefix)
  # Deal with case where some files are not the full length
  # Truncate to the shortest
  savefiles = "ovr", "21cm", "phys", "pdr", "pre", "lya", "linetau", "emis"
  nzones = min([len(m.data[_]) for _ in savefiles])
  for s in savefiles:
      m.data[s] = m.data[s][:nzones]

  depth = m.data["ovr"]["depth"]
  T = m.data["ovr"]["Te"]
  Ts = m.data["21cm"]["T(spin)"]
  ne = m.data["phys"]["n(e)"]
  nH0 = m.data["ovr"]["hden"]*m.data["ovr"]["HI"]
  nH2 = m.data["ovr"]["hden"]*m.data["ovr"]["2H_2/H"]
  efrac = m.data["phys"]["n(e)"] / m.data["ovr"]["hden"]
  mfrac = m.data["ovr"]["2H_2/H"]
  NH0 = np.array([np.trapz(nH0[:i], depth[:i]) for i in range(nzones)])
  NH2 = np.array([np.trapz(nH2[:i], depth[:i]) for i in range(nzones)])
  NH =  m.data["pdr"]["H colden"]
  kB = 1.3806503e-16
  Pgas = m.data["pre"]["Pgas"]/kB
  Pmag = m.data["pre"]["P(mag)"]/kB
  Prad = m.data["pre"]["Pinteg"]/kB
  Pline = m.data["pre"]["Prad(line)"]/kB

  tauV = m.data["pdr"]["TauV(point)"]
  tau21 = m.data["21cm"]["tau(21cm)"]
  tauLya = m.data["lya"]["TauIn"]
  tauLyb = m.data["linetau"]["H  1 1025.72A"]
  tauOI = m.data["linetau"]["O  1 1028.16A"]

  # kappa1027 = m.data["em1027"]["kappa_abs"]
  # tau1027 = np.array([np.trapz(kappa1027[:i], depth[:i]) for i in range(nzones)])

  def sigRaman(x):
      if x > 0.0:
          sigma = 0.2367/x**2 - 0.0187/x + 0.0041
      else:
          sigma = 0.2186/x**2 - 0.0344/x - 0.0054
      return 1e-21*sigma

  tauR087 = sigRaman(0.87)*NH0

  varsets = {
      ("Temperature, K", 5.0, 2e4, "log", (10.0, 100.0, 1e3, 1e4)): [
          ["$T$",  T],
          [r"$T_{\mathrm{spin}}$", Ts],
      ],
      ("Density, cm$^{-3}$", 5.0, 2e6, "log", (100.0, 1e4, 1e6)): [
          ["$n_e$", ne],
          [r"$n(\mathrm{H}^0)$", nH0],
          [r"$2 \times n(\mathrm{H}_2)$", nH2],
      ],
      ("Column, cm$^{-2}$", 1e18, 1e23, "log", (1e18, 1e20, 1e22)): [
          [r"$N(\mathrm{H})$", NH],
          [r"$N(\mathrm{H}^0)$", NH0],
          [r"$2 \times N(\mathrm{H}_2)$", NH2],
      ],
      ("Pressure, cm$^{-3}$ K", 3000, 0.8e9, "log", (1e4, 1e6, 1e8)): [
          [r"$P_\mathrm{gas}/k$", Pgas],
          [r"$P_\mathrm{mag}/k$", Pmag],
          [r"$P_\mathrm{cont}/k$", Prad],
          [r"$P_\mathrm{line}/k$", Pline],
      ],
      ("Optical depth", 0.002, 15, "log", (0.01, 0.1, 1, 10)): [
          [r"$\tau_V$", tauV],
          [r"$\tau_{\mathrm{21\,cm}}$", tau21],
          [r"$\tau_{\mathrm{Ly\beta}} / 10^6$", tauLyb/1e6],
          [r"$\tau_{\mathrm{O\,I\,\lambda1028}}$", tauOI],
          [r"$\tau_{R087}$", tauR087],
          # [r"$\tau_{1027}$", tau1027],
      ],
  }

  nvarsets = len(varsets)

  i0 = np.argmax(m.data["emis"]["BLND 8446.00A"])
  # Distance from max O I in mpc
  x = (depth - depth[i0])/(3.085677582e18/1000)
  # Electron fraction - molecular fraction
  x = efrac #- mfrac

  fig, axes = plt.subplots(nvarsets, 1, figsize=(6, 6), sharex=True)
  x1, x2 = x.min(), x.max()
  x00 = 0.7
  i1 = np.argmin(np.abs(x - x00))
  for [(setlabel, y1, y2, yscale, yticks), varset], ax in zip(varsets.items(), axes):
      for label, plotvar in varset:
          ax.plot(x, plotvar)
          if plotvar.max() > y2:
              xtext = np.max(x[plotvar < y2])
              ytext = 0.9*y2
          elif y1 < plotvar[i1] < y2:
              xtext, ytext = x00, plotvar[i1]
          else:
              try:
                  xtext = np.min(x[plotvar > y1])
                  ytext = 5*y1
              except:
                  xtext, ytext = None, None
          if xtext:
              ax.text(xtext, ytext, " " + label, va="center", fontsize="x-small")
      ax.set(ylabel=setlabel, yscale=yscale, ylim=[y1, y2])
      yaxis = ax.get_yaxis()
      yaxis.set_major_locator(FixedLocator(list(yticks)))
      yvals = list(yticks) + [y2]
      for ya, yb in zip(yvals[::2], yvals[1::2]):
          ax.axhspan(ya, yb, fc="k", ec="none", alpha=0.1)

  axes[-1].set(
      xlim = [x1, x2],
      xscale = "log",
      xlabel = "Electron fraction - molecular fraction",
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)

#+end_src

#+RESULTS: cloudy-structure-efrac-plot
[[file:cloudy-structure-efrac-trap-NH0-21.pdf]]

#+call: cloudy-structure-efrac-plot("trap-bar-NH2-22")

#+RESULTS:
[[file:cloudy-structure-efrac-trap-bar-NH2-22.pdf]]

#+call: cloudy-structure-efrac-plot("trap-bar-NH2-22-full-dust")

#+RESULTS:
[[file:cloudy-structure-efrac-trap-bar-NH2-22-full-dust.pdf]]

#+call: cloudy-structure-efrac-plot("trap-bar-NH2-22-low-dust")

#+RESULTS:
[[file:cloudy-structure-efrac-trap-bar-NH2-22-low-dust.pdf]]

#+call: cloudy-structure-efrac-plot("trap-bar-NH2-22-low-dust-PAH")

#+RESULTS:
[[file:cloudy-structure-efrac-trap-bar-NH2-22-low-dust-PAH.pdf]]

#+call: cloudy-structure-efrac-plot("trap-bar-NH2-22-low-dust-low-PAH")

#+RESULTS:
[[file:cloudy-structure-efrac-trap-bar-NH2-22-low-dust-low-PAH.pdf]]


**** Plot the pumping line optical depths
#+name: cloudy-linetau-plot
#+header: :var MODEL="trap-bar-NH2-22-low-dust"
#+begin_src python :return figfile :results file
  import sys
  import numpy as np
  from matplotlib import pyplot as plt
  import seaborn as sns
  sys.path.append("../../cloudy-dust-charging")
  from cloudytab import CloudyModel

  #sns.set_color_codes("bright")

  figfile = f"cloudy-linetau-{MODEL}.pdf"
  prefix = f"../cloudy/models/{MODEL}"
  m = CloudyModel(prefix)
  tau = m.data["linetau"]
  nzones = len(tau)

  # Find dust tau at 6563 from tauV using Blagrave:2007a Table 1
  tau6650 = m.data["pdr"]["TauV(point)"]*(1 - 0.230)/(1 - 0.091)

  fig, ax = plt.subplots(figsize=(8, 4))
  depth = tau["depth"]/(3.085677582e18/1000)
  kappa1026 = m.data["em1026"]["kappa_abs"]
  kappa1027 = m.data["em1027"]["kappa_abs"]
  kappa1028 = m.data["em1028"]["kappa_abs"]
  tau1026 = np.array([np.trapz(kappa1026[:i], tau["depth"][:i]) for i in range(nzones)])
  tau1027 = np.array([np.trapz(kappa1027[:i], tau["depth"][:i]) for i in range(nzones)])
  tau1028 = np.array([np.trapz(kappa1028[:i], tau["depth"][:i]) for i in range(nzones)])
  tau21 = m.data["21cm"]["tau(21cm)"]

  N_H = m.data["pdr"]["H colden"]
  nH0 = m.data["ovr"]["hden"]*m.data["ovr"]["HI"]
  NH0 = np.array([np.trapz(nH0[:i], tau["depth"][:i]) for i in range(nzones)])

  def sigRaman(x):
      if x > 0.0:
          sigma = 0.2367/x**2 - 0.0187/x + 0.0041
      else:
          sigma = 0.2186/x**2 - 0.0344/x - 0.0054
      return 1e-21*sigma



  labels = sorted(tau.colnames[1:])
  # Just use selected lines
  labels = [
      s for s in labels
      if s.startswith("O  1 102")
      or s.startswith("Si 2")
  ]
  n = len(labels)
  # colors = iter(sns.color_palette("hls", n))
  colors = iter(sns.color_palette("GnBu_d", n+1)[1:])

  for label in labels:
      ax.plot(N_H, tau[label], label=label, color=next(colors))

  for label, x, color, alpha in [
          ["R040", 0.403, "m", 0.7],
          ["R058", 0.577, "m", 0.4],
          ["R087", 0.871, "r", 0.5],
          ["R136", 1.357, "r", 0.3],
  ]:
          ax.plot(N_H, sigRaman(x)*NH0,
                  color=color, alpha=alpha, lw=3,
                  label=f"Raman {label}")

  ax.plot(N_H, tau21, color="g", lw=1.5, ls=(0, (10, 3)), label="H I 21 cm")
  ax.plot(N_H, tau6650, color="k", ls="--", label="6650 Å continuum")
  ax.plot(N_H, tau1027, color="k", lw=1.5, label="1027 Å continuum")
  ax.axhline(1.0, color="k", ls=":")
  ax.legend(ncol=2, fontsize="x-small", loc="lower right")
  ax.set(
      xscale = "log",
      yscale = "log",
      ylabel = r"Optical depth, $\tau$",
      xlabel = r"Total H column, cm$^{-2}$",
      ylim = [0.0003, 50.0],
      xlim = [1e18, 5e22],
  )
  sns.despine()
  fig.tight_layout()
  fig.savefig(figfile)

#+end_src

#+RESULTS: cloudy-linetau-plot
[[file:cloudy-linetau-trap-bar-NH2-22-low-dust.pdf]]

#+call: cloudy-linetau-plot("trap-bar-NH2-22-full-dust")

#+RESULTS:
[[file:cloudy-linetau-trap-bar-NH2-22-full-dust.pdf]]

#+call: cloudy-linetau-plot("trap-bar-NH2-22-low-dust-PAH")

#+RESULTS:
[[file:cloudy-linetau-trap-bar-NH2-22-low-dust-PAH.pdf]]

#+call: cloudy-linetau-plot("trap-bar-NH2-22-low-dust-low-PAH")

#+RESULTS:
[[file:cloudy-linetau-trap-bar-NH2-22-low-dust-low-PAH.pdf]]

**** Lines whose emissivity we want to track
+ ~BLND 8446~ is the three components (which we don't resolve in MUSE, separation 4 to 8 km/s)
  + "O  1" 8446.25
  + "O  1" 8446.36
  + "O  1" 8446.76

#+name: cloudy-line-list
+ BLND 8446
+ BLND 11300
+ O  1 6300.30
+ O  2 7319.99
+ O  2 7318.92
+ O  3 5006.84
+ H  1 6562.81
+ Ca B 6562.81A

#+header: :var LINELIST=cloudy-line-list
#+begin_src python :return s
  s = "save lines, emissivity last \".emis\"" + "\n"
  for line in LINELIST:
      s += line[0] + "\n"
  s += "end of lines" + "\n"
#+end_src

#+RESULTS:
#+begin_example
save lines, emissivity last ".emis"
BLND 8446
BLND 11300
O  1 6300.30
O  2 7319.99
O  2 7318.92
O  3 5006.84
H  1 6562.81
Ca B 6562.81A
end of lines
#+end_example

* Ensenada talk [2019-12-04 Wed]

** Abstract
Title: Raman scattering in PDRs

Raman scattering is a non-resonant, inelastic scattering by the damping wings of atomic and molecular absorption lines. It is the inelastic analog of Rayleigh scattering.  The broad Raman-scattered wings of the optical H alpha line can be used to map neutral gas that is illuminated by high-mass stars in star forming regions.  The scattering occurs in the photodissociation region (PDR) that surrounds the ionized H II region. Using MUSE observations of the Orion Nebula, I show how this process gives a new diagnostic window into the outer layers of PDRs such as the Orion Bar and Orion South.  I also show that hitherto misterious spatially diffuse absorption features at 6633 and 6664 Angstrom are actually far-ultraviolet neutral oxygen absorption lines (1027.43, 1028.16 A), which have been Raman-scattered into the optical range.  I show examples of how a spectrograph's effective spectral resolution is boosted when observing these Raman-scattered lines, achieving R > 3e5 with Keck HIRES.

** Resumen
Título: Dispersión Raman en las Regiones Fotodisociadas

La dispersión Raman es una dispersión inelástica no resonante por las alas amortiguadoras de las líneas de absorción atómicas y moleculares. Es el análogo inelástico de la dispersión Rayleigh. Las alas anchas dispersadas por Raman de la línea óptica H alfa se pueden usar para mapear gas neutro que está iluminado por estrellas de alta masa en regiones de formación estelar. La dispersión ocurre en la región fotodisociada (PDR) que rodea la región ionizada H II. Usando observaciones MUSE de la Nebulosa de Orión, muestro cómo este proceso ofrece una nueva ventana de diagnóstico sobre las capas externas de los PDRs, como por ejemplo, la Barra de Orión y Orión Sur. También muestro que las líneas de absorción en 6633 y 6664 Angstrom, hasta ahora de origen misteriosa, son en realidad líneas de oxígeno neutro en el ultravioleta lejano (1027.43, 1028.16 A), que se han dispersado por Raman hasta el rango óptico. Muestro ejemplos de cómo se aumenta la resolución espectral efectiva de un espectrógrafo al observar estas líneas de Raman, logrando R > 3e5 con el echel HIRES de Keck.

** Image
[[file:~/Dropbox/dib-scatter-hii/talk/wjh-raman-sample-slide/wjh-raman-sample-slide.001.jpeg]]

* Older stuff which is now beside the point 


** Looking at spectra of stars
+ Is it possible to see the DIB profiles in the stellar spectra?
  + Specifically the 6632.85 feature?

*** Features seen in \theta^1 C (HD 37022)
+ Using UVES dataset ADP.2016-03-11T12:34:33.367 from ESO
  + 6196
    - I see something at 6196.95 but it is supposed to be at 6195.97
    - And there is nothing at 6614, which should be stronger - so no
  + 5780
    - Broad absorption at 5781.649
    - But wavelength not right, should be at 5780.37
    - And we see nothing at 5797
  + 6284
    - Seen clearly
    - I might have got my wavelength wrong before - was using 6278 which is way off
    - Confusion with sky absorption

** Explanations for absorption
*** Summary
1. Really a gap between two weak emission line forests
   - Not consistent with Orion, which shows smooth continuum
2. Stellar absorption line that is scattered
   - Late B stars have the N III 6633.9 line
   - But they also have other lines
     - E.g. O II 6641.031
3. DIB
   - I think this is the most likely
   - Need to compare with 5782 and 6278 bands
     - Those are correlated with reddening
     - But 6634 is not
   - Note that DIBs are thought to be molecular, according to Krełowski:
     #+begin_quote
     The nearly constant positions and nearly unchanged profiles of DIBs, irrespective of the line of sight, point to free gas-phase molecules as the carriers of these bands. [...] 
     #+end_quote


